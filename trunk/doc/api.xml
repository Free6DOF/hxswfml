<haxe>
	<class path="format.swf.TagId" params="" file="src/format/swf/Constants.hx" module="format.swf.Constants">
		<End public="1" get="inline" set="null" line="37" static="1"><c path="Int"/></End>
		<ShowFrame public="1" get="inline" set="null" line="38" static="1"><c path="Int"/></ShowFrame>
		<DefineShape public="1" get="inline" set="null" line="39" static="1"><c path="Int"/></DefineShape>
		<PlaceObject public="1" get="inline" set="null" line="40" static="1"><c path="Int"/></PlaceObject>
		<RemoveObject public="1" get="inline" set="null" line="41" static="1"><c path="Int"/></RemoveObject>
		<DefineBits public="1" get="inline" set="null" line="42" static="1"><c path="Int"/></DefineBits>
		<DefineButton public="1" get="inline" set="null" line="43" static="1"><c path="Int"/></DefineButton>
		<JPEGTables public="1" get="inline" set="null" line="44" static="1"><c path="Int"/></JPEGTables>
		<SetBackgroundColor public="1" get="inline" set="null" line="45" static="1"><c path="Int"/></SetBackgroundColor>
		<DefineFont public="1" get="inline" set="null" line="46" static="1"><c path="Int"/></DefineFont>
		<DefineText public="1" get="inline" set="null" line="47" static="1"><c path="Int"/></DefineText>
		<DoAction public="1" get="inline" set="null" line="48" static="1"><c path="Int"/></DoAction>
		<DefineFontInfo public="1" get="inline" set="null" line="49" static="1"><c path="Int"/></DefineFontInfo>
		<DefineSound public="1" get="inline" set="null" line="50" static="1"><c path="Int"/></DefineSound>
		<StartSound public="1" get="inline" set="null" line="51" static="1"><c path="Int"/></StartSound>
		<DefineButtonSound public="1" get="inline" set="null" line="52" static="1"><c path="Int"/></DefineButtonSound>
		<SoundStreamHead public="1" get="inline" set="null" line="53" static="1"><c path="Int"/></SoundStreamHead>
		<SoundStreamBlock public="1" get="inline" set="null" line="54" static="1"><c path="Int"/></SoundStreamBlock>
		<DefineBitsLossless public="1" get="inline" set="null" line="55" static="1"><c path="Int"/></DefineBitsLossless>
		<DefineBitsJPEG2 public="1" get="inline" set="null" line="56" static="1"><c path="Int"/></DefineBitsJPEG2>
		<DefineShape2 public="1" get="inline" set="null" line="57" static="1"><c path="Int"/></DefineShape2>
		<DefineButtonCxform public="1" get="inline" set="null" line="58" static="1"><c path="Int"/></DefineButtonCxform>
		<Protect public="1" get="inline" set="null" line="59" static="1"><c path="Int"/></Protect>
		<PlaceObject2 public="1" get="inline" set="null" line="60" static="1"><c path="Int"/></PlaceObject2>
		<RemoveObject2 public="1" get="inline" set="null" line="61" static="1"><c path="Int"/></RemoveObject2>
		<DefineShape3 public="1" get="inline" set="null" line="62" static="1"><c path="Int"/></DefineShape3>
		<DefineText2 public="1" get="inline" set="null" line="63" static="1"><c path="Int"/></DefineText2>
		<DefineButton2 public="1" get="inline" set="null" line="64" static="1"><c path="Int"/></DefineButton2>
		<DefineBitsJPEG3 public="1" get="inline" set="null" line="65" static="1"><c path="Int"/></DefineBitsJPEG3>
		<DefineBitsLossless2 public="1" get="inline" set="null" line="66" static="1"><c path="Int"/></DefineBitsLossless2>
		<DefineEditText public="1" get="inline" set="null" line="67" static="1"><c path="Int"/></DefineEditText>
		<DefineSprite public="1" get="inline" set="null" line="68" static="1"><c path="Int"/></DefineSprite>
		<FrameLabel public="1" get="inline" set="null" line="69" static="1"><c path="Int"/></FrameLabel>
		<SoundStreamHead2 public="1" get="inline" set="null" line="70" static="1"><c path="Int"/></SoundStreamHead2>
		<DefineMorphShape public="1" get="inline" set="null" line="71" static="1"><c path="Int"/></DefineMorphShape>
		<DefineFont2 public="1" get="inline" set="null" line="72" static="1"><c path="Int"/></DefineFont2>
		<ExportAssets public="1" get="inline" set="null" line="73" static="1"><c path="Int"/></ExportAssets>
		<ImportAssets public="1" get="inline" set="null" line="74" static="1"><c path="Int"/></ImportAssets>
		<EnableDebugger public="1" get="inline" set="null" line="75" static="1"><c path="Int"/></EnableDebugger>
		<DoInitAction public="1" get="inline" set="null" line="76" static="1"><c path="Int"/></DoInitAction>
		<DefineVideoStream public="1" get="inline" set="null" line="77" static="1"><c path="Int"/></DefineVideoStream>
		<VideoFrame public="1" get="inline" set="null" line="78" static="1"><c path="Int"/></VideoFrame>
		<DefineFontInfo2 public="1" get="inline" set="null" line="79" static="1"><c path="Int"/></DefineFontInfo2>
		<EnableDebugger2 public="1" get="inline" set="null" line="80" static="1"><c path="Int"/></EnableDebugger2>
		<ScriptLimits public="1" get="inline" set="null" line="81" static="1"><c path="Int"/></ScriptLimits>
		<SetTabIndex public="1" get="inline" set="null" line="82" static="1"><c path="Int"/></SetTabIndex>
		<FileAttributes public="1" get="inline" set="null" line="83" static="1"><c path="Int"/></FileAttributes>
		<PlaceObject3 public="1" get="inline" set="null" line="84" static="1"><c path="Int"/></PlaceObject3>
		<ImportAssets2 public="1" get="inline" set="null" line="85" static="1"><c path="Int"/></ImportAssets2>
		<RawABC public="1" get="inline" set="null" line="86" static="1"><c path="Int"/></RawABC>
		<DefineFontAlignZones public="1" get="inline" set="null" line="87" static="1"><c path="Int"/></DefineFontAlignZones>
		<CSMTextSettings public="1" get="inline" set="null" line="88" static="1"><c path="Int"/></CSMTextSettings>
		<DefineFont3 public="1" get="inline" set="null" line="89" static="1"><c path="Int"/></DefineFont3>
		<SymbolClass public="1" get="inline" set="null" line="90" static="1"><c path="Int"/></SymbolClass>
		<Metadata public="1" get="inline" set="null" line="91" static="1"><c path="Int"/></Metadata>
		<DefineScalingGrid public="1" get="inline" set="null" line="92" static="1"><c path="Int"/></DefineScalingGrid>
		<DoABC public="1" get="inline" set="null" line="93" static="1"><c path="Int"/></DoABC>
		<DefineShape4 public="1" get="inline" set="null" line="94" static="1"><c path="Int"/></DefineShape4>
		<DefineMorphShape2 public="1" get="inline" set="null" line="95" static="1"><c path="Int"/></DefineMorphShape2>
		<DefineSceneAndFrameLabelData public="1" get="inline" set="null" line="96" static="1"><c path="Int"/></DefineSceneAndFrameLabelData>
		<DefineBinaryData public="1" get="inline" set="null" line="97" static="1"><c path="Int"/></DefineBinaryData>
		<DefineFontName public="1" get="inline" set="null" line="98" static="1"><c path="Int"/></DefineFontName>
		<StartSound2 public="1" get="inline" set="null" line="99" static="1"><c path="Int"/></StartSound2>
		<DefineBitsJPEG4 public="1" get="inline" set="null" line="100" static="1"><c path="Int"/></DefineBitsJPEG4>
		<DefineFont4 public="1" get="inline" set="null" line="101" static="1"><c path="Int"/></DefineFont4>
		<haxe_doc>
 * Tag id constants
 * not for public usage
 </haxe_doc>
	</class>
	<class path="format.swf.FillStyleTypeId" params="" file="src/format/swf/Constants.hx" module="format.swf.Constants">
		<Solid public="1" get="inline" set="null" line="105" static="1"><c path="Int"/></Solid>
		<LinearGradient public="1" get="inline" set="null" line="106" static="1"><c path="Int"/></LinearGradient>
		<RadialGradient public="1" get="inline" set="null" line="107" static="1"><c path="Int"/></RadialGradient>
		<FocalRadialGradient public="1" get="inline" set="null" line="108" static="1"><c path="Int"/></FocalRadialGradient>
		<RepeatingBitmap public="1" get="inline" set="null" line="109" static="1"><c path="Int"/></RepeatingBitmap>
		<ClippedBitmap public="1" get="inline" set="null" line="110" static="1"><c path="Int"/></ClippedBitmap>
		<NonSmoothedRepeatingBitmap public="1" get="inline" set="null" line="111" static="1"><c path="Int"/></NonSmoothedRepeatingBitmap>
		<NonSmoothedClippedBitmap public="1" get="inline" set="null" line="112" static="1"><c path="Int"/></NonSmoothedClippedBitmap>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="C:\Program Files\Motion-Twin\haxe/std/haxe/io/BytesBuffer.hx">
		<b><c path="Array"><c path="Int"/></c></b>
		<addByte public="1" get="inline" set="null" line="55"><f a="byte">
	<c path="Int"/>
	<e path="Void"/>
</f></addByte>
		<add public="1" get="inline" set="null" line="69"><f a="src">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></add>
		<addBytes public="1" get="inline" set="null" line="84"><f a="src:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></addBytes>
		<getBytes public="1" set="method" line="106">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>
		Returns either a copy or a reference of the current bytes.
		Once called, the buffer can no longer be used.
	</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="41"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="format.abc.Reader" params="" file="src/format/abc/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<opr><c path="format.abc.OpReader"/></opr>
		<functions public="1"><c path="Array"><t path="format.abc.Function"/></c></functions>
		<readInt get="inline" set="null" line="45"><f a=""><c path="Int"/></f></readInt>
		<readIndex params="T" get="inline" set="null" line="49"><f a=""><e path="format.abc.Index"><c path="readIndex.T"/></e></f></readIndex>
		<readIndexOpt params="T" set="method" line="53"><f a=""><t path="Null"><e path="format.abc.Index"><c path="readIndexOpt.T"/></e></t></f></readIndexOpt>
		<readList params="T" set="method" line="58"><f a="f">
	<f a=""><c path="readList.T"/></f>
	<c path="Array"><c path="readList.T"/></c>
</f></readList>
		<readList2 params="T" set="method" line="68"><f a="f">
	<f a=""><c path="readList2.T"/></f>
	<c path="Array"><c path="readList2.T"/></c>
</f></readList2>
		<readString set="method" line="76"><f a=""><c path="String"/></f></readString>
		<readNamespace set="method" line="80"><f a=""><e path="format.abc.Namespace"/></f></readNamespace>
		<readNsSet set="method" line="95"><f a=""><t path="format.abc.NamespaceSet"/></f></readNsSet>
		<readName set="method" line="102"><f a="?k">
	<c path="Int"/>
	<e path="format.abc.Name"/>
</f></readName>
		<readValue set="method" line="138"><f a="extra">
	<e path="Bool"/>
	<e path="format.abc.Value"/>
</f></readValue>
		<readMethodType set="method" line="158"><f a=""><t path="format.abc.MethodType"/></f></readMethodType>
		<readMetadata set="method" line="201"><f a=""><a>
	<name><e path="format.abc.Index"><c path="String"/></e></name>
	<data><c path="Array"><a>
	<v><e path="format.abc.Index"><c path="String"/></e></v>
	<n><t path="Null"><e path="format.abc.Index"><c path="String"/></e></t></n>
</a></c></data>
</a></f></readMetadata>
		<readField set="method" line="213"><f a=""><t path="format.abc.Field"/></f></readField>
		<readClass set="method" line="255"><f a=""><t path="format.abc.ClassDef"/></f></readClass>
		<readInit set="method" line="279"><f a=""><t path="format.abc.Init"/></f></readInit>
		<readTryCatch set="method" line="288"><f a=""><t path="format.abc.TryCatch"/></f></readTryCatch>
		<readFunction set="method" line="298"><f a=""><t path="format.abc.Function"/></f></readFunction>
		<read public="1" set="method" line="322"><f a=""><c path="format.abc.ABCData"/></f></read>
		<new public="1" set="method" line="38"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="format.tools._InflateImpl.Window" params="" file="src/format/tools/InflateImpl.hx" private="1" module="format.tools.InflateImpl">
		<SIZE public="1" get="inline" set="null" line="36" static="1"><c path="Int"/></SIZE>
		<BUFSIZE public="1" get="inline" set="null" line="37" static="1"><c path="Int"/></BUFSIZE>
		<buffer public="1"><c path="haxe.io.Bytes"/></buffer>
		<pos public="1"><c path="Int"/></pos>
		<crc><c path="format.tools.Adler32"/></crc>
		<slide public="1" set="method" line="49"><f a=""><e path="Void"/></f></slide>
		<addBytes public="1" set="method" line="57"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></addBytes>
		<addByte public="1" set="method" line="63"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></addByte>
		<getLastChar public="1" set="method" line="69"><f a=""><c path="Int"/></f></getLastChar>
		<available public="1" set="method" line="73"><f a=""><c path="Int"/></f></available>
		<checksum public="1" set="method" line="77"><f a=""><c path="format.tools.Adler32"/></f></checksum>
		<new public="1" set="method" line="43"><f a="hasCrc">
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="format.tools._InflateImpl.State" params="" file="src/format/tools/InflateImpl.hx" private="1" module="format.tools.InflateImpl">
		<Head/>
		<Flat/>
		<Done/>
		<DistOne/>
		<Dist/>
		<Crc/>
		<CData/>
		<Block/>
	</enum>
	<class path="format.tools.InflateImpl" params="" file="src/format/tools/InflateImpl.hx">
		<LEN_EXTRA_BITS_TBL line="97" static="1"><c path="Array"><c path="Int"/></c></LEN_EXTRA_BITS_TBL>
		<LEN_BASE_VAL_TBL line="98" static="1"><c path="Array"><c path="Int"/></c></LEN_BASE_VAL_TBL>
		<DIST_EXTRA_BITS_TBL line="99" static="1"><c path="Array"><c path="Int"/></c></DIST_EXTRA_BITS_TBL>
		<DIST_BASE_VAL_TBL line="100" static="1"><c path="Array"><c path="Int"/></c></DIST_BASE_VAL_TBL>
		<CODE_LENGTHS_POS line="101" static="1"><c path="Array"><c path="Int"/></c></CODE_LENGTHS_POS>
		<FIXED_HUFFMAN line="119" static="1"><e path="format.tools.Huffman"/></FIXED_HUFFMAN>
		<run public="1" set="method" line="368" static="1"><f a="i:?bufsize">
	<c path="haxe.io.Input"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></run>
		<nbits><c path="Int"/></nbits>
		<bits><c path="Int"/></bits>
		<state><e path="format.tools._InflateImpl.State"/></state>
		<final><e path="Bool"/></final>
		<huffman><e path="format.tools.Huffman"/></huffman>
		<huffdist><t path="Null"><e path="format.tools.Huffman"/></t></huffdist>
		<htools><c path="format.tools.HuffTools"/></htools>
		<len><c path="Int"/></len>
		<dist><c path="Int"/></dist>
		<needed><c path="Int"/></needed>
		<output><c path="haxe.io.Bytes"/></output>
		<outpos><c path="Int"/></outpos>
		<input><c path="haxe.io.Input"/></input>
		<lengths><c path="Array"><c path="Int"/></c></lengths>
		<window><c path="format.tools._InflateImpl.Window"/></window>
		<buildFixedHuffman set="method" line="141"><f a=""><e path="format.tools.Huffman"/></f></buildFixedHuffman>
		<readBytes public="1" set="method" line="151"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<getBits set="method" line="161"><f a="n">
	<c path="Int"/>
	<c path="Int"/>
</f></getBits>
		<getBit set="method" line="172"><f a=""><e path="Bool"/></f></getBit>
		<getRevBits set="method" line="183"><f a="n">
	<c path="Int"/>
	<c path="Int"/>
</f></getRevBits>
		<resetBits set="method" line="192"><f a=""><e path="Void"/></f></resetBits>
		<addBytes set="method" line="197"><f a="b:p:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></addBytes>
		<addByte set="method" line="204"><f a="b">
	<c path="Int"/>
	<e path="Void"/>
</f></addByte>
		<addDistOne set="method" line="211"><f a="n">
	<c path="Int"/>
	<e path="Void"/>
</f></addDistOne>
		<addDist set="method" line="217"><f a="d:len">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></addDist>
		<applyHuffman set="method" line="221"><f a="h">
	<e path="format.tools.Huffman"/>
	<c path="Int"/>
</f></applyHuffman>
		<inflateLengths set="method" line="229"><f a="a:max">
	<c path="Array"><c path="Int"/></c>
	<c path="Int"/>
	<e path="Void"/>
</f></inflateLengths>
		<inflateLoop set="method" line="258"><f a=""><e path="Bool"/></f></inflateLoop>
		<new public="1" set="method" line="121"><f a="i:?header:?crc">
	<c path="haxe.io.Input"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="be.haxer.hxswfml.GlyphData" params="" file="src/be/haxer/hxswfml/FontWriter.hx" module="be.haxer.hxswfml.FontWriter">
		<a>
			<yMin><c path="Float"/></yMin>
			<yMax><c path="Float"/></yMax>
			<xMin><c path="Float"/></xMin>
			<xMax><c path="Float"/></xMax>
			<leftsideBearing><c path="Float"/></leftsideBearing>
			<leading><c path="Float"/></leading>
			<descent><c path="Float"/></descent>
			<data><c path="Array"><c path="Float"/></c></data>
			<commands><c path="Array"><c path="Int"/></c></commands>
			<charCode><c path="Int"/></charCode>
			<ascent><c path="Float"/></ascent>
			<advanceWidth><c path="Float"/></advanceWidth>
			<_width><c path="Float"/></_width>
			<_height><c path="Float"/></_height>
		</a>
		<haxe_doc>
 * ...
 * @author Jan J. Flanders
 </haxe_doc>
	</typedef>
	<class path="be.haxer.hxswfml.FontWriter" params="" file="src/be/haxer/hxswfml/FontWriter.hx">
		<fontName public="1"><c path="String"/></fontName>
		<zip><c path="haxe.io.Bytes"/></zip>
		<swf><c path="haxe.io.Bytes"/></swf>
		<path><c path="String"/></path>
		<hash><c path="IntHash"><t path="be.haxer.hxswfml.GlyphData"/></c></hash>
		<chars><c path="Array"><c path="Int"/></c></chars>
		<outputType><c path="String"/></outputType>
		<fontData3><e path="format.swf.FontData"/></fontData3>
		<defineFont3SWFTag><e path="format.swf.SWFTag"/></defineFont3SWFTag>
		<leading><c path="Int"/></leading>
		<zipResources_charClass><c path="String"/></zipResources_charClass>
		<zipResources_mainClass><c path="String"/></zipResources_mainClass>
		<zipResources_buildFile><c path="String"/></zipResources_buildFile>
		<listGlyphs public="1" set="method" line="59"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="String"/>
</f></listGlyphs>
		<writeOTF public="1" set="method" line="119"><f a="id:name:bytes">
	<c path="Int"/>
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<e path="format.swf.SWFTag"/>
</f></writeOTF>
		<write public="1" set="method" line="160"><f a="bytes:rangesStr:?outType">
	<c path="haxe.io.Bytes"/>
	<c path="String"/>
	<c path="String"/>
	<e path="Void"/>
</f></write>
		<writePaths set="method" line="533"><f a="arr">
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></writePaths>
		<getPath public="1" set="method" line="656"><f a=""><c path="String"/></f></getPath>
		<getZip public="1" set="method" line="660"><f a=""><c path="haxe.io.Bytes"/></f></getZip>
		<getHash public="1" set="method" line="664"><f a="?serialize">
	<e path="Bool"/>
	<d/>
</f></getHash>
		<getTag public="1" set="method" line="672"><f a="id">
	<c path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></getTag>
		<getSWF public="1" set="method" line="676"><f a="?id:?className:?version:?compressed:?width:?height:?fps:?nframes">
	<c path="Int"/>
	<c path="String"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></getSWF>
		<qCpoint><t path="format.ttf.GlyfPath"/></qCpoint>
		<buildPaths set="method" line="764"><f a="data">
	<t path="format.ttf.GlyphSimple"/>
	<c path="Array"><t path="format.ttf.GlyfPath"/></c>
</f></buildPaths>
		<makePath set="method" line="798"><f a="p1:p2:arr:flags:xCoordinates:yCoordinates">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Array"><t path="format.ttf.GlyfPath"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Float"/></c>
	<c path="Array"><c path="Float"/></c>
	<e path="Void"/>
</f></makePath>
		<init set="method" line="820"><f a=""><e path="Void"/></f></init>
		<new public="1" set="method" line="55"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="format.tools.BitsInput" params="" file="src/format/tools/BitsInput.hx">
		<i><c path="haxe.io.Input"/></i>
		<nbits><c path="Int"/></nbits>
		<bits><c path="Int"/></bits>
		<readBits public="1" set="method" line="41"><f a="n">
	<c path="Int"/>
	<c path="Int"/>
</f></readBits>
		<read public="1" set="method" line="63"><f a=""><e path="Bool"/></f></read>
		<reset public="1" get="inline" set="null" line="72"><f a=""><e path="Void"/></f></reset>
		<new public="1" set="method" line="35"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="format.mp3.FrameType" params="" file="src/format/mp3/Reader.hx" module="format.mp3.Reader">
		<FT_NONE/>
		<FT_MP3/>
		<haxe_doc>
 * Used by seekFrame to retrun the type
 * of frame (possibly) found.
 </haxe_doc>
	</enum>
	<class path="format.mp3.Reader" params="" file="src/format/mp3/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<bits><c path="format.tools.BitsInput"/></bits>
		<version><c path="Int"/></version>
		<samples><c path="Int"/></samples>
		<sampleSize><c path="Int"/></sampleSize>
		<any_read><e path="Bool"/></any_read>
		<id3v2_data><c path="haxe.io.Bytes"/></id3v2_data>
		<id3v2_version><c path="Int"/></id3v2_version>
		<id3v2_flags><c path="Int"/></id3v2_flags>
		<skipID3v2 public="1" set="method" line="78">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
    * Called after found 'ID3' signature
    * at the beginning of the file.
    *
    * Records the raw tag data.
    </haxe_doc>
		</skipID3v2>
		<seekFrame public="1" set="method" line="101">
			<f a=""><e path="format.mp3.FrameType"/></f>
			<haxe_doc>
    * Winds the input stream until the 11-bit
    * syncword is found.
    *
    * @returns Bool false if not found (this should happen at eof).
    </haxe_doc>
		</seekFrame>
		<readFrames public="1" set="method" line="151">
			<f a=""><c path="Array"><t path="format.mp3.MP3Frame"/></c></f>
			<haxe_doc>
    * Returns all valid frames. Invalid frames
    * are discarded.
    </haxe_doc>
		</readFrames>
		<readFrameHeader public="1" set="method" line="171">
			<f a=""><t path="format.mp3.MP3Header"/></f>
			<haxe_doc>
    * Returns null if header proves to be invalid.
    </haxe_doc>
		</readFrameHeader>
		<readFrame public="1" set="method" line="251">
			<f a=""><t path="format.mp3.MP3Frame"/></f>
			<haxe_doc>
    * Reads a frame from the input.
    *
    * The input position should already be just past the
    * 11 bit syncword.
    *
    * Returns null if the header is invalid or the frame was incomplete.
    </haxe_doc>
		</readFrame>
		<read public="1" set="method" line="281">
			<f a=""><t path="format.mp3.MP3"/></f>
			<haxe_doc>
    * Reads the MP3 data. 
    *
    * Currently returns all valid frames.
    </haxe_doc>
		</read>
		<new public="1" set="method" line="62"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="String" params="" file="C:\Program Files\Motion-Twin\haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of characters in the String.
	</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been uppercased.
	</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an String where all characters have been lowercased.
	</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the character at the given position.
		Returns the empty String if outside of String bounds.
	</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Returns the character code at the given position.
		Returns [null] if outside of String bounds.
	</haxe_doc>
		</charCodeAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of first occurence of [value]
		Returns [1-1] if [value] is not found.
		The optional [startIndex] parameter allows you to specify at which character to start searching.
		The position returned is still relative to the beginning of the string.
	</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Similar to [indexOf] but returns the latest index.
	</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Split the string using the specified delimiter.
	</haxe_doc>
		</split>
		<substr public="1" set="method">
			<f a="pos:?len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a part of the String, taking [len] characters starting from [pos].
		If [len] is not specified, it takes all the remaining characters.
	</haxe_doc>
		</substr>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the String itself.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a copy from a given String.
	</haxe_doc>
		</new>
		<haxe_doc>
	The basic String class.
</haxe_doc>
	</class>
	<typedef path="format.swf.Fixed" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><c path="haxe.Int32"/></typedef>
	<typedef path="format.swf.Fixed8" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><c path="Int"/></typedef>
	<typedef path="format.swf.SWF" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<tags><c path="Array"><e path="format.swf.SWFTag"/></c></tags>
	<header><t path="format.swf.SWFHeader"/></header>
</a></typedef>
	<enum path="format.swf.SWFTag" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<TUnknown a="id:data">
			<t path="Null"><c path="Int"/></t>
			<c path="haxe.io.Bytes"/>
		</TUnknown>
		<TSymbolClass a="symbols"><c path="Array"><t path="format.swf.SymData"/></c></TSymbolClass>
		<TStartSound a="id:soundInfo">
			<c path="Int"/>
			<t path="format.swf.SoundInfo"/>
		</TStartSound>
		<TSoundStreamHead2 a="data"><t path="format.swf.SoundStreamHead2"/></TSoundStreamHead2>
		<TSoundStreamBlock a="samplesCount:seekSamples:data">
			<c path="Int"/>
			<c path="Int"/>
			<c path="haxe.io.Bytes"/>
		</TSoundStreamBlock>
		<TSound a="data"><t path="format.swf.Sound"/></TSound>
		<TShowFrame/>
		<TShape a="id:data">
			<c path="Int"/>
			<e path="format.swf.ShapeData"/>
		</TShape>
		<TScriptLimits a="maxRecursion:timeoutSeconds">
			<c path="Int"/>
			<c path="Int"/>
		</TScriptLimits>
		<TSandBox a="v"><t path="format.swf.FileAttributes"/></TSandBox>
		<TRemoveObject2 a="depth"><c path="Int"/></TRemoveObject2>
		<TPlaceObject3 a="po"><c path="format.swf.PlaceObject"/></TPlaceObject3>
		<TPlaceObject2 a="po"><c path="format.swf.PlaceObject"/></TPlaceObject2>
		<TMorphShape a="id:data">
			<c path="Int"/>
			<e path="format.swf.MorphShapeData"/>
		</TMorphShape>
		<TMetadata a="data"><c path="String"/></TMetadata>
		<TJPEGTables a="data"><c path="haxe.io.Bytes"/></TJPEGTables>
		<TImportAssets a="url"><c path="String"/></TImportAssets>
		<TFrameLabel a="label:anchor">
			<c path="String"/>
			<e path="Bool"/>
		</TFrameLabel>
		<TFontInfo a="id:data">
			<c path="Int"/>
			<e path="format.swf.FontInfoData"/>
		</TFontInfo>
		<TFont a="id:data">
			<c path="Int"/>
			<e path="format.swf.FontData"/>
		</TFont>
		<TExportAssets a="symbols"><c path="Array"><t path="format.swf.SymData"/></c></TExportAssets>
		<TEnd/>
		<TDoInitActions a="id:data">
			<c path="Int"/>
			<c path="haxe.io.Bytes"/>
		</TDoInitActions>
		<TDoAction a="data"><c path="haxe.io.Bytes"/></TDoAction>
		<TDefineVideoStream a="id:data">
			<c path="Int"/>
			<t path="format.swf.VideoInfo"/>
		</TDefineVideoStream>
		<TDefineVideoFrame a="id:frameNum:data">
			<c path="Int"/>
			<c path="Int"/>
			<c path="haxe.io.Bytes"/>
		</TDefineVideoFrame>
		<TDefineScalingGrid a="id:splitter">
			<c path="Int"/>
			<t path="format.swf.Rect"/>
		</TDefineScalingGrid>
		<TDefineEditText a="id:data">
			<c path="Int"/>
			<t path="format.swf.TextFieldData"/>
		</TDefineEditText>
		<TDefineButton2 a="id:records">
			<c path="Int"/>
			<c path="Array"><t path="format.swf.ButtonRecord"/></c>
		</TDefineButton2>
		<TClip a="id:frames:tags">
			<c path="Int"/>
			<c path="Int"/>
			<c path="Array"><e path="format.swf.SWFTag"/></c>
		</TClip>
		<TBitsLossless2 a="data"><t path="format.swf.Lossless"/></TBitsLossless2>
		<TBitsLossless a="data"><t path="format.swf.Lossless"/></TBitsLossless>
		<TBitsJPEG a="id:data">
			<c path="Int"/>
			<e path="format.swf.JPEGData"/>
		</TBitsJPEG>
		<TBinaryData a="id:data">
			<c path="Int"/>
			<c path="haxe.io.Bytes"/>
		</TBinaryData>
		<TBackgroundColor a="color"><c path="Int"/></TBackgroundColor>
		<TActionScript3 a="data:?context">
			<c path="haxe.io.Bytes"/>
			<t path="format.swf.AS3Context"/>
		</TActionScript3>
	</enum>
	<typedef path="format.swf.TextFieldData" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<wordWrap><e path="Bool"/></wordWrap>
	<wasStatic><e path="Bool"/></wasStatic>
	<variableName><c path="String"/></variableName>
	<useOutlines><e path="Bool"/></useOutlines>
	<textColor><t path="format.swf.RGBA"/></textColor>
	<selectable><e path="Bool"/></selectable>
	<rightMargin><c path="Int"/></rightMargin>
	<password><e path="Bool"/></password>
	<multiline><e path="Bool"/></multiline>
	<maxLength><c path="Int"/></maxLength>
	<leftMargin><c path="Int"/></leftMargin>
	<leading><c path="Int"/></leading>
	<input><e path="Bool"/></input>
	<initialText><c path="String"/></initialText>
	<indent><c path="Int"/></indent>
	<html><e path="Bool"/></html>
	<hasTextColor><e path="Bool"/></hasTextColor>
	<hasText><e path="Bool"/></hasText>
	<hasMaxLength><e path="Bool"/></hasMaxLength>
	<hasLayout><e path="Bool"/></hasLayout>
	<hasFontClass><e path="Bool"/></hasFontClass>
	<hasFont><e path="Bool"/></hasFont>
	<fontID><c path="Int"/></fontID>
	<fontHeight><c path="Int"/></fontHeight>
	<fontClass><c path="String"/></fontClass>
	<bounds><t path="format.swf.Rect"/></bounds>
	<border><e path="Bool"/></border>
	<autoSize><e path="Bool"/></autoSize>
	<align><c path="Int"/></align>
</a></typedef>
	<typedef path="format.swf.ButtonRecord" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<up><e path="Bool"/></up>
	<over><e path="Bool"/></over>
	<matrix><t path="Null"><t path="format.swf.Matrix"/></t></matrix>
	<id><c path="Int"/></id>
	<hit><e path="Bool"/></hit>
	<down><e path="Bool"/></down>
	<depth><c path="Int"/></depth>
</a></typedef>
	<typedef path="format.swf.SoundInfo" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<syncStop><e path="Bool"/></syncStop>
	<loopCount><t path="Null"><c path="Int"/></t></loopCount>
	<hasLoops><e path="Bool"/></hasLoops>
</a></typedef>
	<typedef path="format.swf.SoundEnvelope" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<rightLevel><c path="Int"/></rightLevel>
	<pos44><c path="Int"/></pos44>
	<leftLevel><c path="Int"/></leftLevel>
</a></typedef>
	<typedef path="format.swf.FileAttributes" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<useNetWork><e path="Bool"/></useNetWork>
	<useGPU><e path="Bool"/></useGPU>
	<useDirectBlit><e path="Bool"/></useDirectBlit>
	<hasMetaData><e path="Bool"/></hasMetaData>
	<actionscript3><e path="Bool"/></actionscript3>
</a></typedef>
	<typedef path="format.swf.SWFHeader" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<width><c path="Int"/></width>
	<version><c path="Int"/></version>
	<nframes><c path="Int"/></nframes>
	<height><c path="Int"/></height>
	<fps><t path="format.swf.Fixed8"/></fps>
	<compressed><e path="Bool"/></compressed>
</a></typedef>
	<typedef path="format.swf.AS3Context" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<label><c path="String"/></label>
	<id><c path="Int"/></id>
</a></typedef>
	<typedef path="format.swf.SymData" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<className><c path="String"/></className>
	<cid><c path="Int"/></cid>
</a></typedef>
	<class path="format.swf.PlaceObject" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<depth public="1"><c path="Int"/></depth>
		<move public="1"><e path="Bool"/></move>
		<cid public="1"><t path="Null"><c path="Int"/></t></cid>
		<matrix public="1"><t path="Null"><t path="format.swf.Matrix"/></t></matrix>
		<color public="1"><t path="Null"><t path="format.swf.CXA"/></t></color>
		<ratio public="1"><t path="Null"><c path="Int"/></t></ratio>
		<instanceName public="1"><t path="Null"><c path="String"/></t></instanceName>
		<clipDepth public="1"><t path="Null"><c path="Int"/></t></clipDepth>
		<events public="1"><t path="Null"><c path="Array"><t path="format.swf.ClipEvent"/></c></t></events>
		<filters public="1"><t path="Null"><c path="Array"><e path="format.swf.Filter"/></c></t></filters>
		<blendMode public="1"><t path="Null"><e path="format.swf.BlendMode"/></t></blendMode>
		<bitmapCache public="1"><e path="Bool"/></bitmapCache>
		<className public="1"><t path="Null"><c path="String"/></t></className>
		<hasImage public="1"><e path="Bool"/></hasImage>
		<new public="1" set="method" line="171"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="format.swf.Rect" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<top><c path="Int"/></top>
	<right><c path="Int"/></right>
	<left><c path="Int"/></left>
	<bottom><c path="Int"/></bottom>
</a></typedef>
	<enum path="format.swf.ShapeData" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<SHDShape4 a="data"><t path="format.swf.Shape4Data"/></SHDShape4>
		<SHDShape3 a="bounds:shapes">
			<t path="format.swf.Rect"/>
			<t path="format.swf.ShapeWithStyleData"/>
		</SHDShape3>
		<SHDShape2 a="bounds:shapes">
			<t path="format.swf.Rect"/>
			<t path="format.swf.ShapeWithStyleData"/>
		</SHDShape2>
		<SHDShape1 a="bounds:shapes">
			<t path="format.swf.Rect"/>
			<t path="format.swf.ShapeWithStyleData"/>
		</SHDShape1>
	</enum>
	<enum path="format.swf.MorphShapeData" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<MSDShape2 a="data"><t path="format.swf.MorphShapeData2"/></MSDShape2>
		<MSDShape1 a="data"><t path="format.swf.MorphShapeData1"/></MSDShape1>
	</enum>
	<typedef path="format.swf.MorphShapeData1" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<startEdges><t path="format.swf.ShapeWithoutStyleData"/></startEdges>
	<startBounds><t path="format.swf.Rect"/></startBounds>
	<lineStyles><c path="Array"><t path="format.swf.Morph1LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.MorphFillStyle"/></c></fillStyles>
	<endEdges><t path="format.swf.ShapeWithoutStyleData"/></endEdges>
	<endBounds><t path="format.swf.Rect"/></endBounds>
</a></typedef>
	<typedef path="format.swf.MorphShapeData2" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<useScalingStrokes><e path="Bool"/></useScalingStrokes>
	<useNonScalingStrokes><e path="Bool"/></useNonScalingStrokes>
	<startEdges><t path="format.swf.ShapeWithoutStyleData"/></startEdges>
	<startEdgeBounds><t path="format.swf.Rect"/></startEdgeBounds>
	<startBounds><t path="format.swf.Rect"/></startBounds>
	<lineStyles><c path="Array"><e path="format.swf.Morph2LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.MorphFillStyle"/></c></fillStyles>
	<endEdges><t path="format.swf.ShapeWithoutStyleData"/></endEdges>
	<endEdgeBounds><t path="format.swf.Rect"/></endEdgeBounds>
	<endBounds><t path="format.swf.Rect"/></endBounds>
</a></typedef>
	<enum path="format.swf.MorphFillStyle" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<MFSSolid a="startColor:endColor">
			<t path="format.swf.RGBA"/>
			<t path="format.swf.RGBA"/>
		</MFSSolid>
		<MFSRadialGradient a="startMatrix:endMatrix:gradients">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Matrix"/>
			<c path="Array"><t path="format.swf.MorphGradient"/></c>
		</MFSRadialGradient>
		<MFSLinearGradient a="startMatrix:endMatrix:gradients">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Matrix"/>
			<c path="Array"><t path="format.swf.MorphGradient"/></c>
		</MFSLinearGradient>
		<MFSBitmap a="cid:startMatrix:endMatrix:repeat:smooth">
			<c path="Int"/>
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Matrix"/>
			<e path="Bool"/>
			<e path="Bool"/>
		</MFSBitmap>
	</enum>
	<typedef path="format.swf.Morph1LineStyle" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<startWidth><c path="Int"/></startWidth>
	<startColor><t path="format.swf.RGBA"/></startColor>
	<endWidth><c path="Int"/></endWidth>
	<endColor><t path="format.swf.RGBA"/></endColor>
</a></typedef>
	<enum path="format.swf.Morph2LineStyle" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<M2LSNoFill a="startColor:endColor:data">
			<t path="format.swf.RGBA"/>
			<t path="format.swf.RGBA"/>
			<t path="format.swf.Morph2LineStyleData"/>
		</M2LSNoFill>
		<M2LSFill a="fill:data">
			<e path="format.swf.MorphFillStyle"/>
			<t path="format.swf.Morph2LineStyleData"/>
		</M2LSFill>
	</enum>
	<typedef path="format.swf.Morph2LineStyleData" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<startWidth><c path="Int"/></startWidth>
	<startCapStyle><e path="format.swf.LineCapStyle"/></startCapStyle>
	<pixelHinting><e path="Bool"/></pixelHinting>
	<noVScale><e path="Bool"/></noVScale>
	<noHScale><e path="Bool"/></noHScale>
	<noClose><e path="Bool"/></noClose>
	<joinStyle><e path="format.swf.LineJoinStyle"/></joinStyle>
	<endWidth><c path="Int"/></endWidth>
	<endCapStyle><e path="format.swf.LineCapStyle"/></endCapStyle>
</a></typedef>
	<typedef path="format.swf.MorphGradient" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<startRatio><c path="Int"/></startRatio>
	<startColor><t path="format.swf.RGBA"/></startColor>
	<endRatio><c path="Int"/></endRatio>
	<endColor><t path="format.swf.RGBA"/></endColor>
</a></typedef>
	<typedef path="format.swf.Shape4Data" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<useWinding><e path="Bool"/></useWinding>
	<useScalingStroke><e path="Bool"/></useScalingStroke>
	<useNonScalingStroke><e path="Bool"/></useNonScalingStroke>
	<shapes><t path="format.swf.ShapeWithStyleData"/></shapes>
	<shapeBounds><t path="format.swf.Rect"/></shapeBounds>
	<edgeBounds><t path="format.swf.Rect"/></edgeBounds>
</a></typedef>
	<typedef path="format.swf.ShapeWithoutStyleData" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a><shapeRecords><c path="Array"><e path="format.swf.ShapeRecord"/></c></shapeRecords></a></typedef>
	<typedef path="format.swf.ShapeWithStyleData" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<shapeRecords><c path="Array"><e path="format.swf.ShapeRecord"/></c></shapeRecords>
	<lineStyles><c path="Array"><t path="format.swf.LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.FillStyle"/></c></fillStyles>
</a></typedef>
	<enum path="format.swf.ShapeRecord" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<SHREnd/>
		<SHREdge a="dx:dy">
			<c path="Int"/>
			<c path="Int"/>
		</SHREdge>
		<SHRCurvedEdge a="cdx:cdy:adx:ady">
			<c path="Int"/>
			<c path="Int"/>
			<c path="Int"/>
			<c path="Int"/>
		</SHRCurvedEdge>
		<SHRChange a="data"><t path="format.swf.ShapeChangeRec"/></SHRChange>
	</enum>
	<typedef path="format.swf.ShapeChangeRec" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<newStyles><t path="Null"><t path="format.swf.SCRNewStyles"/></t></newStyles>
	<moveTo><t path="Null"><t path="format.swf.SCRMoveTo"/></t></moveTo>
	<lineStyle><t path="Null"><t path="format.swf.SCRIndex"/></t></lineStyle>
	<fillStyle1><t path="Null"><t path="format.swf.SCRIndex"/></t></fillStyle1>
	<fillStyle0><t path="Null"><t path="format.swf.SCRIndex"/></t></fillStyle0>
</a></typedef>
	<typedef path="format.swf.SCRMoveTo" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<dy><c path="Int"/></dy>
	<dx><c path="Int"/></dx>
</a></typedef>
	<typedef path="format.swf.SCRIndex" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a><idx><c path="Int"/></idx></a></typedef>
	<typedef path="format.swf.SCRNewStyles" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<lineStyles><c path="Array"><t path="format.swf.LineStyle"/></c></lineStyles>
	<fillStyles><c path="Array"><e path="format.swf.FillStyle"/></c></fillStyles>
</a></typedef>
	<enum path="format.swf.FillStyle" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<FSSolidAlpha a="rgb"><t path="format.swf.RGBA"/></FSSolidAlpha>
		<FSSolid a="rgb"><t path="format.swf.RGB"/></FSSolid>
		<FSRadialGradient a="mat:grad">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Gradient"/>
		</FSRadialGradient>
		<FSLinearGradient a="mat:grad">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.Gradient"/>
		</FSLinearGradient>
		<FSFocalGradient a="mat:grad">
			<t path="format.swf.Matrix"/>
			<t path="format.swf.FocalGradient"/>
		</FSFocalGradient>
		<FSBitmap a="cid:mat:repeat:smooth">
			<c path="Int"/>
			<t path="format.swf.Matrix"/>
			<e path="Bool"/>
			<e path="Bool"/>
		</FSBitmap>
	</enum>
	<typedef path="format.swf.LineStyle" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<width><c path="Int"/></width>
	<data><e path="format.swf.LineStyleData"/></data>
</a></typedef>
	<enum path="format.swf.LineStyleData" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<LSRGBA a="rgba"><t path="format.swf.RGBA"/></LSRGBA>
		<LSRGB a="rgb"><t path="format.swf.RGB"/></LSRGB>
		<LS2 a="data"><t path="format.swf.LS2Data"/></LS2>
	</enum>
	<typedef path="format.swf.LS2Data" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<startCap><e path="format.swf.LineCapStyle"/></startCap>
	<pixelHinting><e path="Bool"/></pixelHinting>
	<noVScale><e path="Bool"/></noVScale>
	<noHScale><e path="Bool"/></noHScale>
	<noClose><e path="Bool"/></noClose>
	<join><e path="format.swf.LineJoinStyle"/></join>
	<fill><t path="Null"><e path="format.swf.LS2Fill"/></t></fill>
	<endCap><e path="format.swf.LineCapStyle"/></endCap>
</a></typedef>
	<enum path="format.swf.LineCapStyle" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<LCSquare/>
		<LCRound/>
		<LCNone/>
	</enum>
	<enum path="format.swf.LineJoinStyle" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<LJRound/>
		<LJMiter a="limitFactor"><t path="format.swf.Fixed8"/></LJMiter>
		<LJBevel/>
	</enum>
	<enum path="format.swf.LS2Fill" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<LS2FStyle a="style"><e path="format.swf.FillStyle"/></LS2FStyle>
		<LS2FColor a="color"><t path="format.swf.RGBA"/></LS2FColor>
	</enum>
	<enum path="format.swf.GradRecord" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<GRRGBA a="pos:col">
			<c path="Int"/>
			<t path="format.swf.RGBA"/>
		</GRRGBA>
		<GRRGB a="pos:col">
			<c path="Int"/>
			<t path="format.swf.RGB"/>
		</GRRGB>
	</enum>
	<typedef path="format.swf.Gradient" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<spread><e path="format.swf.SpreadMode"/></spread>
	<interpolate><e path="format.swf.InterpolationMode"/></interpolate>
	<data><c path="Array"><e path="format.swf.GradRecord"/></c></data>
</a></typedef>
	<typedef path="format.swf.FocalGradient" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<focalPoint><t path="format.swf.Fixed8"/></focalPoint>
	<data><t path="format.swf.Gradient"/></data>
</a></typedef>
	<enum path="format.swf.SpreadMode" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<SMReserved/>
		<SMRepeat/>
		<SMReflect/>
		<SMPad/>
	</enum>
	<enum path="format.swf.InterpolationMode" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<IMReserved2/>
		<IMReserved1/>
		<IMNormalRGB/>
		<IMLinearRGB/>
	</enum>
	<typedef path="format.swf.MatrixPart" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<y><c path="Int"/></y>
	<x><c path="Int"/></x>
	<nbits><c path="Int"/></nbits>
</a></typedef>
	<typedef path="format.swf.MatrixPartScale" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
</a></typedef>
	<typedef path="format.swf.MatrixPartRotateSkew" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<rs1><c path="Float"/></rs1>
	<rs0><c path="Float"/></rs0>
</a></typedef>
	<typedef path="format.swf.MatrixPartTranslate" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<y><c path="Int"/></y>
	<x><c path="Int"/></x>
</a></typedef>
	<typedef path="format.swf.Matrix" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<translate><t path="format.swf.MatrixPartTranslate"/></translate>
	<scale><t path="Null"><t path="format.swf.MatrixPartScale"/></t></scale>
	<rotate><t path="Null"><t path="format.swf.MatrixPartRotateSkew"/></t></rotate>
</a></typedef>
	<typedef path="format.swf.RGBA" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<r><c path="Int"/></r>
	<g><c path="Int"/></g>
	<b><c path="Int"/></b>
	<a><c path="Int"/></a>
</a></typedef>
	<typedef path="format.swf.RGB" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<r><c path="Int"/></r>
	<g><c path="Int"/></g>
	<b><c path="Int"/></b>
</a></typedef>
	<typedef path="format.swf.CXA" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<nbits><c path="Int"/></nbits>
	<mult><t path="Null"><t path="format.swf.RGBA"/></t></mult>
	<add><t path="Null"><t path="format.swf.RGBA"/></t></add>
</a></typedef>
	<typedef path="format.swf.ClipEvent" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<eventsFlags><c path="Int"/></eventsFlags>
	<data><c path="haxe.io.Bytes"/></data>
</a></typedef>
	<enum path="format.swf.BlendMode" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<BSubtract/>
		<BScreen/>
		<BOverlay/>
		<BNormal/>
		<BMultiply/>
		<BLighten/>
		<BLayer/>
		<BInvert/>
		<BHardLight/>
		<BErase/>
		<BDifference/>
		<BDarken/>
		<BAlpha/>
		<BAdd/>
	</enum>
	<enum path="format.swf.Filter" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<FGradientGlow a="data"><t path="format.swf.GradientFilterData"/></FGradientGlow>
		<FGradientBevel a="data"><t path="format.swf.GradientFilterData"/></FGradientBevel>
		<FGlow a="data"><t path="format.swf.FilterData"/></FGlow>
		<FDropShadow a="data"><t path="format.swf.FilterData"/></FDropShadow>
		<FColorMatrix a="data"><c path="Array"><c path="Float"/></c></FColorMatrix>
		<FBlur a="data"><t path="format.swf.BlurFilterData"/></FBlur>
		<FBevel a="data"><t path="format.swf.FilterData"/></FBevel>
	</enum>
	<typedef path="format.swf.FilterFlags" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<passes><c path="Int"/></passes>
	<ontop><e path="Bool"/></ontop>
	<knockout><e path="Bool"/></knockout>
	<inner><e path="Bool"/></inner>
</a></typedef>
	<typedef path="format.swf.FilterData" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<strength><t path="format.swf.Fixed8"/></strength>
	<flags><t path="format.swf.FilterFlags"/></flags>
	<distance><t path="format.swf.Fixed"/></distance>
	<color2><t path="format.swf.RGBA"/></color2>
	<color><t path="format.swf.RGBA"/></color>
	<blurY><t path="format.swf.Fixed"/></blurY>
	<blurX><t path="format.swf.Fixed"/></blurX>
	<angle><t path="format.swf.Fixed"/></angle>
</a></typedef>
	<typedef path="format.swf.BlurFilterData" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<passes><c path="Int"/></passes>
	<blurY><t path="format.swf.Fixed"/></blurY>
	<blurX><t path="format.swf.Fixed"/></blurX>
</a></typedef>
	<typedef path="format.swf.GradientFilterData" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<data><t path="format.swf.FilterData"/></data>
	<colors><c path="Array"><a>
	<position><c path="Int"/></position>
	<color><t path="format.swf.RGBA"/></color>
</a></c></colors>
</a></typedef>
	<typedef path="format.swf.Lossless" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<width><c path="Int"/></width>
	<height><c path="Int"/></height>
	<data><c path="haxe.io.Bytes"/></data>
	<color><e path="format.swf.ColorModel"/></color>
	<cid><c path="Int"/></cid>
</a></typedef>
	<enum path="format.swf.JPEGData" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<JDJPEG3 a="data:mask">
			<c path="haxe.io.Bytes"/>
			<c path="haxe.io.Bytes"/>
		</JDJPEG3>
		<JDJPEG2 a="data"><c path="haxe.io.Bytes"/></JDJPEG2>
		<JDJPEG1 a="data"><c path="haxe.io.Bytes"/></JDJPEG1>
	</enum>
	<enum path="format.swf.ColorModel" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<CM8Bits a="ncolors"><c path="Int"/></CM8Bits>
		<CM32Bits/>
		<CM24Bits/>
		<CM15Bits/>
	</enum>
	<typedef path="format.swf.VideoInfo" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<width><c path="Int"/></width>
	<smoothing><e path="Bool"/></smoothing>
	<numFrames><c path="Int"/></numFrames>
	<height><c path="Int"/></height>
	<deblocking><e path="Bool"/></deblocking>
	<codecId><c path="Int"/></codecId>
</a></typedef>
	<enum path="format.swf.VideoData" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<VP6SWFvideoPacket/>
		<VP6SWFALPHAvideoPacket/>
		<SCREENvideoPacket/>
		<SCREENV2videoPacket/>
		<H263videoPacket/>
	</enum>
	<typedef path="format.swf.Sound" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<sid><c path="Int"/></sid>
	<samples><c path="haxe.Int32"/></samples>
	<rate><e path="format.swf.SoundRate"/></rate>
	<isStereo><e path="Bool"/></isStereo>
	<is16bit><e path="Bool"/></is16bit>
	<format><e path="format.swf.SoundFormat"/></format>
	<data><e path="format.swf.SoundData"/></data>
</a></typedef>
	<typedef path="format.swf.SoundStreamHead2" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<streamSoundType><e path="Bool"/></streamSoundType>
	<streamSoundSampleCount><c path="Int"/></streamSoundSampleCount>
	<streamSoundRate><c path="Int"/></streamSoundRate>
	<streamSoundCompression><c path="Int"/></streamSoundCompression>
	<playbackSoundType><e path="Bool"/></playbackSoundType>
	<playbackSoundRate><c path="Int"/></playbackSoundRate>
	<latencySeek><t path="Null"><c path="Int"/></t></latencySeek>
</a></typedef>
	<enum path="format.swf.SoundData" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<SDRaw a="data"><c path="haxe.io.Bytes"/></SDRaw>
		<SDOther a="data"><c path="haxe.io.Bytes"/></SDOther>
		<SDMp3 a="seek:data">
			<c path="Int"/>
			<c path="haxe.io.Bytes"/>
		</SDMp3>
	</enum>
	<enum path="format.swf.SoundFormat" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<SFSpeex/>
		<SFNellymoser8k/>
		<SFNellymoser16k/>
		<SFNellymoser/>
		<SFNativeEndianUncompressed/>
		<SFMP3/>
		<SFLittleEndianUncompressed/>
		<SFADPCM/>
	</enum>
	<enum path="format.swf.SoundRate" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<SR5k/>
		<SR44k/>
		<SR22k/>
		<SR11k/>
		<haxe_doc>
 * Sound sampling rate.
 *
 * - 5k is not allowed for MP3
 * - Nellymoser and Speex ignore this option
 </haxe_doc>
	</enum>
	<enum path="format.swf.FontData" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<FDFont4 a="data"><t path="format.swf.Font4Data"/></FDFont4>
		<FDFont3 a="data"><t path="format.swf.Font2Data"/></FDFont3>
		<FDFont2 a="hasWideChars:data">
			<e path="Bool"/>
			<t path="format.swf.Font2Data"/>
		</FDFont2>
		<FDFont1 a="data"><t path="format.swf.Font1Data"/></FDFont1>
	</enum>
	<enum path="format.swf.FontInfoData" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<FIDFont2 a="language:data">
			<e path="format.swf.LangCode"/>
			<t path="format.swf.FIData"/>
		</FIDFont2>
		<FIDFont1 a="shiftJIS:isANSI:hasWideCodes:data">
			<e path="Bool"/>
			<e path="Bool"/>
			<e path="Bool"/>
			<t path="format.swf.FIData"/>
		</FIDFont1>
	</enum>
	<typedef path="format.swf.FIData" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<name><c path="String"/></name>
	<isSmall><e path="Bool"/></isSmall>
	<isItalic><e path="Bool"/></isItalic>
	<isBold><e path="Bool"/></isBold>
	<codeTable><c path="Array"><c path="Int"/></c></codeTable>
</a></typedef>
	<enum path="format.swf.LangCode" params="" file="src/format/swf/Data.hx" module="format.swf.Data">
		<LCTraditionalChinese/>
		<LCSimplifiedChinese/>
		<LCNone/>
		<LCLatin/>
		<LCKorean/>
		<LCJapanese/>
	</enum>
	<typedef path="format.swf.Font1Data" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a><glyphs><c path="Array"><t path="format.swf.ShapeWithoutStyleData"/></c></glyphs></a></typedef>
	<typedef path="format.swf.Font2GlyphData" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<shape><t path="format.swf.ShapeWithoutStyleData"/></shape>
	<charCode><c path="Int"/></charCode>
</a></typedef>
	<typedef path="format.swf.Font2Data" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<shiftJIS><e path="Bool"/></shiftJIS>
	<name><c path="String"/></name>
	<layout><t path="Null"><t path="format.swf.FontLayoutData"/></t></layout>
	<language><e path="format.swf.LangCode"/></language>
	<isSmall><e path="Bool"/></isSmall>
	<isItalic><e path="Bool"/></isItalic>
	<isBold><e path="Bool"/></isBold>
	<isANSI><e path="Bool"/></isANSI>
	<glyphs><c path="Array"><t path="format.swf.Font2GlyphData"/></c></glyphs>
</a></typedef>
	<typedef path="format.swf.Font4Data" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<name><c path="String"/></name>
	<isItalic><e path="Bool"/></isItalic>
	<isBold><e path="Bool"/></isBold>
	<hasSFNT><e path="Bool"/></hasSFNT>
	<bytes><c path="haxe.io.Bytes"/></bytes>
</a></typedef>
	<typedef path="format.swf.FontKerningData" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<charCode2><c path="Int"/></charCode2>
	<charCode1><c path="Int"/></charCode1>
	<adjust><c path="Int"/></adjust>
</a></typedef>
	<typedef path="format.swf.FontLayoutGlyphData" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<bounds><t path="format.swf.Rect"/></bounds>
	<advance><c path="Int"/></advance>
</a></typedef>
	<typedef path="format.swf.FontLayoutData" params="" file="src/format/swf/Data.hx" module="format.swf.Data"><a>
	<leading><c path="Int"/></leading>
	<kerning><c path="Array"><t path="format.swf.FontKerningData"/></c></kerning>
	<glyphs><c path="Array"><t path="format.swf.FontLayoutGlyphData"/></c></glyphs>
	<descent><c path="Int"/></descent>
	<ascent><c path="Int"/></ascent>
</a></typedef>
	<class path="be.haxer.hxswfml.SwcWriter" params="" file="src/be/haxer/hxswfml/SwcWriter.hx">
		<swc><c path="haxe.io.Bytes"/></swc>
		<write public="1" set="method" line="14"><f a="classes:library">
	<c path="Array"><c path="Array"><c path="String"/></c></c>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></write>
		<getSWC public="1" set="method" line="55"><f a=""><c path="haxe.io.Bytes"/></f></getSWC>
		<createXML set="method" line="59"><f a="mod:classes">
	<c path="Float"/>
	<c path="Array"><c path="Array"><c path="String"/></c></c>
	<c path="String"/>
</f></createXML>
		<new public="1" set="method" line="11"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Jan J. Flanders
 </haxe_doc>
	</class>
	<class path="List" params="T" file="C:\Program Files\Motion-Twin\haxe/std/List.hx">
		<h><c path="Array"><d/></c></h>
		<q><c path="Array"><d/></c></q>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The number of elements in this list.
	</haxe_doc>
		</length>
		<add public="1" set="method" line="51">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Add an element at the end of the list.
	</haxe_doc>
		</add>
		<push public="1" set="method" line="64">
			<f a="item">
				<c path="List.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Push an element at the beginning of the list.
	</haxe_doc>
		</push>
		<first public="1" set="method" line="80">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Returns the first element of the list, or null
		if the list is empty.
	</haxe_doc>
		</first>
		<last public="1" set="method" line="88">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Returns the last element of the list, or null
		if the list is empty.
	</haxe_doc>
		</last>
		<pop public="1" set="method" line="98">
			<f a=""><c path="List.T"/></f>
			<haxe_doc>
		Removes the first element of the list and
		returns it or simply returns null if the
		list is empty.
	</haxe_doc>
		</pop>
		<isEmpty public="1" set="method" line="112">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Tells if a list is empty.
	</haxe_doc>
		</isEmpty>
		<clear public="1" set="method" line="119">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Makes the list empty.
	</haxe_doc>
		</clear>
		<remove public="1" set="method" line="129">
			<f a="v">
				<c path="List.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Remove the first element that is [== v] from the list.
		Returns [true] if an element was removed, [false] otherwise.
	</haxe_doc>
		</remove>
		<iterator public="1" set="method" line="152">
			<f a=""><t path="Iterator"><c path="List.T"/></t></f>
			<haxe_doc>
		Returns an iterator on the elements of the list.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method" line="173">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the String.
	</haxe_doc>
		</toString>
		<join public="1" set="method" line="193">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Join the element of the list by using the separator [sep].
	</haxe_doc>
		</join>
		<filter public="1" set="method" line="212">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<e path="Bool"/>
				</f>
				<c path="List"><c path="List.T"/></c>
			</f>
			<haxe_doc>
		Returns a list filtered with [f]. The returned list
		will contain all elements [x] for which [f(x) = true].
	</haxe_doc>
		</filter>
		<map public="1" params="X" set="method" line="228">
			<f a="f">
				<f a="">
					<c path="List.T"/>
					<c path="map.X"/>
				</f>
				<c path="List"><c path="map.X"/></c>
			</f>
			<haxe_doc>
		Returns a new list where all elements have been converted
		by the function [f].
	</haxe_doc>
		</map>
		<new public="1" set="method" line="44">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty list.
	</haxe_doc>
		</new>
		<haxe_doc>
	A linked-list of elements. The list is composed of two-elements arrays
	that are chained together. It's optimized so that adding or removing an
	element doesn't imply to copy the whole array content everytime.
</haxe_doc>
	</class>
	<enum path="Void" params="" file="C:\Program Files\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes"><haxe_doc>
	The standard Void type. Only [null] values can be of the type [Void].
</haxe_doc></enum>
	<class path="Float" params="" file="C:\Program Files\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	The standard Float type, this is a double-precision IEEE 64bit float.
</haxe_doc></class>
	<class path="Int" params="" file="C:\Program Files\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>
	The standard Int type. Its precision depends on the platform.
</haxe_doc>
	</class>
	<typedef path="Null" params="T" file="C:\Program Files\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>
	[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.
</haxe_doc>
	</typedef>
	<enum path="Bool" params="" file="C:\Program Files\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>
	The standard Boolean type is represented as an enum with two choices.
</haxe_doc>
	</enum>
	<class path="Dynamic" params="T" file="C:\Program Files\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>
	Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.
</haxe_doc></class>
	<typedef path="Iterator" params="T" file="C:\Program Files\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>
	An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.
</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="C:\Program Files\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>
	An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.
</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="C:\Program Files\Motion-Twin\haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>
	ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.
</haxe_doc></class>
	<class path="haxe.Serializer" params="" file="C:\Program Files\Motion-Twin\haxe/std/haxe/Serializer.hx">
		<USE_CACHE public="1" line="34" static="1">
			<e path="Bool"/>
			<haxe_doc>
		If the values you are serializing can contain
		circular references or objects repetitions, you should
		set USE_CACHE to true to prevent infinite loops.
	</haxe_doc>
		</USE_CACHE>
		<USE_ENUM_INDEX public="1" line="40" static="1">
			<e path="Bool"/>
			<haxe_doc>
		Use constructor indexes for enums instead of names.
		This is less reliable but more compact.
	</haxe_doc>
		</USE_ENUM_INDEX>
		<BASE64 line="42" static="1"><c path="String"/></BASE64>
		<run public="1" set="method" line="416" static="1">
			<f a="v">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Serialize a single value and return the string.
	</haxe_doc>
		</run>
		<buf><c path="StringBuf"/></buf>
		<cache><c path="Array"><d/></c></cache>
		<shash><c path="Hash"><c path="Int"/></c></shash>
		<scount><c path="Int"/></scount>
		<useCache public="1"><e path="Bool"/></useCache>
		<useEnumIndex public="1"><e path="Bool"/></useEnumIndex>
		<toString public="1" set="method" line="60"><f a=""><c path="String"/></f></toString>
		<serializeString set="method" line="94"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></serializeString>
		<serializeRef set="method" line="113"><f a="v">
	<unknown/>
	<e path="Bool"/>
</f></serializeRef>
		<serializeFields set="method" line="150"><f a="v">
	<unknown/>
	<e path="Void"/>
</f></serializeFields>
		<serialize public="1" set="method" line="158"><f a="v">
	<d/>
	<e path="Void"/>
</f></serialize>
		<serializeException public="1" set="method" line="397"><f a="e">
	<d/>
	<e path="Void"/>
</f></serializeException>
		<new public="1" set="method" line="51"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="format.abc.OpReader" params="" file="src/format/abc/OpReader.hx">
		<bytePos line="534" static="1"><c path="Int"/></bytePos>
		<jumps static="1"><c path="Array"><c path="Array"><c path="String"/></c></c></jumps>
		<switches static="1"><c path="Array"><c path="Array"><c path="String"/></c></c></switches>
		<jumpNameIndex static="1"><c path="Int"/></jumpNameIndex>
		<caseNameIndex static="1"><c path="Int"/></caseNameIndex>
		<labels static="1"><c path="Array"><c path="String"/></c></labels>
		<labelNameIndex static="1"><c path="Int"/></labelNameIndex>
		<ops static="1"><c path="Array"><e path="format.abc.OpCode"/></c></ops>
		<positions public="1" line="542" static="1"><c path="Array"><c path="Int"/></c></positions>
		<decode public="1" set="method" line="543" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="Array"><e path="format.abc.OpCode"/></c>
</f></decode>
		<i public="1"><c path="haxe.io.Input"/></i>
		<readInt public="1" set="method" line="40"><f a=""><c path="Int"/></f></readInt>
		<readIndex params="T" get="inline" set="null" line="63"><f a=""><e path="format.abc.Index"><c path="readIndex.T"/></e></f></readIndex>
		<readInt32 public="1" set="method" line="67"><f a=""><c path="haxe.Int32"/></f></readInt32>
		<reg get="inline" set="null" line="91"><f a=""><c path="Int"/></f></reg>
		<jmp set="method" line="96"><f a="j">
	<e path="format.abc.JumpStyle"/>
	<e path="format.abc.OpCode"/>
</f></jmp>
		<readOp public="1" set="method" line="118"><f a="op">
	<c path="Int"/>
	<e path="format.abc.OpCode"/>
</f></readOp>
		<new public="1" set="method" line="36"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="be.haxer.hxswfml.SwfWriter" params="" file="src/be/haxer/hxswfml/SwfWriter.hx">
		<main public="1" set="method" line="39" static="1"><f a=""><e path="Void"/></f></main>
		<swf><t path="format.swf.SWF"/></swf>
		<swfBytes><c path="haxe.io.Bytes"/></swfBytes>
		<validElements><c path="Hash"><c path="Array"><c path="String"/></c></c></validElements>
		<validChildren><c path="Hash"><c path="Array"><c path="String"/></c></c></validChildren>
		<validBaseClasses><c path="Array"><c path="String"/></c></validBaseClasses>
		<bitmapIds><c path="Array"><c path="Array"><c path="Int"/></c></c></bitmapIds>
		<dictionary><c path="Array"><c path="String"/></c></dictionary>
		<swcClasses><c path="Array"><c path="Array"><c path="String"/></c></c></swcClasses>
		<currentTag><c path="Xml"/></currentTag>
		<tagIndex><c path="Int"/></tagIndex>
		<strict><e path="Bool"/></strict>
		<library public="1"><c path="Hash"><d/></c></library>
		<write public="1" set="method" line="52"><f a="input:?strict">
	<c path="String"/>
	<e path="Bool"/>
	<c path="haxe.io.Bytes"/>
</f></write>
		<getSWF public="1" set="method" line="84"><f a=""><c path="haxe.io.Bytes"/></f></getSWF>
		<getSWC public="1" set="method" line="88"><f a=""><c path="haxe.io.Bytes"/></f></getSWC>
		<getTags public="1" set="method" line="92"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></getTags>
		<init set="method" line="96"><f a=""><e path="Void"/></f></init>
		<header set="method" line="163"><f a=""><t path="format.swf.SWFHeader"/></f></header>
		<fileattributes set="method" line="177"><f a=""><e path="format.swf.SWFTag"/></f></fileattributes>
		<setbackgroundcolor set="method" line="191"><f a=""><e path="format.swf.SWFTag"/></f></setbackgroundcolor>
		<scriptlimits set="method" line="195"><f a=""><e path="format.swf.SWFTag"/></f></scriptlimits>
		<metadata set="method" line="201"><f a=""><e path="format.swf.SWFTag"/></f></metadata>
		<definebitsjpeg set="method" line="209"><f a=""><e path="format.swf.SWFTag"/></f></definebitsjpeg>
		<defineshape set="method" line="219"><f a=""><e path="format.swf.SWFTag"/></f></defineshape>
		<definesprite set="method" line="411"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></definesprite>
		<definebutton set="method" line="454"><f a=""><e path="format.swf.SWFTag"/></f></definebutton>
		<definesound set="method" line="492"><f a=""><e path="format.swf.SWFTag"/></f></definesound>
		<definebinarydata set="method" line="506"><f a=""><e path="format.swf.SWFTag"/></f></definebinarydata>
		<definefont set="method" line="513"><f a=""><e path="format.swf.SWFTag"/></f></definefont>
		<defineedittext set="method" line="564"><f a=""><e path="format.swf.SWFTag"/></f></defineedittext>
		<defineabc set="method" line="616"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></defineabc>
		<definescalinggrid set="method" line="680"><f a=""><e path="format.swf.SWFTag"/></f></definescalinggrid>
		<placeobject set="method" line="692"><f a=""><e path="format.swf.SWFTag"/></f></placeobject>
		<readBlur set="method" line="756"><f a=""><t path="format.swf.BlurFilterData"/></f></readBlur>
		<readGlow set="method" line="763"><f a=""><t path="format.swf.FilterData"/></f></readGlow>
		<readBevel set="method" line="775"><f a=""><t path="format.swf.FilterData"/></f></readBevel>
		<readDropShadow set="method" line="787"><f a=""><t path="format.swf.FilterData"/></f></readDropShadow>
		<readGradientGlow set="method" line="800"><f a=""><t path="format.swf.GradientFilterData"/></f></readGradientGlow>
		<readGradientBevel set="method" line="814"><f a=""><t path="format.swf.GradientFilterData"/></f></readGradientBevel>
		<readColorMatrix set="method" line="828"><f a=""><c path="Array"><c path="Float"/></c></f></readColorMatrix>
		<readFilterFlags set="method" line="836"><f a="?b1:?b2:?b3:?v">
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<a>
		<passes><t path="Null"><c path="Int"/></t></passes>
		<ontop><t path="Null"><e path="Bool"/></t></ontop>
		<knockout><t path="Null"><e path="Bool"/></t></knockout>
		<inner><t path="Null"><e path="Bool"/></t></inner>
	</a>
</f></readFilterFlags>
		<readFilterColors set="method" line="844"><f a="?v">
	<c path="String"/>
	<c path="Array"><d/></c>
</f></readFilterColors>
		<moveObject set="method" line="856"><f a="depth:x:y:scaleX:scaleY:rs0:rs1">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<t path="Null"><c path="Float"/></t>
	<t path="Null"><c path="Float"/></t>
	<t path="Null"><c path="Float"/></t>
	<t path="Null"><c path="Float"/></t>
	<e path="format.swf.SWFTag"/>
</f></moveObject>
		<tween set="method" line="900"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></tween>
		<removeobject set="method" line="984"><f a=""><e path="format.swf.SWFTag"/></f></removeobject>
		<startsound set="method" line="989"><f a=""><e path="format.swf.SWFTag"/></f></startsound>
		<importassets set="method" line="997"><f a=""><e path="format.swf.SWFTag"/></f></importassets>
		<symbolclass set="method" line="1002"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></symbolclass>
		<exportassets set="method" line="1027"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></exportassets>
		<framelabel set="method" line="1036"><f a=""><e path="format.swf.SWFTag"/></f></framelabel>
		<showframe set="method" line="1042"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></showframe>
		<endframe set="method" line="1053"><f a=""><e path="format.swf.SWFTag"/></f></endframe>
		<custom set="method" line="1057"><f a=""><e path="format.swf.SWFTag"/></f></custom>
		<getContent set="method" line="1081"><f a="file">
	<c path="String"/>
	<c path="String"/>
</f></getContent>
		<getBytes set="method" line="1098"><f a="file">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></getBytes>
		<getInt set="method" line="1116"><f a="att:defaultValue:?required:?uniqueId:?targetId">
	<c path="String"/>
	<t path="Null"><c path="Int"/></t>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="Null"><c path="Int"/></t>
</f></getInt>
		<getBool set="method" line="1130"><f a="att:defaultValue:?required">
	<c path="String"/>
	<t path="Null"><e path="Bool"/></t>
	<e path="Bool"/>
	<t path="Null"><e path="Bool"/></t>
</f></getBool>
		<getFloat set="method" line="1137"><f a="att:defaultValue:?required">
	<c path="String"/>
	<t path="Null"><c path="Float"/></t>
	<e path="Bool"/>
	<t path="Null"><c path="Float"/></t>
</f></getFloat>
		<getString set="method" line="1147"><f a="att:defaultValue:?required">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
	<c path="String"/>
</f></getString>
		<getMatrix set="method" line="1154"><f a=""><t path="format.swf.Matrix"/></f></getMatrix>
		<parseInt32 set="method" line="1171"><f a="s">
	<c path="String"/>
	<c path="haxe.Int32"/>
</f></parseInt32>
		<checkDictionary set="method" line="1180"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></checkDictionary>
		<checkTargetId set="method" line="1195"><f a="id">
	<c path="Int"/>
	<e path="Void"/>
</f></checkTargetId>
		<checkFileExistence set="method" line="1240"><f a="file">
	<c path="String"/>
	<e path="Void"/>
</f></checkFileExistence>
		<setCurrentElement set="method" line="1260"><f a="tag">
	<c path="Xml"/>
	<e path="Void"/>
</f></setCurrentElement>
		<isValidAttribute set="method" line="1274"><f a="a">
	<c path="String"/>
	<e path="Bool"/>
</f></isValidAttribute>
		<isValidBaseClass set="method" line="1284"><f a="c">
	<c path="String"/>
	<e path="Bool"/>
</f></isValidBaseClass>
		<toRGB set="method" line="1293"><f a="i">
	<c path="Int"/>
	<t path="format.swf.RGB"/>
</f></toRGB>
		<toRGBA set="method" line="1301"><f a="c">
	<c path="String"/>
	<t path="format.swf.RGBA"/>
</f></toRGBA>
		<error set="method" line="1310"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></error>
		<new public="1" set="method" line="43"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
* 
* @author Jan J. Flanders
</haxe_doc>
	</class>
	<class path="format.mp3.Tools" params="" file="src/format/mp3/Tools.hx">
		<getBitrate public="1" set="method" line="40" static="1">
			<f a="mpegVersion:layerIdx:bitrateIdx">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="format.mp3.Bitrate"/>
			</f>
			<haxe_doc>
    * Returns kbps
    </haxe_doc>
		</getBitrate>
		<getSamplingRate public="1" set="method" line="50" static="1">
			<f a="mpegVersion:samplingRateIdx">
				<c path="Int"/>
				<c path="Int"/>
				<e path="format.mp3.SamplingRate"/>
			</f>
			<haxe_doc>
    * Returns Hz
    </haxe_doc>
		</getSamplingRate>
		<isInvalidFrameHeader public="1" set="method" line="57" static="1">
			<f a="hdr">
				<t path="format.mp3.MP3Header"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
    * Tells whether the header is invalid.
    </haxe_doc>
		</isInvalidFrameHeader>
		<getSampleDataSize public="1" set="method" line="74" static="1">
			<f a="mpegVersion:bitrate:samplingRate:isPadded:hasCrc">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
    * Return sample data size. Note that
    * the 4 bytes subtracted is the size of the header,
    * so this 4 bytes less the frame size.
    *
    * Also, 2 bytes are subtracted for CRC too, if present
    </haxe_doc>
		</getSampleDataSize>
		<getSampleDataSizeHdr public="1" set="method" line="78" static="1"><f a="hdr">
	<t path="format.mp3.MP3Header"/>
	<c path="Int"/>
</f></getSampleDataSizeHdr>
		<getSampleCount public="1" set="method" line="89" static="1">
			<f a="mpegVersion">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
    * Returns the number of samples in the frame.
    </haxe_doc>
		</getSampleCount>
		<getSampleCountHdr public="1" set="method" line="94" static="1"><f a="hdr">
	<t path="format.mp3.MP3Header"/>
	<c path="Int"/>
</f></getSampleCountHdr>
		<getFrameInfo public="1" set="method" line="102" static="1">
			<f a="fr">
				<t path="format.mp3.MP3Frame"/>
				<c path="String"/>
			</f>
			<haxe_doc>
    * Displays frame info in human-readable format.
    * Subject to change, do not use for programmatical parsing!
    </haxe_doc>
		</getFrameInfo>
	</class>
	<class path="format.zip.Reader" params="" file="src/format/zip/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<readZipDate set="method" line="40"><f a=""><c path="Date"/></f></readZipDate>
		<readExtraFields set="method" line="52"><f a="length">
	<c path="Int"/>
	<c path="List"><e path="format.zip.ExtraField"/></c>
</f></readExtraFields>
		<readEntryHeader public="1" set="method" line="80"><f a=""><t path="format.zip.Entry"/></f></readEntryHeader>
		<readEntryData public="1" set="method" line="121"><f a="e:buf:out">
	<t path="format.zip.Entry"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Output"/>
	<e path="Void"/>
</f></readEntryData>
		<read public="1" set="method" line="125"><f a=""><t path="format.zip.Data"/></f></read>
		<new public="1" set="method" line="36"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.io.Input" params="" file="C:\Program Files\Motion-Twin\haxe/std/haxe/io/Input.hx">
		<bigEndian public="1" set="setEndian"><e path="Bool"/></bigEndian>
		<readByte public="1" set="method" line="35"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="44"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<close public="1" set="method" line="65"><f a=""><e path="Void"/></f></close>
		<setEndian set="method" line="68"><f a="b">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setEndian>
		<readAll public="1" set="method" line="75"><f a="?bufsize">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></readAll>
		<readFullBytes public="1" set="method" line="96"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></readFullBytes>
		<read public="1" set="method" line="104"><f a="nbytes">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></read>
		<readUntil public="1" set="method" line="116"><f a="end">
	<c path="Int"/>
	<c path="String"/>
</f></readUntil>
		<readLine public="1" set="method" line="124"><f a=""><c path="String"/></f></readLine>
		<readFloat public="1" set="method" line="141"><f a=""><c path="Float"/></f></readFloat>
		<readDouble public="1" set="method" line="155"><f a=""><c path="Float"/></f></readDouble>
		<readInt8 public="1" set="method" line="169"><f a=""><c path="Int"/></f></readInt8>
		<readInt16 public="1" set="method" line="176"><f a=""><c path="Int"/></f></readInt16>
		<readUInt16 public="1" set="method" line="185"><f a=""><c path="Int"/></f></readUInt16>
		<readInt24 public="1" set="method" line="191"><f a=""><c path="Int"/></f></readInt24>
		<readUInt24 public="1" set="method" line="201"><f a=""><c path="Int"/></f></readUInt24>
		<readInt31 public="1" set="method" line="208"><f a=""><c path="Int"/></f></readInt31>
		<readUInt30 public="1" set="method" line="225"><f a=""><c path="Int"/></f></readUInt30>
		<readInt32 public="1" set="method" line="234"><f a=""><c path="haxe.Int32"/></f></readInt32>
		<readString public="1" set="method" line="249"><f a="len">
	<c path="Int"/>
	<c path="String"/>
</f></readString>
		<haxe_doc>
	An Input is an abstract reader. See other classes in the [haxe.io] package
	for several possible implementations.
</haxe_doc>
	</class>
	<class path="haxe.io.BytesInput" params="" file="C:\Program Files\Motion-Twin\haxe/std/haxe/io/BytesInput.hx">
		<extends path="haxe.io.Input"/>
		<b><t path="haxe.io.BytesData"/></b>
		<pos><c path="Int"/></pos>
		<len><c path="Int"/></len>
		<readByte public="1" set="method" line="56" override="1"><f a=""><c path="Int"/></f></readByte>
		<readBytes public="1" set="method" line="75" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></readBytes>
		<new public="1" set="method" line="35"><f a="b:?pos:?len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="be.haxer.hxswfml.HxmWriter" params="" file="src/be/haxer/hxswfml/HxmWriter.hx">
		<debugInfo public="1"><e path="Bool"/></debugInfo>
		<sourceInfo public="1"><e path="Bool"/></sourceInfo>
		<useFolders public="1"><e path="Bool"/></useFolders>
		<showBytePos public="1"><e path="Bool"/></showBytePos>
		<strict public="1"><e path="Bool"/></strict>
		<log public="1"><e path="Bool"/></log>
		<outputFolder public="1"><c path="String"/></outputFolder>
		<zip public="1"><c path="haxe.io.Bytes"/></zip>
		<ctx><c path="format.abc.Context"/></ctx>
		<className><c path="String"/></className>
		<functionClosureName><c path="String"/></functionClosureName>
		<curClassName><c path="String"/></curClassName>
		<curClass><t path="format.abc.ClassDef"/></curClass>
		<maxStack><c path="Int"/></maxStack>
		<maxScopeStack><c path="Int"/></maxScopeStack>
		<currentStack><c path="Int"/></currentStack>
		<currentScopeStack><c path="Int"/></currentScopeStack>
		<imports><c path="Hash"><c path="String"/></c></imports>
		<functionClosures><c path="Hash"><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></c></functionClosures>
		<inits><c path="Hash"><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></c></inits>
		<classDefs><c path="Hash"><e path="format.abc.Index"><t path="format.abc.ClassDef"/></e></c></classDefs>
		<jumps><c path="Hash"><f a=""><e path="Void"/></f></c></jumps>
		<switches><c path="Hash"><f a=""><e path="Void"/></f></c></switches>
		<labels><c path="Hash"><f a="">
	<t path="Null"><e path="format.abc.JumpStyle"/></t>
	<c path="Int"/>
</f></c></labels>
		<abcFile><c path="format.abc.ABCData"/></abcFile>
		<swfTags><c path="Array"><e path="format.swf.SWFTag"/></c></swfTags>
		<classNames><c path="Array"><c path="String"/></c></classNames>
		<swcClasses><c path="Array"><c path="Array"><c path="String"/></c></c></swcClasses>
		<buf><c path="StringBuf"/></buf>
		<localFunctions><c path="String"/></localFunctions>
		<debugLines><c path="Array"><c path="String"/></c></debugLines>
		<debugFile><c path="String"/></debugFile>
		<debugFileName><c path="String"/></debugFileName>
		<lastBytepos><c path="Int"/></lastBytepos>
		<opStack><c path="Array"><c path="String"/></c></opStack>
		<scStack><c path="Array"><c path="String"/></c></scStack>
		<packages><c path="Array"><c path="Array"><c path="String"/></c></c></packages>
		<write public="1" set="method" line="73"><f a="xml">
	<c path="String"/>
	<e path="Void"/>
</f></write>
		<getZIP public="1" set="method" line="97"><f a="initName">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></getZIP>
		<xml2abc set="method" line="355"><f a="xml">
	<c path="Xml"/>
	<e path="Void"/>
</f></xml2abc>
		<createFunction set="method" line="521"><f a="node:functionType:?isInterface">
	<c path="Xml"/>
	<c path="String"/>
	<e path="Bool"/>
	<t path="format.abc.Function"/>
</f></createFunction>
		<writeCodeBlock set="method" line="701"><f a="member:f">
	<c path="Xml"/>
	<a><trys set="null"><a>
	<push set="null"><f a="">
	<a>
		<variable><t path="format.abc.IName"/></variable>
		<type><t path="format.abc.IName"/></type>
		<start><t path="Null"><c path="Int"/></t></start>
		<handle><t path="Null"><c path="Int"/></t></handle>
		<end><t path="Null"><c path="Int"/></t></end>
	</a>
	<c path="Int"/>
</f></push>
	<length set="null"><c path="Int"/></length>
</a></trys></a>
	<e path="Void"/>
</f></writeCodeBlock>
		<getImport set="method" line="1022"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></getImport>
		<namespaceType set="method" line="1028"><f a="ns">
	<c path="String"/>
	<e path="format.abc.Index"><e path="format.abc.Namespace"/></e>
</f></namespaceType>
		<__namespaceType set="method" line="1043"><f a="ns">
	<c path="String"/>
	<c path="String"/>
</f></__namespaceType>
		<parseLocals set="method" line="1059"><f a="locals">
	<c path="String"/>
	<t path="Null"><c path="Array"><t path="format.abc.Field"/></c></t>
</f></parseLocals>
		<__parseLocals set="method" line="1079"><f a="locals">
	<c path="String"/>
	<t path="Null"><c path="Array"><c path="String"/></c></t>
</f></__parseLocals>
		<parseFieldKind set="method" line="1099"><f a="fld">
	<c path="String"/>
	<e path="format.abc.FieldKind"/>
</f></parseFieldKind>
		<nonEmptyStack set="method" line="1116"><f a="fname">
	<c path="String"/>
	<e path="Void"/>
</f></nonEmptyStack>
		<stackError set="method" line="1124"><f a="op:type">
	<e path="format.abc.OpCode"/>
	<c path="Int"/>
	<e path="Void"/>
</f></stackError>
		<scopeStackError set="method" line="1133"><f a="op:type">
	<e path="format.abc.OpCode"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scopeStackError>
		<urlDecode set="method" line="1142"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></urlDecode>
		<updateStacks set="method" line="1146"><f a="opc">
	<e path="format.abc.OpCode"/>
	<e path="Void"/>
</f></updateStacks>
		<logStack set="method" line="2002"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></logStack>
		<fileToLines get="inline" set="null" line="2006"><f a="fileName">
	<c path="String"/>
	<c path="String"/>
</f></fileToLines>
		<lineSplitter get="inline" set="null" line="2034"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></lineSplitter>
		<new public="1" set="method" line="70"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Jan J. Flanders
 </haxe_doc>
	</class>
	<class path="Class" params="T" file="C:\Program Files\Motion-Twin\haxe/std/Class.hx" extern="1"><haxe_doc>
	An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="haxe.io.Eof" params="" file="C:\Program Files\Motion-Twin\haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="33"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method" line="31"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
	This exception is raised when reading while data is no longer available in the [Input].
</haxe_doc>
	</class>
	<class path="Reflect" params="" file="C:\Program Files\Motion-Twin\haxe/std/Reflect.hx" extern="1">
		<hasField public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if an object has a field set. This doesn't take into account the object prototype (class methods).
	</haxe_doc>
		</hasField>
		<field public="1" set="method" static="1">
			<f a="o:field">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>
		Returns the field of an object, or null if [o] is not an object or doesn't have this field.
	</haxe_doc>
		</field>
		<setField public="1" set="method" static="1">
			<f a="o:field:value">
				<d/>
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set an object field value.
	</haxe_doc>
		</setField>
		<callMethod public="1" set="method" static="1">
			<f a="o:func:args">
				<d/>
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>
		Call a method with the given object and arguments.
	</haxe_doc>
		</callMethod>
		<fields public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of fields of an object, excluding its prototype (class methods).
	</haxe_doc>
		</fields>
		<isFunction public="1" set="method" static="1">
			<f a="f">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is a function or not.
	</haxe_doc>
		</isFunction>
		<compare public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="compare.T"/>
				<c path="compare.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Generic comparison function, does not work for methods, see [compareMethods]
	</haxe_doc>
		</compare>
		<compareMethods public="1" set="method" static="1">
			<f a="f1:f2">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Compare two methods closures. Returns true if it's the same method of the same instance.
	</haxe_doc>
		</compareMethods>
		<isObject public="1" set="method" static="1">
			<f a="v">
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value is an object or not.

	</haxe_doc>
		</isObject>
		<deleteField public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Delete an object field.
	</haxe_doc>
		</deleteField>
		<copy public="1" params="T" set="method" static="1">
			<f a="o">
				<c path="copy.T"/>
				<c path="copy.T"/>
			</f>
			<haxe_doc>
		Make a copy of the fields of an object.
	</haxe_doc>
		</copy>
		<makeVarArgs public="1" set="method" static="1">
			<f a="f">
				<f a="">
					<c path="Array"><d/></c>
					<d/>
				</f>
				<d/>
			</f>
			<haxe_doc>
		Transform a function taking an array of arguments into a function that can
		be called with any number of arguments.
	</haxe_doc>
		</makeVarArgs>
		<haxe_doc>
	The Reflect API is a way to manipulate values dynamicly through an
	abstract interface in an untyped manner. Use with care.
</haxe_doc>
	</class>
	<enum path="format.mp3.SamplingRate" params="" file="src/format/mp3/Data.hx" module="format.mp3.Data">
		<SR_Bad/>
		<SR_8000/>
		<SR_48000/>
		<SR_44100/>
		<SR_32000/>
		<SR_24000/>
		<SR_22050/>
		<SR_12000/>
		<SR_11025/>
	</enum>
	<enum path="format.mp3.Bitrate" params="" file="src/format/mp3/Data.hx" module="format.mp3.Data">
		<BR_Free/>
		<BR_Bad/>
		<BR_96/>
		<BR_80/>
		<BR_8/>
		<BR_64/>
		<BR_56/>
		<BR_48/>
		<BR_448/>
		<BR_416/>
		<BR_40/>
		<BR_384/>
		<BR_352/>
		<BR_320/>
		<BR_32/>
		<BR_288/>
		<BR_256/>
		<BR_24/>
		<BR_224/>
		<BR_192/>
		<BR_176/>
		<BR_160/>
		<BR_16/>
		<BR_144/>
		<BR_128/>
		<BR_112/>
	</enum>
	<class path="format.mp3.MPEG" params="" file="src/format/mp3/Constants.hx" module="format.mp3.Constants">
		<V1 public="1" line="11" static="1"><c path="Int"/></V1>
		<V2 public="1" line="12" static="1"><c path="Int"/></V2>
		<V25 public="1" line="13" static="1"><c path="Int"/></V25>
		<Reserved public="1" line="14" static="1"><c path="Int"/></Reserved>
		<enum2Num public="1" set="method" line="16" static="1"><f a="m">
	<e path="format.mp3.MPEGVersion"/>
	<c path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="25" static="1"><f a="m">
	<c path="Int"/>
	<e path="format.mp3.MPEGVersion"/>
</f></num2Enum>
		<V1_Bitrates public="1" line="35" static="1"><c path="Array"><c path="Array"><e path="format.mp3.Bitrate"/></c></c></V1_Bitrates>
		<V2_Bitrates public="1" line="43" static="1"><c path="Array"><c path="Array"><e path="format.mp3.Bitrate"/></c></c></V2_Bitrates>
		<SamplingRates public="1" line="51" static="1"><c path="Array"><c path="Array"><e path="format.mp3.SamplingRate"/></c></c></SamplingRates>
		<srNum2Enum public="1" set="method" line="58" static="1"><f a="sr">
	<c path="Int"/>
	<e path="format.mp3.SamplingRate"/>
</f></srNum2Enum>
		<srEnum2Num public="1" set="method" line="72" static="1"><f a="sr">
	<e path="format.mp3.SamplingRate"/>
	<c path="Int"/>
</f></srEnum2Num>
		<getBitrateIdx public="1" set="method" line="87" static="1"><f a="br:mpeg:layer">
	<e path="format.mp3.Bitrate"/>
	<e path="format.mp3.MPEGVersion"/>
	<e path="format.mp3.Layer"/>
	<c path="Int"/>
</f></getBitrateIdx>
		<getSamplingRateIdx public="1" set="method" line="96" static="1"><f a="sr:mpeg">
	<e path="format.mp3.SamplingRate"/>
	<e path="format.mp3.MPEGVersion"/>
	<c path="Int"/>
</f></getSamplingRateIdx>
		<bitrateEnum2Num public="1" set="method" line="105" static="1"><f a="br">
	<e path="format.mp3.Bitrate"/>
	<c path="Int"/>
</f></bitrateEnum2Num>
		<bitrateNum2Enum public="1" set="method" line="136" static="1"><f a="br">
	<c path="Int"/>
	<e path="format.mp3.Bitrate"/>
</f></bitrateNum2Enum>
		<haxe_doc>
 * MPEG Version
 *
 * sored on 2 bits in the file,
 * values represent bit values
 </haxe_doc>
	</class>
	<class path="format.mp3.CLayer" params="" file="src/format/mp3/Constants.hx" module="format.mp3.Constants">
		<LReserved public="1" line="177" static="1"><c path="Int"/></LReserved>
		<LLayer3 public="1" line="178" static="1"><c path="Int"/></LLayer3>
		<LLayer2 public="1" line="179" static="1"><c path="Int"/></LLayer2>
		<LLayer1 public="1" line="180" static="1"><c path="Int"/></LLayer1>
		<enum2Num public="1" set="method" line="182" static="1"><f a="l">
	<e path="format.mp3.Layer"/>
	<c path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="191" static="1"><f a="l">
	<c path="Int"/>
	<e path="format.mp3.Layer"/>
</f></num2Enum>
		<haxe_doc>
 * Layer
 *
 * stored on 2 bits in the file,
 * values represent bit values
 </haxe_doc>
	</class>
	<class path="format.mp3.CChannelMode" params="" file="src/format/mp3/Constants.hx" module="format.mp3.Constants">
		<CStereo public="1" get="inline" set="null" line="209" static="1"><c path="Int"/></CStereo>
		<CJointStereo public="1" get="inline" set="null" line="210" static="1"><c path="Int"/></CJointStereo>
		<CDualChannel public="1" line="211" static="1"><c path="Int"/></CDualChannel>
		<CMono public="1" line="212" static="1"><c path="Int"/></CMono>
		<enum2Num public="1" set="method" line="214" static="1"><f a="c">
	<e path="format.mp3.ChannelMode"/>
	<c path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="223" static="1"><f a="c">
	<c path="Int"/>
	<e path="format.mp3.ChannelMode"/>
</f></num2Enum>
		<haxe_doc>
 * Sound channel mode
 *
 * stored on 2 bits in the file,
 * values represent bit values
 </haxe_doc>
	</class>
	<class path="format.mp3.CEmphasis" params="" file="src/format/mp3/Constants.hx" module="format.mp3.Constants">
		<ENone public="1" get="inline" set="null" line="239" static="1"><c path="Int"/></ENone>
		<EMs50_15 public="1" get="inline" set="null" line="240" static="1"><c path="Int"/></EMs50_15>
		<EReserved public="1" get="inline" set="null" line="241" static="1"><c path="Int"/></EReserved>
		<ECCIT_J17 public="1" get="inline" set="null" line="242" static="1"><c path="Int"/></ECCIT_J17>
		<enum2Num public="1" set="method" line="244" static="1"><f a="c">
	<e path="format.mp3.Emphasis"/>
	<c path="Int"/>
</f></enum2Num>
		<num2Enum public="1" set="method" line="253" static="1"><f a="c">
	<c path="Int"/>
	<e path="format.mp3.Emphasis"/>
</f></num2Enum>
		<haxe_doc>
 * Emphasis
 *
 * 2 bits
 </haxe_doc>
	</class>
	<typedef path="format.swf.ShapeStyleInfo" params="" file="src/format/swf/Writer.hx" module="format.swf.Writer"><a>
	<numLineStyles><c path="Int"/></numLineStyles>
	<numFillStyles><c path="Int"/></numFillStyles>
	<lineBits><c path="Int"/></lineBits>
	<fillBits><c path="Int"/></fillBits>
</a></typedef>
	<class path="format.swf.Writer" params="" file="src/format/swf/Writer.hx">
		<output><c path="haxe.io.Output"/></output>
		<o><c path="haxe.io.BytesOutput"/></o>
		<compressed><e path="Bool"/></compressed>
		<bits><c path="format.tools.BitsOutput"/></bits>
		<write public="1" set="method" line="56"><f a="s">
	<t path="format.swf.SWF"/>
	<e path="Void"/>
</f></write>
		<writeRect set="method" line="63"><f a="r">
	<a>
		<top set="null"><c path="Int"/></top>
		<right set="null"><c path="Int"/></right>
		<left set="null"><c path="Int"/></left>
		<bottom set="null"><c path="Int"/></bottom>
	</a>
	<e path="Void"/>
</f></writeRect>
		<writeFixed8 get="inline" set="null" line="81"><f a="v">
	<c path="Int"/>
	<e path="Void"/>
</f></writeFixed8>
		<writeFixed get="inline" set="null" line="85"><f a="v">
	<c path="haxe.Int32"/>
	<e path="Void"/>
</f></writeFixed>
		<openTMP set="method" line="89"><f a=""><c path="haxe.io.BytesOutput"/></f></openTMP>
		<closeTMP set="method" line="96"><f a="old">
	<c path="haxe.io.BytesOutput"/>
	<c path="haxe.io.Bytes"/>
</f></closeTMP>
		<writeHeader public="1" set="method" line="103"><f a="h">
	<t path="format.swf.SWFHeader"/>
	<e path="Void"/>
</f></writeHeader>
		<writeRGB set="method" line="120"><f a="c">
	<t path="format.swf.RGB"/>
	<e path="Void"/>
</f></writeRGB>
		<writeRGBA set="method" line="126"><f a="c">
	<t path="format.swf.RGBA"/>
	<e path="Void"/>
</f></writeRGBA>
		<writeMatrix set="method" line="133"><f a="m">
	<t path="format.swf.Matrix"/>
	<e path="Void"/>
</f></writeMatrix>
		<writeCXAColor set="method" line="173"><f a="c:nbits">
	<t path="format.swf.RGBA"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeCXAColor>
		<writeCXA set="method" line="180"><f a="c">
	<t path="format.swf.CXA"/>
	<e path="Void"/>
</f></writeCXA>
		<writeClipEvents set="method" line="189"><f a="events">
	<c path="Array"><t path="format.swf.ClipEvent"/></c>
	<e path="Void"/>
</f></writeClipEvents>
		<writeFilterGradient set="method" line="213"><f a="f">
	<t path="format.swf.GradientFilterData"/>
	<e path="Void"/>
</f></writeFilterGradient>
		<writeFilter set="method" line="232"><f a="f">
	<e path="format.swf.Filter"/>
	<e path="Void"/>
</f></writeFilter>
		<writeFilters set="method" line="289"><f a="filters">
	<c path="Array"><e path="format.swf.Filter"/></c>
	<e path="Void"/>
</f></writeFilters>
		<writeBlendMode set="method" line="295"><f a="b">
	<e path="format.swf.BlendMode"/>
	<e path="Void"/>
</f></writeBlendMode>
		<writePlaceObject set="method" line="299"><f a="po:v3">
	<c path="format.swf.PlaceObject"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></writePlaceObject>
		<writeTID set="method" line="345"><f a="id:len">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeTID>
		<writeTIDExt set="method" line="355"><f a="id:len">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeTIDExt>
		<writeSymbols set="method" line="360"><f a="sl:tagid">
	<c path="Array"><t path="format.swf.SymData"/></c>
	<c path="Int"/>
	<e path="Void"/>
</f></writeSymbols>
		<writeSound set="method" line="373"><f a="s">
	<t path="format.swf.Sound"/>
	<e path="Void"/>
</f></writeSound>
		<writeGradRecord set="method" line="412"><f a="ver:grad_record">
	<c path="Int"/>
	<e path="format.swf.GradRecord"/>
	<e path="Void"/>
</f></writeGradRecord>
		<writeGradient set="method" line="428"><f a="ver:grad">
	<c path="Int"/>
	<t path="format.swf.Gradient"/>
	<e path="Void"/>
</f></writeGradient>
		<writeFocalGradient set="method" line="462"><f a="ver:grad">
	<c path="Int"/>
	<t path="format.swf.FocalGradient"/>
	<e path="Void"/>
</f></writeFocalGradient>
		<writeFillStyle set="method" line="470"><f a="ver:fill_style">
	<c path="Int"/>
	<e path="format.swf.FillStyle"/>
	<e path="Void"/>
</f></writeFillStyle>
		<writeFillStyles set="method" line="519"><f a="ver:fill_styles">
	<c path="Int"/>
	<c path="Array"><e path="format.swf.FillStyle"/></c>
	<e path="Void"/>
</f></writeFillStyles>
		<writeLineStyle set="method" line="540"><f a="ver:line_style">
	<c path="Int"/>
	<t path="format.swf.LineStyle"/>
	<e path="Void"/>
</f></writeLineStyle>
		<writeLineStyles set="method" line="599"><f a="ver:line_styles">
	<c path="Int"/>
	<c path="Array"><t path="format.swf.LineStyle"/></c>
	<e path="Void"/>
</f></writeLineStyles>
		<writeShapeRecord set="method" line="620"><f a="ver:style_info:shape_record">
	<c path="Int"/>
	<t path="format.swf.ShapeStyleInfo"/>
	<e path="format.swf.ShapeRecord"/>
	<e path="Void"/>
</f></writeShapeRecord>
		<writeShapeWithoutStyle set="method" line="717"><f a="ver:data:?isFont">
	<c path="Int"/>
	<t path="format.swf.ShapeWithoutStyleData"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></writeShapeWithoutStyle>
		<writeShapeWithStyle set="method" line="735"><f a="ver:data">
	<c path="Int"/>
	<t path="format.swf.ShapeWithStyleData"/>
	<e path="Void"/>
</f></writeShapeWithStyle>
		<writeShape public="1" set="method" line="756"><f a="id:data">
	<c path="Int"/>
	<e path="format.swf.ShapeData"/>
	<e path="Void"/>
</f></writeShape>
		<writeMorphGradient set="method" line="805"><f a="ver:g">
	<c path="Int"/>
	<t path="format.swf.MorphGradient"/>
	<e path="Void"/>
</f></writeMorphGradient>
		<writeMorphGradients set="method" line="812"><f a="ver:gradients">
	<c path="Int"/>
	<c path="Array"><t path="format.swf.MorphGradient"/></c>
	<e path="Void"/>
</f></writeMorphGradients>
		<writeMorphFillStyle set="method" line="822"><f a="ver:fill_style">
	<c path="Int"/>
	<e path="format.swf.MorphFillStyle"/>
	<e path="Void"/>
</f></writeMorphFillStyle>
		<writeMorphFillStyles set="method" line="857"><f a="ver:fill_styles">
	<c path="Int"/>
	<c path="Array"><e path="format.swf.MorphFillStyle"/></c>
	<e path="Void"/>
</f></writeMorphFillStyles>
		<writeMorph1LineStyle set="method" line="873"><f a="s">
	<t path="format.swf.Morph1LineStyle"/>
	<e path="Void"/>
</f></writeMorph1LineStyle>
		<writeMorph1LineStyles set="method" line="880"><f a="line_styles">
	<c path="Array"><t path="format.swf.Morph1LineStyle"/></c>
	<e path="Void"/>
</f></writeMorph1LineStyles>
		<writeMorph2LineStyle set="method" line="896"><f a="style">
	<e path="format.swf.Morph2LineStyle"/>
	<e path="Void"/>
</f></writeMorph2LineStyle>
		<writeMorph2LineStyles set="method" line="957"><f a="line_styles">
	<c path="Array"><e path="format.swf.Morph2LineStyle"/></c>
	<e path="Void"/>
</f></writeMorph2LineStyles>
		<writeMorphShape public="1" set="method" line="973"><f a="id:data">
	<c path="Int"/>
	<e path="format.swf.MorphShapeData"/>
	<e path="Void"/>
</f></writeMorphShape>
		<writeFontGlyphs set="method" line="1035"><f a="glyphs">
	<c path="Array"><t path="format.swf.ShapeWithoutStyleData"/></c>
	<c path="Array"><c path="Int"/></c>
</f></writeFontGlyphs>
		<writeFont1 set="method" line="1061"><f a="data">
	<t path="format.swf.Font1Data"/>
	<e path="Void"/>
</f></writeFont1>
		<writeFont4 set="method" line="1079"><f a="data">
	<t path="format.swf.Font4Data"/>
	<e path="Void"/>
</f></writeFont4>
		<writeFont2 set="method" line="1091"><f a="hasWideChars:data">
	<e path="Bool"/>
	<t path="format.swf.Font2Data"/>
	<e path="Void"/>
</f></writeFont2>
		<writeFont public="1" set="method" line="1191"><f a="id:data">
	<c path="Int"/>
	<e path="format.swf.FontData"/>
	<e path="Void"/>
</f></writeFont>
		<writeFontInfo public="1" set="method" line="1230"><f a="id:data">
	<c path="Int"/>
	<e path="format.swf.FontInfoData"/>
	<e path="Void"/>
</f></writeFontInfo>
		<writeSoundInfo set="method" line="1285"><f a="info">
	<t path="format.swf.SoundInfo"/>
	<e path="Void"/>
</f></writeSoundInfo>
		<writeEnvelopeRecords set="method" line="1298"><f a="soundEnvelopes">
	<c path="Array"><t path="format.swf.SoundEnvelope"/></c>
	<e path="Void"/>
</f></writeEnvelopeRecords>
		<writeFileAttributes set="method" line="1307"><f a="att">
	<t path="format.swf.FileAttributes"/>
	<e path="Void"/>
</f></writeFileAttributes>
		<writeButtonRecord set="method" line="1318"><f a="btnRec">
	<t path="format.swf.ButtonRecord"/>
	<e path="Void"/>
</f></writeButtonRecord>
		<writeDefineEditText set="method" line="1330"><f a="data">
	<t path="format.swf.TextFieldData"/>
	<e path="Void"/>
</f></writeDefineEditText>
		<writeImportAssets2 set="method" line="1380"><f a="url">
	<c path="String"/>
	<e path="Void"/>
</f></writeImportAssets2>
		<writeTag public="1" set="method" line="1394"><f a="t">
	<e path="format.swf.SWFTag"/>
	<e path="Void"/>
</f></writeTag>
		<writeEnd public="1" set="method" line="1652"><f a=""><e path="Void"/></f></writeEnd>
		<new public="1" set="method" line="52"><f a="o">
	<c path="haxe.io.Output"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="format.abc.Index" params="T" file="src/format/abc/Data.hx" module="format.abc.Data"><Idx a="v"><c path="Int"/></Idx></enum>
	<enum path="format.abc.Namespace" params="" file="src/format/abc/Data.hx" module="format.abc.Data">
		<NStaticProtected a="ns"><e path="format.abc.Index"><c path="String"/></e></NStaticProtected>
		<NPublic a="ns"><e path="format.abc.Index"><c path="String"/></e></NPublic>
		<NProtected a="ns"><e path="format.abc.Index"><c path="String"/></e></NProtected>
		<NPrivate a="ns"><e path="format.abc.Index"><c path="String"/></e></NPrivate>
		<NNamespace a="ns"><e path="format.abc.Index"><c path="String"/></e></NNamespace>
		<NInternal a="ns"><e path="format.abc.Index"><c path="String"/></e></NInternal>
		<NExplicit a="ns"><e path="format.abc.Index"><c path="String"/></e></NExplicit>
	</enum>
	<typedef path="format.abc.NamespaceSet" params="" file="src/format/abc/Data.hx" module="format.abc.Data"><c path="Array"><e path="format.abc.Index"><e path="format.abc.Namespace"/></e></c></typedef>
	<enum path="format.abc.Name" params="" file="src/format/abc/Data.hx" module="format.abc.Data">
		<NRuntimeLate/>
		<NRuntime a="name"><e path="format.abc.Index"><c path="String"/></e></NRuntime>
		<NParams a="n:params">
			<t path="format.abc.IName"/>
			<c path="Array"><t path="format.abc.IName"/></c>
		</NParams>
		<NName a="name:ns">
			<e path="format.abc.Index"><c path="String"/></e>
			<e path="format.abc.Index"><e path="format.abc.Namespace"/></e>
		</NName>
		<NMultiLate a="nset"><e path="format.abc.Index"><t path="format.abc.NamespaceSet"/></e></NMultiLate>
		<NMulti a="name:ns">
			<e path="format.abc.Index"><c path="String"/></e>
			<e path="format.abc.Index"><t path="format.abc.NamespaceSet"/></e>
		</NMulti>
		<NAttrib a="n"><e path="format.abc.Name"/></NAttrib>
	</enum>
	<typedef path="format.abc.MethodType" params="" file="src/format/abc/Data.hx" module="format.abc.Data"><a>
	<ret><t path="Null"><t path="format.abc.IName"/></t></ret>
	<extra><t path="Null"><t path="format.abc.MethodTypeExtra"/></t></extra>
	<args><c path="Array"><t path="Null"><t path="format.abc.IName"/></t></c></args>
</a></typedef>
	<typedef path="format.abc.MethodTypeExtra" params="" file="src/format/abc/Data.hx" module="format.abc.Data"><a>
	<variableArgs><e path="Bool"/></variableArgs>
	<usesDXNS><e path="Bool"/></usesDXNS>
	<unused><e path="Bool"/></unused>
	<paramNames><t path="Null"><c path="Array"><t path="Null"><e path="format.abc.Index"><c path="String"/></e></t></c></t></paramNames>
	<newBlock><e path="Bool"/></newBlock>
	<native><e path="Bool"/></native>
	<defaultParameters><t path="Null"><c path="Array"><e path="format.abc.Value"/></c></t></defaultParameters>
	<debugName><t path="Null"><e path="format.abc.Index"><c path="String"/></e></t></debugName>
	<argumentsDefined><e path="Bool"/></argumentsDefined>
</a></typedef>
	<enum path="format.abc.Value" params="" file="src/format/abc/Data.hx" module="format.abc.Data">
		<VUInt a="i"><e path="format.abc.Index"><c path="haxe.Int32"/></e></VUInt>
		<VString a="i"><e path="format.abc.Index"><c path="String"/></e></VString>
		<VNull/>
		<VNamespace a="kind:ns">
			<c path="Int"/>
			<e path="format.abc.Index"><e path="format.abc.Namespace"/></e>
		</VNamespace>
		<VInt a="i"><e path="format.abc.Index"><c path="haxe.Int32"/></e></VInt>
		<VFloat a="f"><e path="format.abc.Index"><c path="Float"/></e></VFloat>
		<VBool a="b"><e path="Bool"/></VBool>
	</enum>
	<typedef path="format.abc.TryCatch" params="" file="src/format/abc/Data.hx" module="format.abc.Data"><a>
	<variable><t path="Null"><t path="format.abc.IName"/></t></variable>
	<type><t path="Null"><t path="format.abc.IName"/></t></type>
	<start><c path="Int"/></start>
	<handle><c path="Int"/></handle>
	<end><c path="Int"/></end>
</a></typedef>
	<typedef path="format.abc.Function" params="" file="src/format/abc/Data.hx" module="format.abc.Data"><a>
	<type><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></type>
	<trys><c path="Array"><t path="format.abc.TryCatch"/></c></trys>
	<nRegs><c path="Int"/></nRegs>
	<maxStack><c path="Int"/></maxStack>
	<maxScope><c path="Int"/></maxScope>
	<locals><c path="Array"><t path="format.abc.Field"/></c></locals>
	<initScope><c path="Int"/></initScope>
	<code><c path="haxe.io.Bytes"/></code>
</a></typedef>
	<typedef path="format.abc.Field" params="" file="src/format/abc/Data.hx" module="format.abc.Data"><a>
	<slot><t path="format.abc.Slot"/></slot>
	<name><t path="format.abc.IName"/></name>
	<metadatas><t path="Null"><c path="Array"><e path="format.abc.Index"><t path="format.abc.Metadata"/></e></c></t></metadatas>
	<kind><e path="format.abc.FieldKind"/></kind>
</a></typedef>
	<enum path="format.abc.MethodKind" params="" file="src/format/abc/Data.hx" module="format.abc.Data">
		<KSetter/>
		<KNormal/>
		<KGetter/>
	</enum>
	<enum path="format.abc.FieldKind" params="" file="src/format/abc/Data.hx" module="format.abc.Data">
		<FVar a="?type:?value:?_const">
			<t path="format.abc.IName"/>
			<e path="format.abc.Value"/>
			<e path="Bool"/>
		</FVar>
		<FMethod a="type:k:?isFinal:?isOverride">
			<e path="format.abc.Index"><t path="format.abc.MethodType"/></e>
			<e path="format.abc.MethodKind"/>
			<e path="Bool"/>
			<e path="Bool"/>
		</FMethod>
		<FFunction a="f"><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></FFunction>
		<FClass a="c"><e path="format.abc.Index"><t path="format.abc.ClassDef"/></e></FClass>
	</enum>
	<typedef path="format.abc.ClassDef" params="" file="src/format/abc/Data.hx" module="format.abc.Data"><a>
	<superclass><t path="Null"><t path="format.abc.IName"/></t></superclass>
	<statics><t path="Null"><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></t></statics>
	<staticFields><c path="Array"><t path="format.abc.Field"/></c></staticFields>
	<name><t path="format.abc.IName"/></name>
	<isSealed><e path="Bool"/></isSealed>
	<isInterface><e path="Bool"/></isInterface>
	<isFinal><e path="Bool"/></isFinal>
	<interfaces><c path="Array"><t path="format.abc.IName"/></c></interfaces>
	<fields><c path="Array"><t path="format.abc.Field"/></c></fields>
	<constructor><t path="Null"><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></t></constructor>
	<_namespace><t path="Null"><e path="format.abc.Index"><e path="format.abc.Namespace"/></e></t></_namespace>
</a></typedef>
	<typedef path="format.abc.Metadata" params="" file="src/format/abc/Data.hx" module="format.abc.Data"><a>
	<name><e path="format.abc.Index"><c path="String"/></e></name>
	<data><c path="Array"><a>
	<v><e path="format.abc.Index"><c path="String"/></e></v>
	<n><t path="Null"><e path="format.abc.Index"><c path="String"/></e></t></n>
</a></c></data>
</a></typedef>
	<typedef path="format.abc.Init" params="" file="src/format/abc/Data.hx" module="format.abc.Data"><a>
	<method><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></method>
	<fields><c path="Array"><t path="format.abc.Field"/></c></fields>
</a></typedef>
	<class path="format.abc.ABCData" params="" file="src/format/abc/Data.hx" module="format.abc.Data">
		<ints public="1"><c path="Array"><c path="haxe.Int32"/></c></ints>
		<uints public="1"><c path="Array"><c path="haxe.Int32"/></c></uints>
		<floats public="1"><c path="Array"><c path="Float"/></c></floats>
		<strings public="1"><c path="Array"><c path="String"/></c></strings>
		<namespaces public="1"><c path="Array"><e path="format.abc.Namespace"/></c></namespaces>
		<nssets public="1"><c path="Array"><t path="format.abc.NamespaceSet"/></c></nssets>
		<names public="1"><c path="Array"><e path="format.abc.Name"/></c></names>
		<methodTypes public="1"><c path="Array"><t path="format.abc.MethodType"/></c></methodTypes>
		<metadatas public="1"><c path="Array"><t path="format.abc.Metadata"/></c></metadatas>
		<classes public="1"><c path="Array"><t path="format.abc.ClassDef"/></c></classes>
		<inits public="1"><c path="Array"><t path="format.abc.Init"/></c></inits>
		<functions public="1"><c path="Array"><t path="format.abc.Function"/></c></functions>
		<get public="1" params="T" set="method" line="164"><f a="t:i">
	<c path="Array"><c path="get.T"/></c>
	<e path="format.abc.Index"><c path="get.T"/></e>
	<c path="get.T"/>
</f></get>
		<new public="1" set="method" line="168"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="format.abc.IName" params="" file="src/format/abc/Data.hx" module="format.abc.Data"><e path="format.abc.Index"><e path="format.abc.Name"/></e></typedef>
	<typedef path="format.abc.Slot" params="" file="src/format/abc/Data.hx" module="format.abc.Data"><c path="Int"/></typedef>
	<typedef path="format.abc.Register" params="" file="src/format/abc/Data.hx" module="format.abc.Data"><c path="Int"/></typedef>
	<enum path="format.abc.OpCode" params="" file="src/format/abc/Data.hx" module="format.abc.Data">
		<OUnknown a="byte"><c path="Int"/></OUnknown>
		<OUndefined/>
		<OUIntRef a="v"><e path="format.abc.Index"><c path="haxe.Int32"/></e></OUIntRef>
		<OTypeof/>
		<OTrue/>
		<OToXmlAttr/>
		<OToXml/>
		<OToUInt/>
		<OToString/>
		<OToObject/>
		<OToNumber/>
		<OToInt/>
		<OToBool/>
		<OTimestamp/>
		<OThrow/>
		<OThis/>
		<OSwitch2 a="def:deltas:offsets">
			<c path="String"/>
			<c path="Array"><c path="String"/></c>
			<c path="Array"><c path="Int"/></c>
		</OSwitch2>
		<OSwitch a="def:deltas">
			<c path="Int"/>
			<c path="Array"><c path="Int"/></c>
		</OSwitch>
		<OSwap/>
		<OString a="v"><e path="format.abc.Index"><c path="String"/></e></OString>
		<OSmallInt a="v"><c path="Int"/></OSmallInt>
		<OSetThis/>
		<OSetSuper a="v"><t path="format.abc.IName"/></OSetSuper>
		<OSetSlot a="s"><t path="format.abc.Slot"/></OSetSlot>
		<OSetReg a="r"><t path="format.abc.Register"/></OSetReg>
		<OSetProp a="p"><t path="format.abc.IName"/></OSetProp>
		<OSetGlobalSlot a="s"><t path="format.abc.Slot"/></OSetGlobalSlot>
		<OScope/>
		<ORetVoid/>
		<ORet/>
		<ORegKill a="r"><t path="format.abc.Register"/></ORegKill>
		<OReg a="r"><t path="format.abc.Register"/></OReg>
		<OPushWith/>
		<OPopScope/>
		<OPop/>
		<OOp a="op"><e path="format.abc.Operation"/></OOp>
		<OObject a="nfields"><c path="Int"/></OObject>
		<ONull/>
		<ONop/>
		<ONext a="r1:r2">
			<t path="format.abc.Register"/>
			<t path="format.abc.Register"/>
		</ONext>
		<ONewBlock/>
		<ONamespace a="v"><e path="format.abc.Index"><e path="format.abc.Namespace"/></e></ONamespace>
		<ONaN/>
		<OLabel2 a="name"><c path="String"/></OLabel2>
		<OLabel/>
		<OJump3 a="landingName"><c path="String"/></OJump3>
		<OJump2 a="j:landingName:delta">
			<e path="format.abc.JumpStyle"/>
			<c path="String"/>
			<c path="Int"/>
		</OJump2>
		<OJump a="j:delta">
			<e path="format.abc.JumpStyle"/>
			<c path="Int"/>
		</OJump>
		<OIsType a="t"><t path="format.abc.IName"/></OIsType>
		<OIntRef a="v"><e path="format.abc.Index"><c path="haxe.Int32"/></e></OIntRef>
		<OInt a="v"><c path="Int"/></OInt>
		<OInstanceOf/>
		<OInitProp a="p"><t path="format.abc.IName"/></OInitProp>
		<OIncrReg a="r"><t path="format.abc.Register"/></OIncrReg>
		<OIncrIReg a="r"><t path="format.abc.Register"/></OIncrIReg>
		<OHasNext/>
		<OGetSuper a="v"><t path="format.abc.IName"/></OGetSuper>
		<OGetSlot a="s"><t path="format.abc.Slot"/></OGetSlot>
		<OGetScope a="n"><c path="Int"/></OGetScope>
		<OGetProp a="p"><t path="format.abc.IName"/></OGetProp>
		<OGetLex a="p"><t path="format.abc.IName"/></OGetLex>
		<OGetGlobalSlot a="s"><t path="format.abc.Slot"/></OGetGlobalSlot>
		<OGetGlobalScope/>
		<OGetDescendants a="c"><t path="format.abc.IName"/></OGetDescendants>
		<OFunction a="f"><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></OFunction>
		<OForIn/>
		<OForEach/>
		<OFloat a="v"><e path="format.abc.Index"><c path="Float"/></e></OFloat>
		<OFindPropStrict a="p"><t path="format.abc.IName"/></OFindPropStrict>
		<OFindProp a="p"><t path="format.abc.IName"/></OFindProp>
		<OFindDefinition a="d"><t path="format.abc.IName"/></OFindDefinition>
		<OFalse/>
		<ODxNsLate/>
		<ODxNs a="v"><e path="format.abc.Index"><c path="String"/></e></ODxNs>
		<ODup/>
		<ODeleteProp a="p"><t path="format.abc.IName"/></ODeleteProp>
		<ODecrReg a="r"><t path="format.abc.Register"/></ODecrReg>
		<ODecrIReg a="r"><t path="format.abc.Register"/></ODecrIReg>
		<ODebugReg a="name:r:line">
			<e path="format.abc.Index"><c path="String"/></e>
			<t path="format.abc.Register"/>
			<c path="Int"/>
		</ODebugReg>
		<ODebugLine a="line"><c path="Int"/></ODebugLine>
		<ODebugFile a="file"><e path="format.abc.Index"><c path="String"/></e></ODebugFile>
		<OConstructSuper a="nargs"><c path="Int"/></OConstructSuper>
		<OConstructProperty a="name:nargs">
			<t path="format.abc.IName"/>
			<c path="Int"/>
		</OConstructProperty>
		<OConstruct a="nargs"><c path="Int"/></OConstruct>
		<OClassDef a="c"><e path="format.abc.Index"><t path="format.abc.ClassDef"/></e></OClassDef>
		<OCheckIsXml/>
		<OCatch a="c"><c path="Int"/></OCatch>
		<OCast a="t"><t path="format.abc.IName"/></OCast>
		<OCase a="landingName"><c path="String"/></OCase>
		<OCallSuperVoid a="name:nargs">
			<t path="format.abc.IName"/>
			<c path="Int"/>
		</OCallSuperVoid>
		<OCallSuper a="name:nargs">
			<t path="format.abc.IName"/>
			<c path="Int"/>
		</OCallSuper>
		<OCallStatic a="meth:nargs">
			<e path="format.abc.Index"><t path="format.abc.MethodType"/></e>
			<c path="Int"/>
		</OCallStatic>
		<OCallStack a="nargs"><c path="Int"/></OCallStack>
		<OCallProperty a="name:nargs">
			<t path="format.abc.IName"/>
			<c path="Int"/>
		</OCallProperty>
		<OCallPropVoid a="name:nargs">
			<t path="format.abc.IName"/>
			<c path="Int"/>
		</OCallPropVoid>
		<OCallPropLex a="name:nargs">
			<t path="format.abc.IName"/>
			<c path="Int"/>
		</OCallPropLex>
		<OCallMethod a="slot:nargs">
			<t path="format.abc.Slot"/>
			<c path="Int"/>
		</OCallMethod>
		<OBreakPointLine a="n"><c path="Int"/></OBreakPointLine>
		<OBreakPoint/>
		<OAsType a="t"><t path="format.abc.IName"/></OAsType>
		<OAsString/>
		<OAsObject/>
		<OAsAny/>
		<OArray a="nvalues"><c path="Int"/></OArray>
		<OApplyType a="nargs"><c path="Int"/></OApplyType>
	</enum>
	<enum path="format.abc.JumpStyle" params="" file="src/format/abc/Data.hx" module="format.abc.Data">
		<JTrue/>
		<JPhysNeq/>
		<JPhysEq/>
		<JNotLte/>
		<JNotLt/>
		<JNotGte/>
		<JNotGt/>
		<JNeq/>
		<JLte/>
		<JLt/>
		<JGte/>
		<JGt/>
		<JFalse/>
		<JEq/>
		<JAlways/>
	</enum>
	<enum path="format.abc.Operation" params="" file="src/format/abc/Data.hx" module="format.abc.Data">
		<OpXor/>
		<OpUShr/>
		<OpSub/>
		<OpSign8/>
		<OpSign16/>
		<OpSign1/>
		<OpShr/>
		<OpShl/>
		<OpPhysEq/>
		<OpOr/>
		<OpNot/>
		<OpNeg/>
		<OpMul/>
		<OpMod/>
		<OpMemSetFloat/>
		<OpMemSetDouble/>
		<OpMemSet8/>
		<OpMemSet32/>
		<OpMemSet16/>
		<OpMemGetFloat/>
		<OpMemGetDouble/>
		<OpMemGet8/>
		<OpMemGet32/>
		<OpMemGet16/>
		<OpLte/>
		<OpLt/>
		<OpIs/>
		<OpIncr/>
		<OpIn/>
		<OpISub/>
		<OpINeg/>
		<OpIMul/>
		<OpIIncr/>
		<OpIDecr/>
		<OpIAdd/>
		<OpGte/>
		<OpGt/>
		<OpEq/>
		<OpDiv/>
		<OpDecr/>
		<OpBitNot/>
		<OpAs/>
		<OpAnd/>
		<OpAdd/>
	</enum>
	<enum path="format.tools.Huffman" params="" file="src/format/tools/Huffman.hx">
		<NeedBits a="n:table">
			<c path="Int"/>
			<c path="Array"><e path="format.tools.Huffman"/></c>
		</NeedBits>
		<NeedBit a="left:right">
			<e path="format.tools.Huffman"/>
			<e path="format.tools.Huffman"/>
		</NeedBit>
		<Found a="i"><c path="Int"/></Found>
	</enum>
	<class path="format.tools.HuffTools" params="" file="src/format/tools/Huffman.hx" module="format.tools.Huffman">
		<treeDepth set="method" line="44"><f a="t">
	<e path="format.tools.Huffman"/>
	<c path="Int"/>
</f></treeDepth>
		<treeCompress set="method" line="55"><f a="t">
	<e path="format.tools.Huffman"/>
	<e path="format.tools.Huffman"/>
</f></treeCompress>
		<treeWalk set="method" line="72"><f a="table:p:cd:d:t">
	<c path="Array"><e path="format.tools.Huffman"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="format.tools.Huffman"/>
	<e path="Void"/>
</f></treeWalk>
		<treeMake set="method" line="85"><f a="bits:maxbits:v:len">
	<c path="IntHash"><c path="Int"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="format.tools.Huffman"/>
</f></treeMake>
		<make public="1" set="method" line="95"><f a="lengths:pos:nlengths:maxbits">
	<c path="Array"><c path="Int"/></c>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="format.tools.Huffman"/>
</f></make>
		<new public="1" set="method" line="41"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="format.ttf.Reader" params="" file="src/format/ttf/Reader.hx">
		<readOTF public="1" set="method" line="924" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<a>
		<tables><c path="Array"><a>
	<tableName><c path="String"/></tableName>
	<tableId><c path="haxe.Int32"/></tableId>
	<offset><c path="haxe.Int32"/></offset>
	<length><c path="haxe.Int32"/></length>
	<checksum><c path="haxe.Int32"/></checksum>
	<bytes><c path="haxe.io.Bytes"/></bytes>
</a></c></tables>
		<header><a>
	<sfntVersion><c path="haxe.Int32"/></sfntVersion>
	<searchRange><c path="Int"/></searchRange>
	<rangeShift><c path="Int"/></rangeShift>
	<numTables><c path="Int"/></numTables>
	<entrySelector><c path="Int"/></entrySelector>
</a></header>
	</a>
</f></readOTF>
		<input><c path="haxe.io.Input"/></input>
		<tablesHash><c path="Hash"><c path="haxe.io.Bytes"/></c></tablesHash>
		<glyphIndexArray><c path="Array"><t path="format.ttf.GlyphIndex"/></c></glyphIndexArray>
		<kerningPairs><c path="Array"><t path="format.ttf.KerningPair"/></c></kerningPairs>
		<fontName public="1"><c path="String"/></fontName>
		<allGlyphs public="1"><c path="Array"><t path="format.ttf.GlyphIndex"/></c></allGlyphs>
		<read public="1" set="method" line="23"><f a=""><t path="format.ttf.TTF"/></f></read>
		<readHeader set="method" line="71"><f a=""><t path="format.ttf.Header"/></f></readHeader>
		<readDirectory set="method" line="83"><f a="header">
	<a><numTables set="null"><c path="Int"/></numTables></a>
	<c path="Array"><t path="format.ttf.Entry"/></c>
</f></readDirectory>
		<sortOnOffset32 set="method" line="120"><f a="e1:e2">
	<a><offset set="null"><c path="haxe.Int32"/></offset></a>
	<a><offset set="null"><c path="haxe.Int32"/></offset></a>
	<c path="Int"/>
</f></sortOnOffset32>
		<sortOnOffset16 set="method" line="130"><f a="e1:e2">
	<a><offset set="null"><c path="Int"/></offset></a>
	<a><offset set="null"><c path="Int"/></offset></a>
	<c path="Int"/>
</f></sortOnOffset16>
		<readHheaTable set="method" line="144"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<t path="format.ttf.HheaData"/>
</f></readHheaTable>
		<readHeadTable set="method" line="169"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<t path="format.ttf.HeadData"/>
</f></readHeadTable>
		<readMaxpTable set="method" line="197"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<t path="format.ttf.MaxpData"/>
</f></readMaxpTable>
		<readLocaTable set="method" line="223"><f a="bytes:head:maxp">
	<c path="haxe.io.Bytes"/>
	<t path="format.ttf.HeadData"/>
	<t path="format.ttf.MaxpData"/>
	<t path="format.ttf.LocaData"/>
</f></readLocaTable>
		<readHmtxTable set="method" line="244"><f a="bytes:maxp:hhea">
	<c path="haxe.io.Bytes"/>
	<a><numGlyphs set="null"><c path="Int"/></numGlyphs></a>
	<a><numberOfHMetrics set="null"><c path="Int"/></numberOfHMetrics></a>
	<c path="Array"><t path="format.ttf.Metric"/></c>
</f></readHmtxTable>
		<readGlyfTable set="method" line="268"><f a="bytes:maxp:loca:cmap:hmtx">
	<c path="haxe.io.Bytes"/>
	<t path="format.ttf.MaxpData"/>
	<t path="format.ttf.LocaData"/>
	<c path="Array"><e path="format.ttf.CmapSubTable"/></c>
	<c path="Array"><t path="format.ttf.Metric"/></c>
	<c path="Array"><e path="format.ttf.GlyfDescription"/></c>
</f></readGlyfTable>
		<readGlyf set="method" line="279"><f a="glyphIndex:input:len">
	<c path="Int"/>
	<a>
		<readUInt16 set="null"><f a=""><c path="Int"/></f></readUInt16>
		<readInt16 set="null"><f a=""><c path="Int"/></f></readInt16>
		<readByte set="null"><f a=""><c path="Int"/></f></readByte>
		<read set="null"><f a="">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></read>
	</a>
	<c path="Int"/>
	<e path="format.ttf.GlyfDescription"/>
</f></readGlyf>
		<readGlyfSimple set="method" line="312"><f a="numberOfContours:input:len">
	<c path="Int"/>
	<a>
		<readUInt16 set="null"><f a=""><c path="Int"/></f></readUInt16>
		<readInt16 set="null"><f a=""><c path="Int"/></f></readInt16>
		<readByte set="null"><f a=""><c path="Int"/></f></readByte>
		<read set="null"><f a="">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></read>
	</a>
	<c path="Int"/>
	<t path="format.ttf.GlyphSimple"/>
</f></readGlyfSimple>
		<readGlyfComposite set="method" line="416"><f a="input:len:glyphIndex">
	<a>
		<readUInt16 set="null"><f a=""><c path="Int"/></f></readUInt16>
		<readInt16 set="null"><f a=""><t path="Null"><c path="Int"/></t></f></readInt16>
		<readByte set="null"><f a=""><t path="Null"><c path="Int"/></t></f></readByte>
		<read set="null"><f a="">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></read>
	</a>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Array"><t path="format.ttf.GlyphComponent"/></c>
</f></readGlyfComposite>
		<readCmapTable set="method" line="540"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><e path="format.ttf.CmapSubTable"/></c>
</f></readCmapTable>
		<readSubTable set="method" line="567"><f a="bytes:entry">
	<c path="haxe.io.Bytes"/>
	<t path="format.ttf.CmapEntry"/>
	<e path="format.ttf.CmapSubTable"/>
</f></readSubTable>
		<mapCharCode set="method" line="665"><f a="charCode:glyphIndices:segCount:startCodes:endCodes:idRangeOffsets:idDeltas">
	<c path="Int"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Int"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><c path="Int"/></c>
	<c path="Int"/>
</f></mapCharCode>
		<getCharCodeFromIndex set="method" line="689"><f a="index">
	<c path="Int"/>
	<c path="Int"/>
</f></getCharCodeFromIndex>
		<readKernTable set="method" line="698"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><e path="format.ttf.KernSubTable"/></c>
</f></readKernTable>
		<readPostTable set="method" line="742"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<t path="format.ttf.PostData"/>
</f></readPostTable>
		<readNameTable set="method" line="780"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><t path="format.ttf.NameRecord"/></c>
</f></readNameTable>
		<readOS2Table set="method" line="851"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<t path="format.ttf.OS2Data"/>
</f></readOS2Table>
		<new public="1" set="method" line="18"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="format.ttf.CmapEntry" params="" file="src/format/ttf/Reader.hx" module="format.ttf.Reader"><a>
	<platformSpecificId><c path="Int"/></platformSpecificId>
	<platformId><c path="Int"/></platformId>
	<offset><c path="Int"/></offset>
</a></typedef>
	<class path="IntIter" params="" file="C:\Program Files\Motion-Twin\haxe/std/IntIter.hx">
		<min><c path="Int"/></min>
		<max><c path="Int"/></max>
		<hasNext public="1" set="method" line="46">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>
		Returns true if the iterator has other items, false otherwise.
	</haxe_doc>
		</hasNext>
		<next public="1" set="method" line="53">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Moves to the next item of the iterator.
	</haxe_doc>
		</next>
		<new public="1" set="method" line="38">
			<f a="min:max">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Iterate from [min] (inclusive) to [max] (exclusive).
		If [max <= min], the iterator will not act as a countdown.
	]]></haxe_doc>
		</new>
		<haxe_doc>
	Integer iterator. Used for interval implementation.
</haxe_doc>
	</class>
	<class path="format.tools.Inflate" params="" file="src/format/tools/Inflate.hx"><run public="1" set="method" line="31" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></run></class>
	<class path="Math" params="" file="C:\Program Files\Motion-Twin\haxe/std/Math.hx" extern="1">
		<PI public="1" set="null" static="1"><c path="Float"/></PI>
		<NaN public="1" set="null" static="1"><c path="Float"/></NaN>
		<NEGATIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></NEGATIVE_INFINITY>
		<POSITIVE_INFINITY public="1" set="null" static="1"><c path="Float"/></POSITIVE_INFINITY>
		<abs public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></abs>
		<min public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></min>
		<max public="1" set="method" static="1"><f a="a:b">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></max>
		<sin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sin>
		<cos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></cos>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></atan2>
		<tan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></tan>
		<exp public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></exp>
		<log public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></log>
		<sqrt public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></sqrt>
		<round public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></round>
		<floor public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></floor>
		<ceil public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Int"/>
</f></ceil>
		<atan public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></atan>
		<asin public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></asin>
		<acos public="1" set="method" static="1"><f a="v">
	<c path="Float"/>
	<c path="Float"/>
</f></acos>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
</f></pow>
		<random public="1" set="method" static="1"><f a=""><c path="Float"/></f></random>
		<isFinite public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isFinite>
		<isNaN public="1" set="method" static="1"><f a="f">
	<c path="Float"/>
	<e path="Bool"/>
</f></isNaN>
		<haxe_doc>
	This class defines mathematical functions and constants.
</haxe_doc>
	</class>
	<class path="be.haxer.hxswfml.SwfLibWriter" params="" file="src/be/haxer/hxswfml/SwfLibWriter.hx">
		<library public="1"><c path="Hash"><d/></c></library>
		<swf><t path="format.swf.SWF"/></swf>
		<swfBytes><c path="haxe.io.Bytes"/></swfBytes>
		<swcClasses><c path="Array"><c path="Array"><c path="String"/></c></c></swcClasses>
		<validElements><c path="Hash"><c path="Array"><c path="String"/></c></c></validElements>
		<validChildren><c path="Hash"><c path="Array"><c path="String"/></c></c></validChildren>
		<bitmapIds><c path="Array"><c path="Array"><c path="Int"/></c></c></bitmapIds>
		<currentTag><c path="Xml"/></currentTag>
		<id><c path="Int"/></id>
		<init set="method" line="45"><f a=""><e path="Void"/></f></init>
		<write public="1" set="method" line="63"><f a="input">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></write>
		<getSWF public="1" set="method" line="90"><f a=""><c path="haxe.io.Bytes"/></f></getSWF>
		<getSWC public="1" set="method" line="94"><f a=""><c path="haxe.io.Bytes"/></f></getSWC>
		<readTop set="method" line="99"><f a=""><a>
	<setBackgroundColor><e path="format.swf.SWFTag"/></setBackgroundColor>
	<header><t path="format.swf.SWFHeader"/></header>
	<fileAttributes><e path="format.swf.SWFTag"/></fileAttributes>
</a></f></readTop>
		<bitmapdata set="method" line="123"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></bitmapdata>
		<bitmap set="method" line="129"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></bitmap>
		<sprite set="method" line="135"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></sprite>
		<movieclip set="method" line="151"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></movieclip>
		<bytearray set="method" line="183"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></bytearray>
		<sound set="method" line="191"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></sound>
		<font set="method" line="207"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></font>
		<button set="method" line="258"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></button>
		<abc set="method" line="282"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></abc>
		<frame set="method" line="323"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></frame>
		<createDefineBitsJPEG set="method" line="327"><f a="id">
	<c path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></createDefineBitsJPEG>
		<createDefineShape set="method" line="336"><f a="id:bitmapId">
	<c path="Int"/>
	<c path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></createDefineShape>
		<placeobject set="method" line="358"><f a="id">
	<t path="Null"><c path="Int"/></t>
	<e path="format.swf.SWFTag"/>
</f></placeobject>
		<getContent set="method" line="377"><f a="file">
	<c path="String"/>
	<c path="String"/>
</f></getContent>
		<getBytes set="method" line="394"><f a="file">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></getBytes>
		<getInt set="method" line="412"><f a="att:defaultValue:?required:?uniqueId:?targetId">
	<c path="String"/>
	<t path="Null"><c path="Int"/></t>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<t path="Null"><c path="Int"/></t>
</f></getInt>
		<getBool set="method" line="422"><f a="att:defaultValue:?required">
	<c path="String"/>
	<t path="Null"><e path="Bool"/></t>
	<e path="Bool"/>
	<t path="Null"><e path="Bool"/></t>
</f></getBool>
		<getFloat set="method" line="429"><f a="att:defaultValue:?required">
	<c path="String"/>
	<t path="Null"><c path="Float"/></t>
	<e path="Bool"/>
	<t path="Null"><c path="Float"/></t>
</f></getFloat>
		<getString set="method" line="439"><f a="att:defaultValue:?required">
	<c path="String"/>
	<c path="String"/>
	<e path="Bool"/>
	<c path="String"/>
</f></getString>
		<parseInt32 set="method" line="446"><f a="s">
	<c path="String"/>
	<c path="haxe.Int32"/>
</f></parseInt32>
		<checkFileExistence set="method" line="455"><f a="file">
	<c path="String"/>
	<e path="Void"/>
</f></checkFileExistence>
		<setCurrentElement set="method" line="485"><f a="tag">
	<c path="Xml"/>
	<e path="Void"/>
</f></setCurrentElement>
		<isValidAttribute set="method" line="499"><f a="a">
	<c path="String"/>
	<e path="Bool"/>
</f></isValidAttribute>
		<createLinkedSymbol set="method" line="509"><f a="id:classn:linkn:?basen">
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="Array"><e path="format.swf.SWFTag"/></c>
</f></createLinkedSymbol>
		<getLinkClass set="method" line="514"><f a=""><a>
	<linkn><c path="String"/></linkn>
	<classn><c path="String"/></classn>
</a></f></getLinkClass>
		<error set="method" line="522"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></error>
		<new public="1" set="method" line="38"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* * @author Jan J. Flanders</haxe_doc>
	</class>
	<typedef path="format.mp3.MP3" params="" file="src/format/mp3/Data.hx" module="format.mp3.Data"><a>
	<sampleSize><c path="Int"/></sampleSize>
	<sampleCount><c path="Int"/></sampleCount>
	<id3v2><t path="format.mp3.ID3v2Info"/></id3v2>
	<frames><c path="Array"><t path="format.mp3.MP3Frame"/></c></frames>
</a></typedef>
	<typedef path="format.mp3.ID3v2Info" params="" file="src/format/mp3/Data.hx" module="format.mp3.Data"><a>
	<versionBytes><c path="Int"/></versionBytes>
	<flagByte><c path="Int"/></flagByte>
	<data><c path="haxe.io.Bytes"/></data>
</a></typedef>
	<typedef path="format.mp3.MP3Frame" params="" file="src/format/mp3/Data.hx" module="format.mp3.Data"><a>
	<header><t path="format.mp3.MP3Header"/></header>
	<data><c path="haxe.io.Bytes"/></data>
</a></typedef>
	<typedef path="format.mp3.MP3Header" params="" file="src/format/mp3/Data.hx" module="format.mp3.Data"><a>
	<version><e path="format.mp3.MPEGVersion"/></version>
	<samplingRate><e path="format.mp3.SamplingRate"/></samplingRate>
	<privateBit><e path="Bool"/></privateBit>
	<layer><e path="format.mp3.Layer"/></layer>
	<isPadded><e path="Bool"/></isPadded>
	<isOriginal><e path="Bool"/></isOriginal>
	<isMSStereo><e path="Bool"/></isMSStereo>
	<isIntensityStereo><e path="Bool"/></isIntensityStereo>
	<isCopyrighted><e path="Bool"/></isCopyrighted>
	<hasCrc><e path="Bool"/></hasCrc>
	<emphasis><e path="format.mp3.Emphasis"/></emphasis>
	<crc16><c path="Int"/></crc16>
	<channelMode><e path="format.mp3.ChannelMode"/></channelMode>
	<bitrate><e path="format.mp3.Bitrate"/></bitrate>
</a></typedef>
	<enum path="format.mp3.MPEGVersion" params="" file="src/format/mp3/Data.hx" module="format.mp3.Data">
		<MPEG_V25/>
		<MPEG_V2/>
		<MPEG_V1/>
		<MPEG_Reserved/>
	</enum>
	<enum path="format.mp3.Layer" params="" file="src/format/mp3/Data.hx" module="format.mp3.Data">
		<LayerReserved/>
		<Layer3/>
		<Layer2/>
		<Layer1/>
	</enum>
	<enum path="format.mp3.ChannelMode" params="" file="src/format/mp3/Data.hx" module="format.mp3.Data">
		<Stereo/>
		<Mono/>
		<JointStereo/>
		<DualChannel/>
	</enum>
	<enum path="format.mp3.Emphasis" params="" file="src/format/mp3/Data.hx" module="format.mp3.Data">
		<NoEmphasis/>
		<Ms50_15/>
		<InvalidEmphasis/>
		<CCIT_J17/>
	</enum>
	<enum path="ValueType" params="" file="C:\Program Files\Motion-Twin\haxe/std/Type.hx" module="Type">
		<TUnknown/>
		<TObject/>
		<TNull/>
		<TInt/>
		<TFunction/>
		<TFloat/>
		<TEnum a="e"><c path="Enum"><d/></c></TEnum>
		<TClass a="c"><c path="Class"><d/></c></TClass>
		<TBool/>
		<haxe_doc>
	The diffent possible runtime types of a value.
	See [Type] for the haXe Reflection API.
</haxe_doc>
	</enum>
	<class path="Type" params="" file="C:\Program Files\Motion-Twin\haxe/std/Type.hx" extern="1">
		<getClass public="1" params="T" set="method" static="1">
			<f a="o">
				<c path="getClass.T"/>
				<c path="Class"><c path="getClass.T"/></c>
			</f>
			<haxe_doc>
		Returns the class of a value or [null] if this value is not a Class instance.
	</haxe_doc>
		</getClass>
		<getEnum public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Returns the enum of a value or [null] if this value is not an Enum instance.
	</haxe_doc>
		</getEnum>
		<getSuperClass public="1" set="method" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Returns the super-class of a class, or null if no super class.
	</haxe_doc>
		</getSuperClass>
		<getClassName public="1" set="method" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of a class.
	</haxe_doc>
		</getClassName>
		<getEnumName public="1" set="method" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the complete name of an enum.
	</haxe_doc>
		</getEnumName>
		<resolveClass public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Class"><d/></c>
			</f>
			<haxe_doc>
		Evaluates a class from a name. The class must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveClass>
		<resolveEnum public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Enum"><d/></c>
			</f>
			<haxe_doc>
		Evaluates an enum from a name. The enum must have been compiled
		to be accessible.
	</haxe_doc>
		</resolveEnum>
		<createInstance public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<c path="Class"><c path="createInstance.T"/></c>
				<c path="Array"><d/></c>
				<c path="createInstance.T"/>
			</f>
			<haxe_doc>
		Creates an instance of the given class with the list of constructor arguments.
	</haxe_doc>
		</createInstance>
		<createEmptyInstance public="1" params="T" set="method" static="1">
			<f a="cl">
				<c path="Class"><c path="createEmptyInstance.T"/></c>
				<c path="createEmptyInstance.T"/>
			</f>
			<haxe_doc>
		Similar to [Reflect.createInstance] excepts that the constructor is not called.
		This enables you to create an instance without any side-effect.
	</haxe_doc>
		</createEmptyInstance>
		<createEnum public="1" params="T" set="method" static="1">
			<f a="e:constr:?params">
				<c path="Enum"><c path="createEnum.T"/></c>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createEnum.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor name and parameters.
	</haxe_doc>
		</createEnum>
		<createEnumIndex public="1" params="T" set="method" static="1">
			<f a="e:index:?params">
				<c path="Enum"><c path="createEnumIndex.T"/></c>
				<c path="Int"/>
				<c path="Array"><d/></c>
				<c path="createEnumIndex.T"/>
			</f>
			<haxe_doc>
		Create an instance of an enum by using a constructor index and parameters.
	</haxe_doc>
		</createEnumIndex>
		<getInstanceFields public="1" set="method" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of instance fields.
	</haxe_doc>
		</getInstanceFields>
		<getClassFields public="1" set="method" static="1">
			<f a="c">
				<c path="Class"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns the list of a class static fields.
	</haxe_doc>
		</getClassFields>
		<getEnumConstructs public="1" set="method" static="1">
			<f a="e">
				<c path="Enum"><d/></c>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>
		Returns all the available constructor names for an enum.
	</haxe_doc>
		</getEnumConstructs>
		<typeof public="1" set="method" static="1">
			<f a="v">
				<d/>
				<e path="ValueType"/>
			</f>
			<haxe_doc>
		Returns the runtime type of a value.
	</haxe_doc>
		</typeof>
		<enumEq public="1" params="T" set="method" static="1">
			<f a="a:b">
				<c path="enumEq.T"/>
				<c path="enumEq.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Recursively compare two enums constructors and parameters.
	</haxe_doc>
		</enumEq>
		<enumConstructor public="1" set="method" static="1">
			<f a="e">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns the constructor of an enum
	</haxe_doc>
		</enumConstructor>
		<enumParameters public="1" set="method" static="1">
			<f a="e">
				<d/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>
		Returns the parameters of an enum
	</haxe_doc>
		</enumParameters>
		<enumIndex public="1" set="method" static="1">
			<f a="e">
				<d/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Returns the index of the constructor of an enum
	</haxe_doc>
		</enumIndex>
		<haxe_doc>
	The haXe Reflection API enables you to retreive informations about any value,
	Classes and Enums at runtime.
</haxe_doc>
	</class>
	<enum path="XmlType" params="" file="C:\Program Files\Motion-Twin\haxe/std/Xml.hx" module="Xml"><haxe_doc>
	An abstract type representing the type of the Xml
	Node. You can compare it to [Xml] statics and can
	use [Std.string(t)] to get a string reprensation
	of the type.
</haxe_doc></enum>
	<class path="Xml" params="" file="C:\Program Files\Motion-Twin\haxe/std/Xml.hx" extern="1">
		<Element public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Element>
		<PCData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</PCData>
		<CData public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</CData>
		<Comment public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Comment>
		<DocType public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</DocType>
		<Prolog public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Prolog>
		<Document public="1" set="null" static="1">
			<e path="XmlType"/>
			<haxe_doc>
		A type of Xml node.
	</haxe_doc>
		</Document>
		<parse public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Parse a String into an Xml object.
	</haxe_doc>
		</parse>
		<createElement public="1" set="method" static="1">
			<f a="name">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createElement>
		<createPCData public="1" set="method" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createPCData>
		<createCData public="1" set="method" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createCData>
		<createComment public="1" set="method" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createComment>
		<createDocType public="1" set="method" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createDocType>
		<createProlog public="1" set="method" static="1">
			<f a="data">
				<c path="String"/>
				<c path="Xml"/>
			</f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createProlog>
		<createDocument public="1" set="method" static="1">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Creates a node of the given type.
	</haxe_doc>
		</createDocument>
		<nodeType public="1" set="null">
			<e path="XmlType"/>
			<haxe_doc>
		Returns the type of the Xml Node. This should be used before
		accessing other functions since some might raise an exception
		if the node type is not correct.
	</haxe_doc>
		</nodeType>
		<nodeName public="1" get="getNodeName" set="setNodeName">
			<c path="String"/>
			<haxe_doc>
		Returns the node name of an Element.
	</haxe_doc>
		</nodeName>
		<getNodeName set="method"><f a=""><c path="String"/></f></getNodeName>
		<setNodeName set="method"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></setNodeName>
		<nodeValue public="1" get="getNodeValue" set="setNodeValue">
			<c path="String"/>
			<haxe_doc>
		Returns the node value. Only works if the Xml node is not an Element or a Document.
	</haxe_doc>
		</nodeValue>
		<getNodeValue set="method"><f a=""><c path="String"/></f></getNodeValue>
		<setNodeValue set="method"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></setNodeValue>
		<get public="1" set="method">
			<f a="att">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Get the given attribute of an Element node. Returns [null] if not found.
		Attributes are case-sensitive.
	</haxe_doc>
		</get>
		<set public="1" set="method">
			<f a="att:value">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set the given attribute value for an Element node.
		Attributes are case-sensitive.
	</haxe_doc>
		</set>
		<remove public="1" set="method">
			<f a="att">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Removes an attribute for an Element node.
		Attributes are case-sensitive.
	</haxe_doc>
		</remove>
		<exists public="1" set="method">
			<f a="att">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the Element node has a given attribute.
		Attributes are case-sensitive.
	</haxe_doc>
		</exists>
		<attributes public="1" set="method">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an [Iterator] on all the attributes values.
	</haxe_doc>
		</attributes>
		<parent public="1" get="getParent" set="null">
			<c path="Xml"/>
			<haxe_doc>
		Returns the parent object in the Xml hierarchy.
		The parent can be [null], an Element or a Document.
	</haxe_doc>
		</parent>
		<getParent set="method"><f a=""><c path="Xml"/></f></getParent>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>
		Returns an iterator of all child nodes.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</iterator>
		<elements public="1" set="method">
			<f a=""><t path="Iterator"><c path="Xml"/></t></f>
			<haxe_doc>
		Returns an iterator of all child nodes which are Elements.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</elements>
		<elementsNamed public="1" set="method">
			<f a="name">
				<c path="String"/>
				<t path="Iterator"><c path="Xml"/></t>
			</f>
			<haxe_doc>
		Returns an iterator of all child nodes which are Elements with the given nodeName.
		Only works if the current node is an Element or a Document.
	</haxe_doc>
		</elementsNamed>
		<firstChild public="1" set="method">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Returns the first child node.
	</haxe_doc>
		</firstChild>
		<firstElement public="1" set="method">
			<f a=""><c path="Xml"/></f>
			<haxe_doc>
		Returns the first child node which is an Element.
	</haxe_doc>
		</firstElement>
		<addChild public="1" set="method">
			<f a="x">
				<c path="Xml"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a child node to the Document or Element.
		One node can only be inside one given node which is indicated by the [parent] property.
	</haxe_doc>
		</addChild>
		<removeChild public="1" set="method">
			<f a="x">
				<c path="Xml"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a child from the Document or Element.
		Returns true if the child was successfuly removed.
	</haxe_doc>
		</removeChild>
		<insertChild public="1" set="method">
			<f a="x:pos">
				<c path="Xml"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts a child at the given position among the other childs.
	</haxe_doc>
		</insertChild>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a String representation of the Xml node.
	</haxe_doc>
		</toString>
		<haxe_doc>
	The standard Xml class and parsing.
	More API to manipulate XML are available in the [haxe.xml] package.
</haxe_doc>
	</class>
	<class path="IntHash" params="T" file="C:\Program Files\Motion-Twin\haxe/std/IntHash.hx" extern="1">
		<set public="1" set="method">
			<f a="key:value">
				<c path="Int"/>
				<c path="IntHash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="Int"/>
				<t path="Null"><c path="IntHash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="Int"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="IntHash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty hashtable.
	</haxe_doc>
		</new>
		<haxe_doc>
	Hashtable over a set of elements, using [Int] as keys.
	On Flash and Javascript, the underlying structure is an Object.
</haxe_doc>
	</class>
	<class path="be.haxer.hxswfml.AbcWriter" params="" file="src/be/haxer/hxswfml/AbcWriter.hx">
		<parseInt32 set="method" line="680" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.Int32"/>
</f></parseInt32>
		<createABC public="1" set="method" line="1379" static="1"><f a="className:baseClass">
	<c path="String"/>
	<c path="String"/>
	<e path="format.swf.SWFTag"/>
</f></createABC>
		<log public="1"><e path="Bool"/></log>
		<strict public="1"><e path="Bool"/></strict>
		<name public="1"><c path="String"/></name>
		<ctx><c path="format.abc.Context"/></ctx>
		<jumps><c path="Hash"><f a=""><e path="Void"/></f></c></jumps>
		<switches><c path="Hash"><f a=""><e path="Void"/></f></c></switches>
		<labels><c path="Hash"><f a="">
	<t path="Null"><e path="format.abc.JumpStyle"/></t>
	<c path="Int"/>
</f></c></labels>
		<imports><c path="Hash"><c path="String"/></c></imports>
		<functionClosures><c path="Hash"><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></c></functionClosures>
		<inits><c path="Hash"><e path="format.abc.Index"><t path="format.abc.MethodType"/></e></c></inits>
		<classDefs><c path="Hash"><e path="format.abc.Index"><t path="format.abc.ClassDef"/></e></c></classDefs>
		<abcFile><c path="format.abc.ABCData"/></abcFile>
		<swfTags><c path="Array"><e path="format.swf.SWFTag"/></c></swfTags>
		<className><c path="String"/></className>
		<curClassName><c path="String"/></curClassName>
		<curClass><t path="format.abc.ClassDef"/></curClass>
		<classNames><c path="Array"><c path="String"/></c></classNames>
		<swcClasses><c path="Array"><c path="Array"><c path="String"/></c></c></swcClasses>
		<functionClosureName><c path="String"/></functionClosureName>
		<lastBytepos><c path="Int"/></lastBytepos>
		<maxStack><c path="Int"/></maxStack>
		<maxScopeStack><c path="Int"/></maxScopeStack>
		<currentStack><c path="Int"/></currentStack>
		<currentScopeStack><c path="Int"/></currentScopeStack>
		<write public="1" set="method" line="37"><f a="xml">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></write>
		<getTags public="1" set="method" line="65"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></getTags>
		<getABC public="1" set="method" line="69"><f a=""><c path="haxe.io.Bytes"/></f></getABC>
		<getSWF public="1" set="method" line="76"><f a="?className:?version:?compressed:?width:?height:?fps:?nframes">
	<c path="String"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></getSWF>
		<getSWC public="1" set="method" line="94"><f a="?className">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></getSWC>
		<abc2swf public="1" set="method" line="116"><f a="data">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></abc2swf>
		<xml2abc set="method" line="142"><f a="xml">
	<c path="Xml"/>
	<e path="format.swf.SWFTag"/>
</f></xml2abc>
		<createFunction set="method" line="271"><f a="node:functionType:?isInterface">
	<c path="Xml"/>
	<c path="String"/>
	<e path="Bool"/>
	<t path="format.abc.Function"/>
</f></createFunction>
		<writeCodeBlock set="method" line="418"><f a="member:f">
	<c path="Xml"/>
	<a><trys set="null"><a>
	<push set="null"><f a="">
	<a>
		<variable><t path="format.abc.IName"/></variable>
		<type><t path="format.abc.IName"/></type>
		<start><t path="Null"><c path="Int"/></t></start>
		<handle><t path="Null"><c path="Int"/></t></handle>
		<end><t path="Null"><c path="Int"/></t></end>
	</a>
	<c path="Int"/>
</f></push>
	<length set="null"><c path="Int"/></length>
</a></trys></a>
	<e path="Void"/>
</f></writeCodeBlock>
		<getImport set="method" line="622"><f a="name">
	<c path="String"/>
	<c path="String"/>
</f></getImport>
		<NamespaceType set="method" line="628"><f a="ns">
	<c path="String"/>
	<e path="format.abc.Index"><e path="format.abc.Namespace"/></e>
</f></NamespaceType>
		<parseLocals set="method" line="643"><f a="locals">
	<c path="String"/>
	<t path="Null"><c path="Array"><t path="format.abc.Field"/></c></t>
</f></parseLocals>
		<parseFieldKind set="method" line="663"><f a="fld">
	<c path="String"/>
	<e path="format.abc.FieldKind"/>
</f></parseFieldKind>
		<nonEmptyStack set="method" line="689"><f a="fname">
	<c path="String"/>
	<e path="Void"/>
</f></nonEmptyStack>
		<stackError set="method" line="697"><f a="op:type">
	<e path="format.abc.OpCode"/>
	<c path="Int"/>
	<e path="Void"/>
</f></stackError>
		<scopeStackError set="method" line="706"><f a="op:type">
	<e path="format.abc.OpCode"/>
	<c path="Int"/>
	<e path="Void"/>
</f></scopeStackError>
		<urlDecode set="method" line="715"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></urlDecode>
		<updateStacks set="method" line="720"><f a="opc">
	<e path="format.abc.OpCode"/>
	<e path="Void"/>
</f></updateStacks>
		<logStack set="method" line="1375"><f a="msg">
	<c path="String"/>
	<e path="Void"/>
</f></logStack>
		<new public="1" set="method" line="34"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Jan J. Flanders
 </haxe_doc>
	</class>
	<class path="format.ttf.Tools" params="" file="src/format/ttf/Tools.hx">
		<limit static="1"><c path="Int"/></limit>
		<buf static="1"><c path="StringBuf"/></buf>
		<dumpTable public="1" set="method" line="8" static="1"><f a="table:?lim">
	<e path="format.ttf.Table"/>
	<c path="Int"/>
	<c path="String"/>
</f></dumpTable>
		<dumpTHmtx set="method" line="30" static="1"><f a="metrics">
	<c path="Array"><t path="format.ttf.Metric"/></c>
	<c path="String"/>
</f></dumpTHmtx>
		<dumpTCmap set="method" line="40" static="1"><f a="subtables">
	<c path="Array"><e path="format.ttf.CmapSubTable"/></c>
	<c path="String"/>
</f></dumpTCmap>
		<dympTGlyf set="method" line="99" static="1"><f a="descriptions">
	<c path="Array"><e path="format.ttf.GlyfDescription"/></c>
	<c path="String"/>
</f></dympTGlyf>
		<dumpTKern set="method" line="134" static="1"><f a="kerning">
	<c path="Array"><e path="format.ttf.KernSubTable"/></c>
	<c path="String"/>
</f></dumpTKern>
		<dumpTName set="method" line="167" static="1"><f a="records">
	<c path="Array"><t path="format.ttf.NameRecord"/></c>
	<c path="String"/>
</f></dumpTName>
		<dumpTPost set="method" line="183" static="1"><f a="data">
	<t path="format.ttf.PostData"/>
	<c path="String"/>
</f></dumpTPost>
		<dumpTHhea set="method" line="210" static="1"><f a="data">
	<t path="format.ttf.HheaData"/>
	<c path="String"/>
</f></dumpTHhea>
		<dumpTHead set="method" line="228" static="1"><f a="data">
	<t path="format.ttf.HeadData"/>
	<c path="String"/>
</f></dumpTHead>
		<dumpTMaxp set="method" line="250" static="1"><f a="data">
	<t path="format.ttf.MaxpData"/>
	<c path="String"/>
</f></dumpTMaxp>
		<dumpTLoca set="method" line="270" static="1"><f a="data">
	<t path="format.ttf.LocaData"/>
	<c path="String"/>
</f></dumpTLoca>
		<dumpTOS2 set="method" line="283" static="1"><f a="data">
	<t path="format.ttf.OS2Data"/>
	<c path="String"/>
</f></dumpTOS2>
		<dumpTUnk set="method" line="339" static="1"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="String"/>
</f></dumpTUnk>
	</class>
	<enum path="format.ttf.Platform" params="" file="src/format/ttf/Tools.hx" module="format.ttf.Tools">
		<Unicode a="enc"><e path="format.ttf.LangUnicode"/></Unicode>
		<Reserved/>
		<Microsoft a="enc"><e path="format.ttf.LangMicrosoft"/></Microsoft>
		<Macintosh a="enc"><e path="format.ttf.LangMacintosh"/></Macintosh>
	</enum>
	<enum path="format.ttf.LangUnicode" params="" file="src/format/ttf/Tools.hx" module="format.ttf.Tools">
		<Version11/>
		<Unicode2/>
		<ISO10646/>
		<Default/>
	</enum>
	<enum path="format.ttf.LangMacintosh" params="" file="src/format/ttf/Tools.hx" module="format.ttf.Tools">
		<Vietnamese/>
		<Uninterpreted/>
		<TraditionalChinese/>
		<Tibetan/>
		<Thai/>
		<Telugu/>
		<Tamil/>
		<Slavic/>
		<Sinhalese/>
		<Sindhi/>
		<SimplifiedChinese/>
		<Russian/>
		<Roman/>
		<RSymbol/>
		<Oriya/>
		<Mongolian/>
		<Malayalam/>
		<Laotian/>
		<Korean/>
		<Khmer/>
		<Kannada/>
		<Japanese/>
		<Hebrew/>
		<Gurmukhi/>
		<Gujarati/>
		<Greek/>
		<Georgian/>
		<Geez/>
		<Devanagari/>
		<Burmese/>
		<Bengali/>
		<Armenian/>
		<Arabic/>
	</enum>
	<enum path="format.ttf.LangMicrosoft" params="" file="src/format/ttf/Tools.hx" module="format.ttf.Tools"><Unknown/></enum>
	<enum path="format.zip.ExtraField" params="" file="src/format/zip/Data.hx" module="format.zip.Data">
		<FUtf8/>
		<FUnknown a="tag:bytes">
			<c path="Int"/>
			<c path="haxe.io.Bytes"/>
		</FUnknown>
		<FInfoZipUnicodePath a="name:crc">
			<c path="String"/>
			<c path="haxe.Int32"/>
		</FInfoZipUnicodePath>
	</enum>
	<typedef path="format.zip.Entry" params="" file="src/format/zip/Data.hx" module="format.zip.Data"><a>
	<fileTime><c path="Date"/></fileTime>
	<fileSize><c path="Int"/></fileSize>
	<fileName><c path="String"/></fileName>
	<extraFields><c path="List"><e path="format.zip.ExtraField"/></c></extraFields>
	<dataSize><c path="Int"/></dataSize>
	<data><t path="Null"><c path="haxe.io.Bytes"/></t></data>
	<crc32><c path="haxe.Int32"/></crc32>
	<compressed><e path="Bool"/></compressed>
</a></typedef>
	<typedef path="format.zip.Data" params="" file="src/format/zip/Data.hx"><c path="List"><t path="format.zip.Entry"/></c></typedef>
	<class path="StringBuf" params="" file="C:\Program Files\Motion-Twin\haxe/std/StringBuf.hx">
		<add public="1" get="inline" set="null" line="46">
			<f a="?x">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the representation of any value to the string buffer.
	</haxe_doc>
		</add>
		<addSub public="1" get="inline" set="null" line="57">
			<f a="s:pos:?len">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a part of a string to the string buffer.
	</haxe_doc>
		</addSub>
		<addChar public="1" get="inline" set="null" line="73">
			<f a="c">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds a character to the string buffer.
	</haxe_doc>
		</addChar>
		<toString public="1" get="inline" set="null" line="87">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns the content of the string buffer.
		The buffer is not emptied by this operation.
	</haxe_doc>
		</toString>
		<b><c path="String"/></b>
		<new public="1" set="method" line="35">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new string buffer.
	</haxe_doc>
		</new>
		<haxe_doc>
	A String buffer is an efficient way to build a big string by
	appending small elements together.
</haxe_doc>
	</class>
	<class path="be.haxer.hxswfml.VideoWriter" params="" file="src/be/haxer/hxswfml/VideoWriter.hx">
		<flvTags><c path="Array"><d/></c></flvTags>
		<flvHeader><t path="format.flv.HeaderData"/></flvHeader>
		<soundInfo><t path="format.flv.SoundInfo"/></soundInfo>
		<videoInfo><t path="format.flv.VideoInfo"/></videoInfo>
		<metaInfoObj><d/></metaInfoObj>
		<actualWidth><c path="Int"/></actualWidth>
		<actualHeight><c path="Int"/></actualHeight>
		<defaultFPS><c path="Int"/></defaultFPS>
		<defaultWidth><c path="Int"/></defaultWidth>
		<defaultHeight><c path="Int"/></defaultHeight>
		<outTags><c path="Array"><t path="Null"><e path="format.swf.SWFTag"/></t></c></outTags>
		<swf><c path="haxe.io.Bytes"/></swf>
		<parse set="method" line="35"><f a="bytes">
	<c path="haxe.io.Bytes"/>
	<c path="Array"><d/></c>
</f></parse>
		<getTags public="1" set="method" line="130"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></getTags>
		<getSWF public="1" set="method" line="134"><f a=""><c path="haxe.io.Bytes"/></f></getSWF>
		<write public="1" set="method" line="142"><f a="flv:?id:?defaultFPS:?defaultWidth:?defaultHeight">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></write>
		<handleNoMetaData set="method" line="286"><f a=""><e path="Void"/></f></handleNoMetaData>
		<setCorrectHeaderInfo set="method" line="290"><f a="flvTags">
	<c path="Array"><d/></c>
	<e path="Void"/>
</f></setCorrectHeaderInfo>
		<findMetaInfo set="method" line="319"><f a="flvTags">
	<c path="Array"><d/></c>
	<unknown/>
</f></findMetaInfo>
		<findSoundInfo set="method" line="332"><f a="flvTags">
	<c path="Array"><d/></c>
	<t path="format.flv.SoundInfo"/>
</f></findSoundInfo>
		<findVideoInfo set="method" line="350"><f a="flvTags">
	<c path="Array"><d/></c>
	<t path="format.flv.VideoInfo"/>
</f></findVideoInfo>
		<findActualWidthHeight set="method" line="374"><f a=""><c path="Array"><c path="Int"/></c></f></findActualWidthHeight>
		<new public="1" set="method" line="31"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Jan J. Flanders
 </haxe_doc>
	</class>
	<class path="format.flv.Reader" params="" file="src/format/flv/Reader.hx">
		<ch><c path="haxe.io.Input"/></ch>
		<close public="1" set="method" line="39"><f a=""><e path="Void"/></f></close>
		<readHeader public="1" set="method" line="43"><f a=""><t path="format.flv.Header"/></f></readHeader>
		<readChunk public="1" set="method" line="64"><f a=""><t path="Null"><e path="format.flv.Data"/></t></f></readChunk>
		<new public="1" set="method" line="34"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="Void"/>
</f></new>
	</class>
	<typedef path="haxe.PosInfos" params="" file="C:\Program Files\Motion-Twin\haxe/std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams><c path="Array"><d/></c></customParams>
	<className><c path="String"/></className>
</a></typedef>
	<class path="format.abc.Writer" params="" file="src/format/abc/Writer.hx">
		<write public="1" set="method" line="339" static="1"><f a="out:data">
	<c path="haxe.io.Output"/>
	<c path="format.abc.ABCData"/>
	<e path="Void"/>
</f></write>
		<o><c path="haxe.io.Output"/></o>
		<opw><c path="format.abc.OpWriter"/></opw>
		<writeInt get="inline" set="null" line="49"><f a="n">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt>
		<writeUInt get="inline" set="null" line="53"><f a="n">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt>
		<writeList params="T" set="method" line="57"><f a="a:write">
	<c path="Array"><c path="writeList.T"/></c>
	<f a="">
		<c path="writeList.T"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></writeList>
		<writeList2 params="T" set="method" line="67"><f a="a:write">
	<c path="Array"><c path="writeList2.T"/></c>
	<f a="">
		<c path="writeList2.T"/>
		<e path="Void"/>
	</f>
	<e path="Void"/>
</f></writeList2>
		<writeString set="method" line="73"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></writeString>
		<writeIndex set="method" line="78"><f a="i">
	<e path="format.abc.Index"><d/></e>
	<e path="Void"/>
</f></writeIndex>
		<writeIndexOpt set="method" line="84"><f a="i">
	<e path="format.abc.Index"><d/></e>
	<e path="Void"/>
</f></writeIndexOpt>
		<writeNamespace set="method" line="92"><f a="n">
	<e path="format.abc.Namespace"/>
	<e path="Void"/>
</f></writeNamespace>
		<writeNsSet set="method" line="118"><f a="n">
	<t path="format.abc.NamespaceSet"/>
	<e path="Void"/>
</f></writeNsSet>
		<writeNameByte get="inline" set="null" line="124"><f a="k:n">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeNameByte>
		<writeName set="method" line="128"><f a="?k:n">
	<c path="Int"/>
	<e path="format.abc.Name"/>
	<e path="Void"/>
</f></writeName>
		<writeValue set="method" line="164"><f a="extra:v">
	<e path="Bool"/>
	<e path="format.abc.Value"/>
	<e path="Void"/>
</f></writeValue>
		<writeField set="method" line="196"><f a="f">
	<t path="format.abc.Field"/>
	<e path="Void"/>
</f></writeField>
		<writeMethodType set="method" line="233"><f a="m">
	<t path="format.abc.MethodType"/>
	<e path="Void"/>
</f></writeMethodType>
		<writeMetadata set="method" line="268"><f a="m">
	<t path="format.abc.Metadata"/>
	<e path="Void"/>
</f></writeMetadata>
		<writeClass set="method" line="277"><f a="c">
	<t path="format.abc.ClassDef"/>
	<e path="Void"/>
</f></writeClass>
		<writeInit set="method" line="293"><f a="i">
	<t path="format.abc.Init"/>
	<e path="Void"/>
</f></writeInit>
		<writeTryCatch set="method" line="298"><f a="t">
	<t path="format.abc.TryCatch"/>
	<e path="Void"/>
</f></writeTryCatch>
		<writeFunction set="method" line="306"><f a="f">
	<t path="format.abc.Function"/>
	<e path="Void"/>
</f></writeFunction>
		<writeABC set="method" line="318"><f a="d">
	<c path="format.abc.ABCData"/>
	<e path="Void"/>
</f></writeABC>
		<new public="1" set="method" line="36"><f a="o">
	<c path="haxe.io.Output"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="format.ttf.TableId" params="" file="src/format/ttf/Constants.hx" module="format.ttf.Constants">
		<BASE public="1" get="inline" set="null" line="5" static="1"><c path="haxe.Int32"/></BASE>
		<CFF public="1" get="inline" set="null" line="6" static="1"><c path="haxe.Int32"/></CFF>
		<DSIG public="1" get="inline" set="null" line="7" static="1"><c path="haxe.Int32"/></DSIG>
		<EBDT public="1" get="inline" set="null" line="8" static="1"><c path="haxe.Int32"/></EBDT>
		<EBLC public="1" get="inline" set="null" line="9" static="1"><c path="haxe.Int32"/></EBLC>
		<EBSC public="1" get="inline" set="null" line="10" static="1"><c path="haxe.Int32"/></EBSC>
		<GDEF public="1" get="inline" set="null" line="11" static="1"><c path="haxe.Int32"/></GDEF>
		<GPOS public="1" get="inline" set="null" line="12" static="1"><c path="haxe.Int32"/></GPOS>
		<GSUB public="1" get="inline" set="null" line="13" static="1"><c path="haxe.Int32"/></GSUB>
		<JSTF public="1" get="inline" set="null" line="14" static="1"><c path="haxe.Int32"/></JSTF>
		<LTSH public="1" get="inline" set="null" line="15" static="1"><c path="haxe.Int32"/></LTSH>
		<MMFX public="1" get="inline" set="null" line="16" static="1"><c path="haxe.Int32"/></MMFX>
		<MMSD public="1" get="inline" set="null" line="17" static="1"><c path="haxe.Int32"/></MMSD>
		<OS_2 public="1" get="inline" set="null" line="18" static="1"><c path="haxe.Int32"/></OS_2>
		<PCLT public="1" get="inline" set="null" line="19" static="1"><c path="haxe.Int32"/></PCLT>
		<VDMX public="1" get="inline" set="null" line="20" static="1"><c path="haxe.Int32"/></VDMX>
		<cmap public="1" get="inline" set="null" line="21" static="1"><c path="haxe.Int32"/></cmap>
		<cvt public="1" get="inline" set="null" line="22" static="1"><c path="haxe.Int32"/></cvt>
		<fpgm public="1" get="inline" set="null" line="23" static="1"><c path="haxe.Int32"/></fpgm>
		<fvar public="1" get="inline" set="null" line="24" static="1"><c path="haxe.Int32"/></fvar>
		<gasp public="1" get="inline" set="null" line="25" static="1"><c path="haxe.Int32"/></gasp>
		<glyf public="1" get="inline" set="null" line="26" static="1"><c path="haxe.Int32"/></glyf>
		<hdmx public="1" get="inline" set="null" line="27" static="1"><c path="haxe.Int32"/></hdmx>
		<head public="1" get="inline" set="null" line="28" static="1"><c path="haxe.Int32"/></head>
		<hhea public="1" get="inline" set="null" line="29" static="1"><c path="haxe.Int32"/></hhea>
		<hmtx public="1" get="inline" set="null" line="30" static="1"><c path="haxe.Int32"/></hmtx>
		<kern public="1" get="inline" set="null" line="31" static="1"><c path="haxe.Int32"/></kern>
		<loca public="1" get="inline" set="null" line="32" static="1"><c path="haxe.Int32"/></loca>
		<maxp public="1" get="inline" set="null" line="33" static="1"><c path="haxe.Int32"/></maxp>
		<_name public="1" get="inline" set="null" line="34" static="1"><c path="haxe.Int32"/></_name>
		<prep public="1" get="inline" set="null" line="35" static="1"><c path="haxe.Int32"/></prep>
		<post public="1" get="inline" set="null" line="36" static="1"><c path="haxe.Int32"/></post>
		<vhea public="1" get="inline" set="null" line="37" static="1"><c path="haxe.Int32"/></vhea>
		<vmtx public="1" get="inline" set="null" line="38" static="1"><c path="haxe.Int32"/></vmtx>
	</class>
	<class path="format.ttf.CFlag" params="" file="src/format/ttf/Constants.hx" module="format.ttf.Constants">
		<ARG_1_AND_2_ARE_WORDS public="1" get="inline" set="null" line="43" static="1"><c path="Int"/></ARG_1_AND_2_ARE_WORDS>
		<ARGS_ARE_XY_VALUES public="1" get="inline" set="null" line="44" static="1"><c path="Int"/></ARGS_ARE_XY_VALUES>
		<ROUND_XY_TO_GRID public="1" get="inline" set="null" line="45" static="1"><c path="Int"/></ROUND_XY_TO_GRID>
		<WE_HAVE_A_SCALE public="1" get="inline" set="null" line="46" static="1"><c path="Int"/></WE_HAVE_A_SCALE>
		<MORE_COMPONENTS public="1" get="inline" set="null" line="47" static="1"><c path="Int"/></MORE_COMPONENTS>
		<WE_HAVE_AN_X_AND_Y_SCALE public="1" get="inline" set="null" line="48" static="1"><c path="Int"/></WE_HAVE_AN_X_AND_Y_SCALE>
		<WE_HAVE_A_TWO_BY_TWO public="1" get="inline" set="null" line="49" static="1"><c path="Int"/></WE_HAVE_A_TWO_BY_TWO>
		<WE_HAVE_INSTRUCTIONS public="1" get="inline" set="null" line="50" static="1"><c path="Int"/></WE_HAVE_INSTRUCTIONS>
		<USE_MY_METRICS public="1" get="inline" set="null" line="51" static="1"><c path="Int"/></USE_MY_METRICS>
	</class>
	<class path="format.ttf.MacGlyphNames" params="" file="src/format/ttf/Constants.hx" module="format.ttf.Constants"><names public="1" get="inline" set="null" line="74" static="1"><c path="Array"><c path="String"/></c></names></class>
	<class path="format.tools.IO" params="" file="src/format/tools/IO.hx"><copy public="1" set="method" line="31" static="1"><f a="i:o:buf:size">
	<c path="haxe.io.Input"/>
	<c path="haxe.io.Output"/>
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<e path="Void"/>
</f></copy></class>
	<class path="haxe.io.Output" params="" file="C:\Program Files\Motion-Twin\haxe/std/haxe/io/Output.hx">
		<bigEndian public="1" set="setEndian"><e path="Bool"/></bigEndian>
		<writeByte public="1" set="method" line="37"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="41"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<flush public="1" set="method" line="64"><f a=""><e path="Void"/></f></flush>
		<close public="1" set="method" line="67"><f a=""><e path="Void"/></f></close>
		<setEndian set="method" line="70"><f a="b">
	<e path="Bool"/>
	<e path="Bool"/>
</f></setEndian>
		<write public="1" set="method" line="77"><f a="s">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></write>
		<writeFullBytes public="1" set="method" line="88"><f a="s:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeFullBytes>
		<writeFloat public="1" set="method" line="96"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeFloat>
		<writeDouble public="1" set="method" line="108"><f a="x">
	<c path="Float"/>
	<e path="Void"/>
</f></writeDouble>
		<writeInt8 public="1" set="method" line="120"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt8>
		<writeInt16 public="1" set="method" line="126"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt16>
		<writeUInt16 public="1" set="method" line="131"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt16>
		<writeInt24 public="1" set="method" line="142"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt24>
		<writeUInt24 public="1" set="method" line="147"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt24>
		<writeInt31 public="1" set="method" line="160"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt31>
		<writeUInt30 public="1" set="method" line="177"><f a="x">
	<c path="Int"/>
	<e path="Void"/>
</f></writeUInt30>
		<writeInt32 public="1" set="method" line="192"><f a="x">
	<c path="haxe.Int32"/>
	<e path="Void"/>
</f></writeInt32>
		<prepare public="1" set="method" line="212">
			<f a="nbytes">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inform that we are about to write at least a specified number of bytes.
		The underlying implementation can allocate proper working space depending
		on this information, or simply ignore it. This is not a mandatory call
		but a tip and is only used in some specific cases.
	</haxe_doc>
		</prepare>
		<writeInput public="1" set="method" line="215"><f a="i:?bufsize">
	<c path="haxe.io.Input"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeInput>
		<writeString public="1" set="method" line="237"><f a="s">
	<c path="String"/>
	<e path="Void"/>
</f></writeString>
		<haxe_doc>
	An Output is an abstract write. A specific output implementation will only
	have to override the [writeChar] and maybe the [write], [flush] and [close]
	methods. See [File.write] and [String.write] for two ways of creating an
	Output.
</haxe_doc>
	</class>
	<class path="be.haxer.hxswfml.AbcReader" params="" file="src/be/haxer/hxswfml/AbcReader.hx">
		<abcFile><c path="format.abc.ABCData"/></abcFile>
		<indentLevel><c path="Int"/></indentLevel>
		<functionClosures><c path="Array"><c path="String"/></c></functionClosures>
		<functionClosuresBodies><c path="Array"><d/></c></functionClosuresBodies>
		<functionParseIndex><c path="Int"/></functionParseIndex>
		<currentFunctionName><c path="String"/></currentFunctionName>
		<className><c path="String"/></className>
		<debugLines><c path="Array"><c path="String"/></c></debugLines>
		<debugFile><c path="String"/></debugFile>
		<debugFileName><c path="String"/></debugFileName>
		<lastJump><c path="String"/></lastJump>
		<lastLabel><c path="String"/></lastLabel>
		<abcReader_import><c path="be.haxer.hxswfml.AbcReader"/></abcReader_import>
		<abcId><c path="Int"/></abcId>
		<xml_out><c path="StringBuf"/></xml_out>
		<debugInfo public="1"><e path="Bool"/></debugInfo>
		<jumpInfo public="1"><e path="Bool"/></jumpInfo>
		<sourceInfo public="1"><e path="Bool"/></sourceInfo>
		<read public="1" set="method" line="59"><f a="type:bytes">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></read>
		<getXML public="1" set="method" line="123"><f a=""><c path="String"/></f></getXML>
		<abcToXml set="method" line="127"><f a="data:infos">
	<c path="haxe.io.Bytes"/>
	<a><label set="null"><c path="String"/></label></a>
	<c path="String"/>
</f></abcToXml>
		<decodeToXML set="method" line="617"><f a="ops:f">
	<c path="Array"><e path="format.abc.OpCode"/></c>
	<a><trys set="null"><c path="Array"><t path="format.abc.TryCatch"/></c></trys></a>
	<c path="String"/>
</f></decodeToXML>
		<createFunctionClosure set="method" line="968"><f a="f">
	<e path="format.abc.Index"><t path="format.abc.MethodType"/></e>
	<c path="String"/>
</f></createFunctionClosure>
		<parseMethodExtra get="inline" set="null" line="1020"><f a="extra">
	<t path="format.abc.MethodTypeExtra"/>
	<c path="String"/>
</f></parseMethodExtra>
		<parseLocals get="inline" set="null" line="1055"><f a="locals">
	<c path="Array"><t path="format.abc.Field"/></c>
	<c path="String"/>
</f></parseLocals>
		<indent get="inline" set="null" line="1102"><f a=""><c path="String"/></f></indent>
		<getString get="inline" set="null" line="1111"><f a="id">
	<e path="format.abc.Index"><c path="String"/></e>
	<c path="String"/>
</f></getString>
		<getInt get="inline" set="null" line="1115"><f a="id">
	<e path="format.abc.Index"><c path="haxe.Int32"/></e>
	<c path="String"/>
</f></getInt>
		<getUInt get="inline" set="null" line="1119"><f a="id">
	<e path="format.abc.Index"><c path="haxe.Int32"/></e>
	<c path="String"/>
</f></getUInt>
		<getFloat get="inline" set="null" line="1123"><f a="id">
	<e path="format.abc.Index"><c path="Float"/></e>
	<c path="String"/>
</f></getFloat>
		<getMethod get="inline" set="null" line="1127"><f a="id">
	<e path="format.abc.Index"><t path="format.abc.MethodType"/></e>
	<t path="format.abc.MethodType"/>
</f></getMethod>
		<getClass get="inline" set="null" line="1131"><f a="id">
	<e path="format.abc.Index"><t path="format.abc.ClassDef"/></e>
	<t path="format.abc.ClassDef"/>
</f></getClass>
		<getNamespace get="inline" set="null" line="1135"><f a="id">
	<e path="format.abc.Index"><e path="format.abc.Namespace"/></e>
	<c path="String"/>
</f></getNamespace>
		<getName set="method" line="1150"><f a="id">
	<t path="format.abc.IName"/>
	<c path="String"/>
</f></getName>
		<getNameType set="method" line="1162"><f a="name">
	<e path="format.abc.Name"/>
	<c path="String"/>
</f></getNameType>
		<getFieldName get="inline" set="null" line="1213"><f a="id">
	<t path="format.abc.IName"/>
	<c path="String"/>
</f></getFieldName>
		<cutComma get="inline" set="null" line="1217"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></cutComma>
		<getDefaultValue set="method" line="1224"><f a="value">
	<t path="Null"><e path="format.abc.Value"/></t>
	<c path="String"/>
</f></getDefaultValue>
		<getValue set="method" line="1241"><f a="value">
	<t path="Null"><e path="format.abc.Value"/></t>
	<c path="String"/>
</f></getValue>
		<fileToLines get="inline" set="null" line="1258"><f a="fileName">
	<c path="String"/>
	<c path="String"/>
</f></fileToLines>
		<urlEncode get="inline" set="null" line="1287"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></urlEncode>
		<lineSplitter get="inline" set="null" line="1293"><f a="str">
	<c path="String"/>
	<c path="String"/>
</f></lineSplitter>
		<new public="1" set="method" line="45"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Jan J. Flanders
 </haxe_doc>
	</class>
	<class path="Enum" params="T" file="C:\Program Files\Motion-Twin\haxe/std/Enum.hx" extern="1"><haxe_doc>
	An abstract type that represents an Enum.
	See [Type] for the haXe Reflection API.
</haxe_doc></class>
	<class path="format.mp3.Writer" params="" file="src/format/mp3/Writer.hx">
		<WRITE_ID3V2 public="1" get="inline" set="null" line="37" static="1"><e path="Bool"/></WRITE_ID3V2>
		<DONT_WRITE_ID3V2 public="1" get="inline" set="null" line="38" static="1"><e path="Bool"/></DONT_WRITE_ID3V2>
		<o><c path="haxe.io.Output"/></o>
		<bits><c path="format.tools.BitsOutput"/></bits>
		<write public="1" set="method" line="53">
			<f a="mp3:?writeId3v2">
				<t path="format.mp3.MP3"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
    * Pass DONT_WRITE_ID3V2 (false) as second parameter to
    * write the mpeg stream without id3v2
    </haxe_doc>
		</write>
		<writeID3v2 public="1" set="method" line="61"><f a="id3v2">
	<t path="format.mp3.ID3v2Info"/>
	<e path="Void"/>
</f></writeID3v2>
		<writeFrame public="1" set="method" line="81"><f a="f">
	<t path="format.mp3.MP3Frame"/>
	<e path="Void"/>
</f></writeFrame>
		<new public="1" set="method" line="43"><f a="output">
	<c path="haxe.io.Output"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="format.tools.Deflate" params="" file="src/format/tools/Deflate.hx"><run public="1" set="method" line="31" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Bytes"/>
</f></run></class>
	<typedef path="haxe.io.BytesData" params="" file="C:\Program Files\Motion-Twin\haxe/std/haxe/io/BytesData.hx"><c path="Array"><c path="Int"/></c></typedef>
	<typedef path="format.ttf.TTF" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<tables><c path="Array"><e path="format.ttf.Table"/></c></tables>
	<header><t path="format.ttf.Header"/></header>
	<directory><c path="Array"><t path="format.ttf.Entry"/></c></directory>
</a></typedef>
	<typedef path="format.ttf.Header" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<searchRange><c path="Int"/></searchRange>
	<rangeShift><c path="Int"/></rangeShift>
	<numTables><c path="Int"/></numTables>
	<minorVersion><c path="Int"/></minorVersion>
	<majorVersion><c path="Int"/></majorVersion>
	<entrySelector><c path="Int"/></entrySelector>
</a></typedef>
	<typedef path="format.ttf.Entry" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<tableName><c path="String"/></tableName>
	<tableId><c path="haxe.Int32"/></tableId>
	<offset><c path="haxe.Int32"/></offset>
	<length><c path="haxe.Int32"/></length>
	<checksum><c path="haxe.Int32"/></checksum>
</a></typedef>
	<enum path="format.ttf.Table" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data">
		<TUnkn a="bytes"><c path="haxe.io.Bytes"/></TUnkn>
		<TPost a="data"><t path="format.ttf.PostData"/></TPost>
		<TOS2 a="data"><t path="format.ttf.OS2Data"/></TOS2>
		<TName a="records"><c path="Array"><t path="format.ttf.NameRecord"/></c></TName>
		<TMaxp a="data"><t path="format.ttf.MaxpData"/></TMaxp>
		<TLoca a="data"><t path="format.ttf.LocaData"/></TLoca>
		<TKern a="kerning"><c path="Array"><e path="format.ttf.KernSubTable"/></c></TKern>
		<THmtx a="metrics"><c path="Array"><t path="format.ttf.Metric"/></c></THmtx>
		<THhea a="data"><t path="format.ttf.HheaData"/></THhea>
		<THead a="data"><t path="format.ttf.HeadData"/></THead>
		<TGlyf a="descriptions"><c path="Array"><e path="format.ttf.GlyfDescription"/></c></TGlyf>
		<TCmap a="subtables"><c path="Array"><e path="format.ttf.CmapSubTable"/></c></TCmap>
	</enum>
	<enum path="format.ttf.GlyfDescription" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data">
		<TGlyphSimple a="header:data">
			<t path="format.ttf.GlyphHeader"/>
			<t path="format.ttf.GlyphSimple"/>
		</TGlyphSimple>
		<TGlyphNull/>
		<TGlyphComposite a="header:components">
			<t path="format.ttf.GlyphHeader"/>
			<c path="Array"><t path="format.ttf.GlyphComponent"/></c>
		</TGlyphComposite>
	</enum>
	<typedef path="format.ttf.GlyphHeader" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<yMin><c path="Int"/></yMin>
	<yMax><c path="Int"/></yMax>
	<xMin><c path="Int"/></xMin>
	<xMax><c path="Int"/></xMax>
	<numberOfContours><c path="Int"/></numberOfContours>
</a></typedef>
	<typedef path="format.ttf.GlyphSimple" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<yCoordinates><c path="Array"><c path="Int"/></c></yCoordinates>
	<xCoordinates><c path="Array"><c path="Int"/></c></xCoordinates>
	<instructions><c path="Array"><c path="Int"/></c></instructions>
	<flags><c path="Array"><c path="Int"/></c></flags>
	<endPtsOfContours><c path="Array"><c path="Int"/></c></endPtsOfContours>
</a></typedef>
	<typedef path="format.ttf.GlyphComponent" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<ytranslate><t path="Null"><c path="Int"/></t></ytranslate>
	<yscale><t path="Null"><c path="Float"/></t></yscale>
	<xtranslate><t path="Null"><c path="Int"/></t></xtranslate>
	<xscale><t path="Null"><c path="Float"/></t></xscale>
	<scale10><t path="Null"><c path="Float"/></t></scale10>
	<scale01><t path="Null"><c path="Float"/></t></scale01>
	<point2><t path="Null"><c path="Int"/></t></point2>
	<point1><t path="Null"><c path="Int"/></t></point1>
	<instructions><t path="Null"><c path="Array"><c path="Int"/></c></t></instructions>
	<glyphIndex><c path="Int"/></glyphIndex>
	<flags><c path="Int"/></flags>
</a></typedef>
	<typedef path="format.ttf.Metric" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<leftSideBearing><c path="Int"/></leftSideBearing>
	<advanceWidth><c path="Int"/></advanceWidth>
</a></typedef>
	<enum path="format.ttf.CmapSubTable" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data">
		<CmapUnk a="header:bytes">
			<t path="format.ttf.CmapHeader"/>
			<c path="haxe.io.Bytes"/>
		</CmapUnk>
		<Cmap8 a="header:groups:is32">
			<t path="format.ttf.CmapHeader"/>
			<c path="Array"><t path="format.ttf.CmapGroup"/></c>
			<c path="Array"><c path="Int"/></c>
		</Cmap8>
		<Cmap6 a="header:glyphIndexArray:firstCode">
			<t path="format.ttf.CmapHeader"/>
			<c path="Array"><t path="format.ttf.GlyphIndex"/></c>
			<c path="Int"/>
		</Cmap6>
		<Cmap4 a="header:glyphIndexArray">
			<t path="format.ttf.CmapHeader"/>
			<c path="Array"><t path="format.ttf.GlyphIndex"/></c>
		</Cmap4>
		<Cmap2 a="header:glyphIndexArray:subHeaderKeys:subHeaders">
			<t path="format.ttf.CmapHeader"/>
			<c path="Array"><t path="format.ttf.GlyphIndex"/></c>
			<c path="Array"><c path="Int"/></c>
			<c path="Array"><c path="Int"/></c>
		</Cmap2>
		<Cmap12 a="header:groups">
			<t path="format.ttf.CmapHeader"/>
			<c path="Array"><t path="format.ttf.CmapGroup"/></c>
		</Cmap12>
		<Cmap10 a="header:glyphIndexArray:startCharCode:numChars">
			<t path="format.ttf.CmapHeader"/>
			<c path="Array"><c path="Int"/></c>
			<c path="Int"/>
			<c path="Int"/>
		</Cmap10>
		<Cmap0 a="header:glyphIndexArray">
			<t path="format.ttf.CmapHeader"/>
			<c path="Array"><t path="format.ttf.GlyphIndex"/></c>
		</Cmap0>
	</enum>
	<typedef path="format.ttf.CmapHeader" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<platformSpecificId><c path="Int"/></platformSpecificId>
	<platformId><c path="Int"/></platformId>
	<offset><c path="Int"/></offset>
	<language><c path="Int"/></language>
	<format><c path="Int"/></format>
</a></typedef>
	<typedef path="format.ttf.GlyphIndex" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<index><c path="Int"/></index>
	<charCode><c path="Int"/></charCode>
	<char><c path="String"/></char>
</a></typedef>
	<typedef path="format.ttf.CmapGroup" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<startGlyphCode><c path="Int"/></startGlyphCode>
	<startCharCode><c path="Int"/></startCharCode>
	<endCharCode><c path="Int"/></endCharCode>
</a></typedef>
	<enum path="format.ttf.KernSubTable" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data">
		<KernSub1 a="array"><c path="Array"><c path="Int"/></c></KernSub1>
		<KernSub0 a="kerningPairs"><c path="Array"><t path="format.ttf.KerningPair"/></c></KernSub0>
	</enum>
	<typedef path="format.ttf.KerningPair" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<value><c path="Int"/></value>
	<right><c path="Int"/></right>
	<left><c path="Int"/></left>
</a></typedef>
	<typedef path="format.ttf.NameRecord" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<record><c path="String"/></record>
	<platformSpecificId><c path="Int"/></platformSpecificId>
	<platformId><c path="Int"/></platformId>
	<offset><c path="Int"/></offset>
	<nameID><c path="Int"/></nameID>
	<length><c path="Int"/></length>
	<languageID><c path="Int"/></languageID>
</a></typedef>
	<typedef path="format.ttf.HeadData" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<yMin><c path="Int"/></yMin>
	<yMax><c path="Int"/></yMax>
	<xMin><c path="Int"/></xMin>
	<xMax><c path="Int"/></xMax>
	<version><c path="haxe.Int32"/></version>
	<unitsPerEm><c path="Int"/></unitsPerEm>
	<modified><c path="Float"/></modified>
	<magicNumber><c path="haxe.Int32"/></magicNumber>
	<macStyle><c path="Int"/></macStyle>
	<lowestRecPPEM><c path="Int"/></lowestRecPPEM>
	<indexToLocFormat><c path="Int"/></indexToLocFormat>
	<glyphDataFormat><c path="Int"/></glyphDataFormat>
	<fontRevision><c path="haxe.Int32"/></fontRevision>
	<fontDirectionHint><c path="Int"/></fontDirectionHint>
	<flags><c path="Int"/></flags>
	<created><c path="Float"/></created>
	<checkSumAdjustment><c path="haxe.Int32"/></checkSumAdjustment>
</a></typedef>
	<typedef path="format.ttf.HheaData" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<xMaxExtent><c path="Int"/></xMaxExtent>
	<version><c path="haxe.Int32"/></version>
	<reserved><c path="haxe.io.Bytes"/></reserved>
	<numberOfHMetrics><c path="Int"/></numberOfHMetrics>
	<minRightSideBearing><c path="Int"/></minRightSideBearing>
	<minLeftSideBearing><c path="Int"/></minLeftSideBearing>
	<metricDataFormat><c path="Int"/></metricDataFormat>
	<lineGap><c path="Int"/></lineGap>
	<descender><c path="Int"/></descender>
	<caretSlopeRun><c path="Int"/></caretSlopeRun>
	<caretSlopeRise><c path="Int"/></caretSlopeRise>
	<caretOffset><c path="Int"/></caretOffset>
	<ascender><c path="Int"/></ascender>
	<advanceWidthMax><c path="Int"/></advanceWidthMax>
</a></typedef>
	<typedef path="format.ttf.LocaData" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<offsets><c path="Array"><c path="Int"/></c></offsets>
	<factor><c path="Int"/></factor>
</a></typedef>
	<typedef path="format.ttf.MaxpData" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<versionNumber><c path="haxe.Int32"/></versionNumber>
	<numGlyphs><c path="Int"/></numGlyphs>
	<maxZones><c path="Int"/></maxZones>
	<maxTwilightPoints><c path="Int"/></maxTwilightPoints>
	<maxStorage><c path="Int"/></maxStorage>
	<maxStackElements><c path="Int"/></maxStackElements>
	<maxSizeOfInstructions><c path="Int"/></maxSizeOfInstructions>
	<maxPoints><c path="Int"/></maxPoints>
	<maxInstructionDefs><c path="Int"/></maxInstructionDefs>
	<maxFunctionDefs><c path="Int"/></maxFunctionDefs>
	<maxContours><c path="Int"/></maxContours>
	<maxComponentPoints><c path="Int"/></maxComponentPoints>
	<maxComponentElements><c path="Int"/></maxComponentElements>
	<maxComponentDepth><c path="Int"/></maxComponentDepth>
	<maxComponentContours><c path="Int"/></maxComponentContours>
</a></typedef>
	<typedef path="format.ttf.PostData" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<version><c path="haxe.Int32"/></version>
	<underlineThickness><c path="Int"/></underlineThickness>
	<underlinePosition><c path="Int"/></underlinePosition>
	<psGlyphName><c path="Array"><c path="String"/></c></psGlyphName>
	<numGlyphs><c path="Int"/></numGlyphs>
	<minMemType42><c path="haxe.Int32"/></minMemType42>
	<minMemType1><c path="haxe.Int32"/></minMemType1>
	<maxMemType42><c path="haxe.Int32"/></maxMemType42>
	<maxMemType1><c path="haxe.Int32"/></maxMemType1>
	<italicAngle><c path="haxe.Int32"/></italicAngle>
	<isFixedPitch><c path="haxe.Int32"/></isFixedPitch>
	<glyphNameIndex><c path="Array"><c path="Int"/></c></glyphNameIndex>
</a></typedef>
	<typedef path="format.ttf.OS2Data" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<ySuperscriptYSize><c path="Int"/></ySuperscriptYSize>
	<ySuperscriptYOffset><c path="Int"/></ySuperscriptYOffset>
	<ySuperscriptXSize><c path="Int"/></ySuperscriptXSize>
	<ySuperscriptXOffset><c path="Int"/></ySuperscriptXOffset>
	<ySubscriptYSize><c path="Int"/></ySubscriptYSize>
	<ySubscriptYOffset><c path="Int"/></ySubscriptYOffset>
	<ySubscriptXSize><c path="Int"/></ySubscriptXSize>
	<ySubscriptXOffset><c path="Int"/></ySubscriptXOffset>
	<yStrikeoutSize><c path="Int"/></yStrikeoutSize>
	<yStrikeoutPosition><c path="Int"/></yStrikeoutPosition>
	<xAvgCharWidth><c path="Int"/></xAvgCharWidth>
	<version><c path="Int"/></version>
	<usWinDescent><c path="Int"/></usWinDescent>
	<usWinAscent><c path="Int"/></usWinAscent>
	<usWidthClass><c path="Int"/></usWidthClass>
	<usWeightClass><c path="Int"/></usWeightClass>
	<usLastCharIndex><c path="Int"/></usLastCharIndex>
	<usFirstCharIndex><c path="Int"/></usFirstCharIndex>
	<ulUnicodeRange4><c path="haxe.Int32"/></ulUnicodeRange4>
	<ulUnicodeRange3><c path="haxe.Int32"/></ulUnicodeRange3>
	<ulUnicodeRange2><c path="haxe.Int32"/></ulUnicodeRange2>
	<ulUnicodeRange1><c path="haxe.Int32"/></ulUnicodeRange1>
	<sTypoLineGap><c path="Int"/></sTypoLineGap>
	<sTypoDescender><c path="Int"/></sTypoDescender>
	<sTypoAscender><c path="Int"/></sTypoAscender>
	<sFamilyClass><c path="Int"/></sFamilyClass>
	<fsType><c path="Int"/></fsType>
	<fsSelection><c path="Int"/></fsSelection>
	<bXHeight><c path="Int"/></bXHeight>
	<bWeight><c path="Int"/></bWeight>
	<bStrokeVariation><c path="Int"/></bStrokeVariation>
	<bSerifStyle><c path="Int"/></bSerifStyle>
	<bProportion><c path="Int"/></bProportion>
	<bMidline><c path="Int"/></bMidline>
	<bLetterform><c path="Int"/></bLetterform>
	<bFamilyType><c path="Int"/></bFamilyType>
	<bContrast><c path="Int"/></bContrast>
	<bArmStyle><c path="Int"/></bArmStyle>
	<achVendorID><c path="haxe.Int32"/></achVendorID>
</a></typedef>
	<typedef path="format.ttf.UnicodeRange" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<start><c path="Int"/></start>
	<end><c path="Int"/></end>
</a></typedef>
	<typedef path="format.ttf.GlyfPath" params="" file="src/format/ttf/Data.hx" module="format.ttf.Data"><a>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
	<type><t path="Null"><c path="Int"/></t></type>
	<cy><t path="Null"><c path="Float"/></t></cy>
	<cx><t path="Null"><c path="Float"/></t></cx>
</a></typedef>
	<class path="format.tools.CRC32" params="" file="src/format/tools/CRC32.hx">
		<POLYNOM get="inline" set="null" line="32" static="1"><c path="haxe.Int32"/></POLYNOM>
		<encode public="1" set="method" line="84" static="1"><f a="b">
	<c path="haxe.io.Bytes"/>
	<c path="haxe.Int32"/>
</f></encode>
		<crc><c path="haxe.Int32"/></crc>
		<i32 get="inline" set="null" line="39"><f a="i">
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></i32>
		<run public="1" set="method" line="47"><f a="b">
	<c path="haxe.io.Bytes"/>
	<e path="Void"/>
</f></run>
		<byte public="1" set="method" line="63"><f a="b">
	<c path="Int"/>
	<e path="Void"/>
</f></byte>
		<get public="1" set="method" line="75"><f a=""><c path="haxe.Int32"/></f></get>
		<new public="1" set="method" line="35"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="be.haxer.hxswfml.AudioWriter" params="" file="src/be/haxer/hxswfml/AudioWriter.hx">
		<soundData><t path="format.swf.Sound"/></soundData>
		<write public="1" set="method" line="23"><f a="bytes:?currentTag">
	<c path="haxe.io.Input"/>
	<a><toString set="null"><f a=""><c path="String"/></f></toString></a>
	<e path="Void"/>
</f></write>
		<getTag public="1" set="method" line="62"><f a="?id">
	<c path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></getTag>
		<getSWF public="1" set="method" line="67"><f a="?id">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></getSWF>
		<new public="1" set="method" line="20"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Jan J. Flanders
 </haxe_doc>
	</class>
	<class path="format.abc._Context.NullOutput" params="" file="src/format/abc/Context.hx" private="1" module="format.abc.Context">
		<extends path="haxe.io.Output"/>
		<n public="1"><c path="Int"/></n>
		<writeByte public="1" set="method" line="39" override="1"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="43" override="1"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<new public="1" set="method" line="35"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="format.abc.Context" params="" file="src/format/abc/Context.hx">
		<curFunction public="1"><a>
	<ops><c path="Array"><e path="format.abc.OpCode"/></c></ops>
	<f><t path="format.abc.Function"/></f>
</a></curFunction>
		<isExtending public="1"><e path="Bool"/></isExtending>
		<data><c path="format.abc.ABCData"/></data>
		<hstrings><c path="Hash"><c path="Int"/></c></hstrings>
		<curClass><t path="format.abc.ClassDef"/></curClass>
		<classes><c path="Array"><t path="format.abc.Field"/></c></classes>
		<init><a>
	<ops><c path="Array"><e path="format.abc.OpCode"/></c></ops>
	<f><t path="format.abc.Function"/></f>
</a></init>
		<fieldSlot><c path="Int"/></fieldSlot>
		<registers><c path="Array"><e path="Bool"/></c></registers>
		<bytepos public="1"><c path="format.abc._Context.NullOutput"/></bytepos>
		<opw><c path="format.abc.OpWriter"/></opw>
		<classSupers><c path="List"><e path="format.abc.Index"><e path="format.abc.Name"/></e></c></classSupers>
		<emptyString public="1" set="null"><e path="format.abc.Index"><c path="String"/></e></emptyString>
		<nsPublic public="1" set="null"><e path="format.abc.Index"><e path="format.abc.Namespace"/></e></nsPublic>
		<arrayProp public="1" set="null"><e path="format.abc.Index"><e path="format.abc.Name"/></e></arrayProp>
		<getData public="1" set="method" line="97"><f a=""><c path="format.abc.ABCData"/></f></getData>
		<lookup params="T" set="method" line="101"><f a="arr:n">
	<c path="Array"><c path="lookup.T"/></c>
	<c path="lookup.T"/>
	<e path="format.abc.Index"><c path="lookup.T"/></e>
</f></lookup>
		<elookup params="T" set="method" line="109"><f a="arr:n">
	<c path="Array"><c path="elookup.T"/></c>
	<c path="elookup.T"/>
	<e path="format.abc.Index"><c path="elookup.T"/></e>
</f></elookup>
		<int public="1" set="method" line="141"><f a="n">
	<c path="haxe.Int32"/>
	<e path="format.abc.Index"><c path="haxe.Int32"/></e>
</f></int>
		<uint public="1" set="method" line="154"><f a="n">
	<c path="haxe.Int32"/>
	<e path="format.abc.Index"><c path="haxe.Int32"/></e>
</f></uint>
		<float public="1" set="method" line="166"><f a="f">
	<c path="Float"/>
	<e path="format.abc.Index"><c path="Float"/></e>
</f></float>
		<string public="1" set="method" line="176"><f a="s">
	<c path="String"/>
	<e path="format.abc.Index"><c path="String"/></e>
</f></string>
		<_namespace public="1" set="method" line="187"><f a="n">
	<e path="format.abc.Namespace"/>
	<e path="format.abc.Index"><e path="format.abc.Namespace"/></e>
</f></_namespace>
		<nsset public="1" set="method" line="197"><f a="ns">
	<t path="format.abc.NamespaceSet"/>
	<e path="format.abc.Index"><t path="format.abc.NamespaceSet"/></e>
</f></nsset>
		<name public="1" set="method" line="217"><f a="n">
	<e path="format.abc.Name"/>
	<e path="format.abc.Index"><e path="format.abc.Name"/></e>
</f></name>
		<type public="1" set="method" line="227"><f a="path">
	<c path="String"/>
	<t path="format.abc.IName"/>
</f></type>
		<typeParams public="1" set="method" line="242"><f a="path">
	<c path="String"/>
	<e path="format.abc.Index"><e path="format.abc.Name"/></e>
</f></typeParams>
		<property public="1" set="method" line="259"><f a="pname:?ns">
	<c path="String"/>
	<e path="format.abc.Index"><e path="format.abc.Namespace"/></e>
	<t path="format.abc.IName"/>
</f></property>
		<methodType public="1" set="method" line="275"><f a="m">
	<t path="format.abc.MethodType"/>
	<e path="format.abc.Index"><t path="format.abc.MethodType"/></e>
</f></methodType>
		<getClass public="1" set="method" line="280"><f a="n">
	<t path="format.abc.ClassDef"/>
	<e path="format.abc.Index"><t path="format.abc.ClassDef"/></e>
</f></getClass>
		<beginClass public="1" set="method" line="287"><f a="path:?isInterface">
	<c path="String"/>
	<e path="Bool"/>
	<t path="format.abc.ClassDef"/>
</f></beginClass>
		<endClass public="1" set="method" line="345"><f a="?makeInit">
	<e path="Bool"/>
	<e path="Void"/>
</f></endClass>
		<addClassSuper public="1" set="method" line="401"><f a="sup">
	<c path="String"/>
	<e path="Void"/>
</f></addClassSuper>
		<beginInterfaceMethod public="1" set="method" line="407"><f a="mname:targs:tret:?isStatic:?isOverride:?isFinal:?willAddLater:?kind:?extra:?ns">
	<c path="String"/>
	<c path="Array"><t path="Null"><t path="format.abc.IName"/></t></c>
	<t path="Null"><t path="format.abc.IName"/></t>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="format.abc.MethodKind"/>
	<t path="format.abc.MethodTypeExtra"/>
	<e path="format.abc.Index"><e path="format.abc.Namespace"/></e>
	<t path="format.abc.Function"/>
</f></beginInterfaceMethod>
		<beginInterfaceFunction public="1" set="method" line="422"><f a="args:ret:?extra">
	<c path="Array"><t path="Null"><t path="format.abc.IName"/></t></c>
	<t path="Null"><t path="format.abc.IName"/></t>
	<t path="format.abc.MethodTypeExtra"/>
	<e path="format.abc.Index"><unknown/></e>
</f></beginInterfaceFunction>
		<beginFunction public="1" set="method" line="438"><f a="args:ret:?extra">
	<c path="Array"><t path="Null"><t path="format.abc.IName"/></t></c>
	<t path="Null"><t path="format.abc.IName"/></t>
	<t path="format.abc.MethodTypeExtra"/>
	<e path="format.abc.Index"><t path="format.abc.Function"/></e>
</f></beginFunction>
		<endFunction public="1" set="method" line="458"><f a=""><e path="Void"/></f></endFunction>
		<beginMethod public="1" set="method" line="471"><f a="mname:targs:tret:?isStatic:?isOverride:?isFinal:?willAddLater:?kind:?extra:?ns">
	<c path="String"/>
	<c path="Array"><t path="Null"><t path="format.abc.IName"/></t></c>
	<t path="Null"><t path="format.abc.IName"/></t>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="format.abc.MethodKind"/>
	<t path="format.abc.MethodTypeExtra"/>
	<e path="format.abc.Index"><e path="format.abc.Namespace"/></e>
	<t path="format.abc.Function"/>
</f></beginMethod>
		<endMethod public="1" set="method" line="486"><f a=""><e path="Void"/></f></endMethod>
		<defineField public="1" set="method" line="490"><f a="fname:t:?isStatic:?value:?_const:?ns:?slot">
	<c path="String"/>
	<t path="Null"><t path="format.abc.IName"/></t>
	<e path="Bool"/>
	<e path="format.abc.Value"/>
	<e path="Bool"/>
	<e path="format.abc.Index"><e path="format.abc.Namespace"/></e>
	<c path="Int"/>
	<t path="format.abc.Slot"/>
</f></defineField>
		<op public="1" set="method" line="508"><f a="o">
	<e path="format.abc.OpCode"/>
	<e path="Void"/>
</f></op>
		<ops public="1" set="method" line="513"><f a="ops">
	<c path="Array"><e path="format.abc.OpCode"/></c>
	<e path="Void"/>
</f></ops>
		<switchDefault public="1" set="method" line="518"><f a=""><f a=""><e path="Void"/></f></f></switchDefault>
		<switchCase public="1" set="method" line="537"><f a="index">
	<c path="Int"/>
	<f a=""><e path="Void"/></f>
</f></switchCase>
		<backwardJump public="1" set="method" line="555"><f a=""><f a="?jcond">
	<e path="format.abc.JumpStyle"/>
	<c path="Int"/>
</f></f></backwardJump>
		<jump public="1" set="method" line="589"><f a="jcond">
	<e path="format.abc.JumpStyle"/>
	<f a=""><e path="Void"/></f>
</f></jump>
		<allocRegister public="1" set="method" line="600"><f a=""><c path="Int"/></f></allocRegister>
		<freeRegister public="1" set="method" line="611"><f a="i">
	<c path="Int"/>
	<e path="Void"/>
</f></freeRegister>
		<finalize public="1" set="method" line="615"><f a=""><e path="Void"/></f></finalize>
		<new public="1" set="method" line="71"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="haxe.Log" params="" file="C:\Program Files\Motion-Twin\haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="29" static="1"><f a="v:?infos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
		<clear public="1" set="dynamic" line="43" static="1"><f a=""><e path="Void"/></f></clear>
	</class>
	<class path="be.haxer.hxswfml.ImageWriter" params="" file="src/be/haxer/hxswfml/ImageWriter.hx">
		<width public="1"><c path="Int"/></width>
		<height public="1"><c path="Int"/></height>
		<bytes><c path="haxe.io.Bytes"/></bytes>
		<write public="1" set="method" line="25"><f a="bytes:fileName:?currentTag">
	<c path="haxe.io.Bytes"/>
	<c path="String"/>
	<c path="Xml"/>
	<e path="Void"/>
</f></write>
		<getTag public="1" set="method" line="76"><f a="?id">
	<c path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></getTag>
		<getSWF public="1" set="method" line="80"><f a="?id">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></getSWF>
		<getShape set="method" line="103"><f a="id">
	<c path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></getShape>
		<new public="1" set="method" line="22"><f a=""><e path="Void"/></f></new>
		<haxe_doc>
 * ...
 * @author Jan J. Flanders
 </haxe_doc>
	</class>
	<class path="format.abc.OpWriter" params="" file="src/format/abc/OpWriter.hx">
		<o public="1"><c path="haxe.io.Output"/></o>
		<writeInt public="1" set="method" line="39"><f a="n">
	<c path="Int"/>
	<e path="Void"/>
</f></writeInt>
		<writeInt32 public="1" set="method" line="64"><f a="n">
	<c path="haxe.Int32"/>
	<e path="Void"/>
</f></writeInt32>
		<int set="method" line="90"><f a="i">
	<c path="Int"/>
	<e path="Void"/>
</f></int>
		<b get="inline" set="null" line="94"><f a="v">
	<c path="Int"/>
	<e path="Void"/>
</f></b>
		<reg set="method" line="98"><f a="v">
	<c path="Int"/>
	<e path="Void"/>
</f></reg>
		<idx set="method" line="102"><f a="i">
	<e path="format.abc.Index"><d/></e>
	<e path="Void"/>
</f></idx>
		<jumpCode set="method" line="108"><f a="j">
	<e path="format.abc.JumpStyle"/>
	<c path="Int"/>
</f></jumpCode>
		<operationCode set="method" line="128"><f a="o">
	<e path="format.abc.Operation"/>
	<c path="Int"/>
</f></operationCode>
		<write public="1" set="method" line="177"><f a="op">
	<e path="format.abc.OpCode"/>
	<e path="Void"/>
</f></write>
		<new public="1" set="method" line="35"><f a="o">
	<c path="haxe.io.Output"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="Hash" params="T" file="C:\Program Files\Motion-Twin\haxe/std/Hash.hx" extern="1">
		<set public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Set a value for the given key.
	</haxe_doc>
		</set>
		<get public="1" set="method">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<haxe_doc>
		Get a value for the given key.
	</haxe_doc>
		</get>
		<exists public="1" set="method">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.
	</haxe_doc>
		</exists>
		<remove public="1" set="method">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes a hashtable entry. Returns [true] if
		there was such entry.
	</haxe_doc>
		</remove>
		<keys public="1" set="method">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>
		Returns an iterator of all keys in the hashtable.
	</haxe_doc>
		</keys>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<haxe_doc>
		Returns an iterator of all values in the hashtable.
	</haxe_doc>
		</iterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns an displayable representation of the hashtable content.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new empty hashtable.
	</haxe_doc>
		</new>
		<haxe_doc>
	Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.
</haxe_doc>
	</class>
	<class path="format.swf.Reader" params="" file="src/format/swf/Reader.hx">
		<i><c path="haxe.io.Input"/></i>
		<bits><c path="format.tools.BitsInput"/></bits>
		<version><c path="Int"/></version>
		<bitsRead><c path="Int"/></bitsRead>
		<readFixed8 get="inline" set="null" line="47"><f a="?i">
	<c path="haxe.io.Input"/>
	<c path="Int"/>
</f></readFixed8>
		<readFixed get="inline" set="null" line="52"><f a=""><c path="haxe.Int32"/></f></readFixed>
		<readUTF8Bytes set="method" line="56"><f a=""><c path="haxe.io.Bytes"/></f></readUTF8Bytes>
		<readRect set="method" line="66"><f a=""><a>
	<top><c path="Int"/></top>
	<right><c path="Int"/></right>
	<left><c path="Int"/></left>
	<bottom><c path="Int"/></bottom>
</a></f></readRect>
		<readMatrixPart set="method" line="81"><f a=""><t path="format.swf.MatrixPart"/></f></readMatrixPart>
		<readMatrix set="method" line="90"><f a=""><t path="format.swf.Matrix"/></f></readMatrix>
		<readRGBA set="method" line="131"><f a="?i">
	<c path="haxe.io.Input"/>
	<t path="format.swf.RGBA"/>
</f></readRGBA>
		<readRGB set="method" line="141"><f a="?i">
	<c path="haxe.io.Input"/>
	<t path="format.swf.RGB"/>
</f></readRGB>
		<readCXAColor set="method" line="150"><f a="nbits">
	<c path="Int"/>
	<t path="format.swf.RGBA"/>
</f></readCXAColor>
		<readCXA set="method" line="159"><f a=""><t path="format.swf.CXA"/></f></readCXA>
		<readGradient set="method" line="171"><f a="ver">
	<c path="Int"/>
	<t path="format.swf.Gradient"/>
</f></readGradient>
		<getLineCap set="method" line="205"><f a="t">
	<c path="Int"/>
	<e path="format.swf.LineCapStyle"/>
</f></getLineCap>
		<readLineStyles set="method" line="214"><f a="ver">
	<c path="Int"/>
	<c path="Array"><t path="format.swf.LineStyle"/></c>
</f></readLineStyles>
		<readFillStyle set="method" line="281"><f a="ver">
	<c path="Int"/>
	<e path="format.swf.FillStyle"/>
</f></readFillStyle>
		<readFillStyles set="method" line="323"><f a="ver">
	<c path="Int"/>
	<c path="Array"><e path="format.swf.FillStyle"/></c>
</f></readFillStyles>
		<readShapeWithStyle set="method" line="337"><f a="ver">
	<c path="Int"/>
	<t path="format.swf.ShapeWithStyleData"/>
</f></readShapeWithStyle>
		<readShapeWithoutStyle set="method" line="347"><f a="ver">
	<c path="Int"/>
	<t path="format.swf.ShapeWithoutStyleData"/>
</f></readShapeWithoutStyle>
		<readShapeRecords set="method" line="357"><f a="ver">
	<c path="Int"/>
	<c path="Array"><e path="format.swf.ShapeRecord"/></c>
</f></readShapeRecords>
		<readClipEvents set="method" line="454"><f a=""><c path="Array"><t path="format.swf.ClipEvent"/></c></f></readClipEvents>
		<readFilterFlags set="method" line="467"><f a="top">
	<e path="Bool"/>
	<a>
		<passes><c path="Int"/></passes>
		<ontop><e path="Bool"/></ontop>
		<knockout><e path="Bool"/></knockout>
		<inner><e path="Bool"/></inner>
	</a>
</f></readFilterFlags>
		<readFilterGradient set="method" line="478"><f a=""><t path="format.swf.GradientFilterData"/></f></readFilterGradient>
		<readFilter set="method" line="501"><f a=""><e path="format.swf.Filter"/></f></readFilter>
		<readFilters set="method" line="554"><f a=""><c path="Array"><e path="format.swf.Filter"/></c></f></readFilters>
		<readShape set="method" line="561"><f a="len:ver">
	<c path="Int"/>
	<c path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readShape>
		<readMorphGradient set="method" line="594"><f a="ver">
	<c path="Int"/>
	<a>
		<startRatio><c path="Int"/></startRatio>
		<startColor><t path="format.swf.RGBA"/></startColor>
		<endRatio><c path="Int"/></endRatio>
		<endColor><t path="format.swf.RGBA"/></endColor>
	</a>
</f></readMorphGradient>
		<readMorphGradients set="method" line="608"><f a="ver">
	<c path="Int"/>
	<c path="Array"><t path="format.swf.MorphGradient"/></c>
</f></readMorphGradients>
		<readMorphFillStyle set="method" line="621"><f a="ver">
	<c path="Int"/>
	<e path="format.swf.MorphFillStyle"/>
</f></readMorphFillStyle>
		<readMorphFillStyles set="method" line="662"><f a="ver">
	<c path="Int"/>
	<c path="Array"><e path="format.swf.MorphFillStyle"/></c>
</f></readMorphFillStyles>
		<readMorph1LineStyle set="method" line="675"><f a=""><a>
	<startWidth><c path="Int"/></startWidth>
	<startColor><t path="format.swf.RGBA"/></startColor>
	<endWidth><c path="Int"/></endWidth>
	<endColor><t path="format.swf.RGBA"/></endColor>
</a></f></readMorph1LineStyle>
		<readMorph2LineStyle set="method" line="689"><f a=""><e path="format.swf.Morph2LineStyle"/></f></readMorph2LineStyle>
		<readMorph1LineStyles set="method" line="736"><f a=""><c path="Array"><t path="format.swf.Morph1LineStyle"/></c></f></readMorph1LineStyles>
		<readMorph2LineStyles set="method" line="750"><f a=""><c path="Array"><e path="format.swf.Morph2LineStyle"/></c></f></readMorph2LineStyles>
		<readMorphShape set="method" line="764"><f a="ver">
	<c path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readMorphShape>
		<readBlendMode set="method" line="819"><f a=""><e path="format.swf.BlendMode"/></f></readBlendMode>
		<readPlaceObject set="method" line="839"><f a="v3">
	<e path="Bool"/>
	<c path="format.swf.PlaceObject"/>
</f></readPlaceObject>
		<readLossless set="method" line="865"><f a="len:v2">
	<c path="Int"/>
	<e path="Bool"/>
	<a>
		<width><c path="Int"/></width>
		<height><c path="Int"/></height>
		<data><c path="haxe.io.Bytes"/></data>
		<color><e path="format.swf.ColorModel"/></color>
		<cid><c path="Int"/></cid>
	</a>
</f></readLossless>
		<readSymbols set="method" line="882"><f a=""><c path="Array"><t path="format.swf.SymData"/></c></f></readSymbols>
		<readSound set="method" line="893"><f a="len">
	<c path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readSound>
		<readLanguage set="method" line="937"><f a=""><e path="format.swf.LangCode"/></f></readLanguage>
		<readGlyphs set="method" line="949"><f a="len:offsets">
	<c path="Int"/>
	<c path="Array"><c path="Int"/></c>
	<c path="Array"><t path="format.swf.ShapeWithoutStyleData"/></c>
</f></readGlyphs>
		<readKerningRecord set="method" line="971"><f a="hasWideCodes">
	<e path="Bool"/>
	<a>
		<charCode2><c path="Int"/></charCode2>
		<charCode1><c path="Int"/></charCode1>
		<adjust><c path="Int"/></adjust>
	</a>
</f></readKerningRecord>
		<readFont1Data set="method" line="979"><f a="len">
	<c path="Int"/>
	<e path="format.swf.FontData"/>
</f></readFont1Data>
		<readFont2Data set="method" line="994"><f a="ver">
	<c path="Int"/>
	<e path="format.swf.FontData"/>
</f></readFont2Data>
		<readFont set="method" line="1106"><f a="len:ver">
	<c path="Int"/>
	<c path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readFont>
		<readFontInfo set="method" line="1121"><f a="len:ver">
	<c path="Int"/>
	<c path="Int"/>
	<e path="format.swf.SWFTag"/>
</f></readFontInfo>
		<readSoundInfo set="method" line="1161"><f a=""><a>
	<syncStop><e path="Bool"/></syncStop>
	<loopCount><d/></loopCount>
	<hasLoops><e path="Bool"/></hasLoops>
</a></f></readSoundInfo>
		<readEnvelopeRecords set="method" line="1189"><f a="count">
	<c path="Int"/>
	<c path="Array"><t path="format.swf.SoundEnvelope"/></c>
</f></readEnvelopeRecords>
		<readFileAttributes set="method" line="1198"><f a=""><t path="format.swf.FileAttributes"/></f></readFileAttributes>
		<error set="method" line="1212"><f a="?msg">
	<c path="String"/>
	<c path="String"/>
</f></error>
		<readHeader public="1" set="method" line="1216"><f a=""><t path="format.swf.SWFHeader"/></f></readHeader>
		<readTagList public="1" set="method" line="1249"><f a=""><c path="Array"><e path="format.swf.SWFTag"/></c></f></readTagList>
		<readTag public="1" set="method" line="1259"><f a=""><e path="format.swf.SWFTag"/></f></readTag>
		<read public="1" set="method" line="1404"><f a=""><t path="format.swf.SWF"/></f></read>
		<new public="1" set="method" line="43"><f a="i">
	<c path="haxe.io.Input"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="Array" params="T" file="C:\Program Files\Motion-Twin\haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>
		The length of the Array
	</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Returns a new Array by appending [a] to [this].
	</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Returns a representation of an array with [sep] for separating each element.
	</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the last element of the array and returns it.
	</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the end of the array.
	</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Reverse the order of elements of the Array.
	</haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>
		Removes the first element and returns it.
	</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Copies the range of the array starting at [pos] up to,
		but not including, [end]. Both [pos] and [end] can be
		negative to count from the end: -1 is the last item in
		the array.
	</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[
		Sort the Array according to the comparison function [f].
		[f(x,y)] should return [0] if [x == y], [>0] if [x > y]
		and [<0] if [x < y].
	]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>
		Removes [len] elements starting from [pos] an returns them.
	</haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a displayable representation of the Array content.
	</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Adds the element [x] at the start of the array.
	</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<c path="Int"/>
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Inserts the element [x] at the position [pos].
		All elements after [pos] are moved one index ahead.
	</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Removes the first occurence of [x].
		Returns false if [x] was not present.
		Elements are compared by using standard equality.
	</haxe_doc>
		</remove>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>
		Returns a copy of the Array. The values are not
		copied, only the Array structure.
	</haxe_doc>
		</copy>
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><t path="Null"><c path="Array.T"/></t></t></f>
			<haxe_doc>
		Returns an iterator of the Array values.
	</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>
		Creates a new Array.
	</haxe_doc>
		</new>
		<haxe_doc>
	An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.
</haxe_doc>
	</class>
	<class path="Std" params="" file="C:\Program Files\Motion-Twin\haxe/std/Std.hx" extern="1">
		<is public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if a value v is of the type t.
	</haxe_doc>
		</is>
		<string public="1" set="method" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Convert any value to a String
	</haxe_doc>
		</string>
		<int public="1" set="method" static="1">
			<f a="x">
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Convert a Float to an Int, rounded down.
	</haxe_doc>
		</int>
		<parseInt public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>
		Convert a String to an Int, parsing different possible representations. Returns [null] if could not be parsed.
	</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" static="1">
			<f a="x">
				<c path="String"/>
				<c path="Float"/>
			</f>
			<haxe_doc>
		Convert a String to a Float, parsing different possible reprensations.
	</haxe_doc>
		</parseFloat>
		<random public="1" set="method" static="1">
			<f a="x">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Return a random integer between 0 included and x excluded.
	</haxe_doc>
		</random>
		<haxe_doc>
	The Std class provides standard methods for manipulating basic types.
</haxe_doc>
	</class>
	<class path="format.zip.Writer" params="" file="src/format/zip/Writer.hx">
		<CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE get="inline" set="null" line="39" static="1"><c path="Int"/></CENTRAL_DIRECTORY_RECORD_FIELDS_SIZE>
		<LOCAL_FILE_HEADER_FIELDS_SIZE get="inline" set="null" line="46" static="1"><c path="Int"/></LOCAL_FILE_HEADER_FIELDS_SIZE>
		<o><c path="haxe.io.Output"/></o>
		<files><c path="List"><a>
	<size><c path="Int"/></size>
	<name><c path="String"/></name>
	<fields><c path="haxe.io.Bytes"/></fields>
	<date><c path="Date"/></date>
	<crc><c path="haxe.Int32"/></crc>
	<compressed><e path="Bool"/></compressed>
	<clen><c path="Int"/></clen>
</a></c></files>
		<writeZipDate set="method" line="56"><f a="date">
	<c path="Date"/>
	<e path="Void"/>
</f></writeZipDate>
		<writeEntryHeader public="1" set="method" line="67"><f a="f">
	<t path="format.zip.Entry"/>
	<e path="Void"/>
</f></writeEntryHeader>
		<writeEntryData public="1" set="method" line="127"><f a="e:buf:data">
	<t path="format.zip.Entry"/>
	<c path="haxe.io.Bytes"/>
	<c path="haxe.io.Input"/>
	<e path="Void"/>
</f></writeEntryData>
		<writeData public="1" set="method" line="131"><f a="files">
	<t path="format.zip.Data"/>
	<e path="Void"/>
</f></writeData>
		<writeCDR public="1" set="method" line="139"><f a=""><e path="Void"/></f></writeCDR>
		<new public="1" set="method" line="51"><f a="o">
	<c path="haxe.io.Output"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="format.swf.Tools" params="" file="src/format/swf/Tools.hx">
		<signExtend public="1" set="method" line="35" static="1"><f a="v:nbits">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></signExtend>
		<floatFixedBits public="1" get="inline" set="null" line="43" static="1"><f a="i:nbits">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
</f></floatFixedBits>
		<floatFixed public="1" get="inline" set="null" line="48" static="1"><f a="i">
	<c path="haxe.Int32"/>
	<c path="Float"/>
</f></floatFixed>
		<floatFixed8 public="1" get="inline" set="null" line="52" static="1"><f a="i">
	<c path="Int"/>
	<c path="Float"/>
</f></floatFixed8>
		<toFixed8 public="1" get="inline" set="null" line="56" static="1"><f a="f">
	<c path="Float"/>
	<c path="Int"/>
</f></toFixed8>
		<toFixed16 public="1" get="inline" set="null" line="64" static="1"><f a="f">
	<c path="Float"/>
	<c path="Int"/>
</f></toFixed16>
		<minBits public="1" get="inline" set="null" line="73" static="1"><f a="values">
	<c path="Array"><c path="Int"/></c>
	<c path="Int"/>
</f></minBits>
		<hex public="1" set="method" line="101" static="1"><f a="b:?max">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="String"/>
</f></hex>
		<bin public="1" set="method" line="115" static="1"><f a="b:?maxBytes">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="String"/>
</f></bin>
		<dumpTag public="1" set="method" line="131" static="1"><f a="t:?max">
	<e path="format.swf.SWFTag"/>
	<c path="Int"/>
	<c path="String"/>
</f></dumpTag>
	</class>
	<class path="format.tools.Adler32" params="" file="src/format/tools/Adler32.hx">
		<read public="1" set="method" line="54" static="1"><f a="i">
	<c path="haxe.io.Input"/>
	<c path="format.tools.Adler32"/>
</f></read>
		<a1><c path="Int"/></a1>
		<a2><c path="Int"/></a2>
		<update public="1" set="method" line="39"><f a="b:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></update>
		<equals public="1" set="method" line="50"><f a="a">
	<c path="format.tools.Adler32"/>
	<e path="Bool"/>
</f></equals>
		<new public="1" set="method" line="34"><f a=""><e path="Void"/></f></new>
	</class>
	<class path="be.haxer.hxswfml.ShapeWriter" params="" file="src/be/haxer/hxswfml/ShapeWriter.hx">
		<_shapeType><c path="Int"/></_shapeType>
		<_forceShape3><e path="Bool"/></_forceShape3>
		<_xMin><c path="Float"/></_xMin>
		<_yMin><c path="Float"/></_yMin>
		<_xMax><c path="Float"/></_xMax>
		<_yMax><c path="Float"/></_yMax>
		<_xMin2><c path="Float"/></_xMin2>
		<_yMin2><c path="Float"/></_yMin2>
		<_xMax2><c path="Float"/></_xMax2>
		<_yMax2><c path="Float"/></_yMax2>
		<_boundsInitialized><e path="Bool"/></_boundsInitialized>
		<_fillStyles><c path="Array"><e path="format.swf.FillStyle"/></c></_fillStyles>
		<_lineStyles><c path="Array"><t path="format.swf.LineStyle"/></c></_lineStyles>
		<_shapeRecords><c path="Array"><e path="format.swf.ShapeRecord"/></c></_shapeRecords>
		<_lastX><c path="Float"/></_lastX>
		<_lastY><c path="Float"/></_lastY>
		<_stateFillStyle><e path="Bool"/></_stateFillStyle>
		<_stateLineStyle><e path="Bool"/></_stateLineStyle>
		<shapeType public="1"><c path="Int"/></shapeType>
		<reset public="1" set="method" line="38"><f a="?forceShape3">
	<e path="Bool"/>
	<e path="Void"/>
</f></reset>
		<beginFill public="1" set="method" line="58"><f a="?color:?alpha">
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginFill>
		<beginGradientFill public="1" set="method" line="72"><f a="type:colors:alphas:ratios:x:y:scaleX:scaleY:?rotate0:?rotate1">
	<c path="String"/>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Array"><d/></c>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></beginGradientFill>
		<beginBitmapFill public="1" set="method" line="114"><f a="bitmapId:?x:?y:?scaleX:?scaleY:?rotate0:?rotate1:?repeat:?smooth">
	<c path="Int"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></beginBitmapFill>
		<lineStyle public="1" set="method" line="135"><f a="?width:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit:?noClose">
	<c path="Float"/>
	<c path="Int"/>
	<c path="Float"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></lineStyle>
		<lineStyle2 set="method" line="159"><f a="?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit:?noClose">
	<c path="Int"/>
	<c path="Float"/>
	<e path="Bool"/>
	<c path="String"/>
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<e path="Bool"/>
	<a>
		<startCap><e path="format.swf.LineCapStyle"/></startCap>
		<pixelHinting><t path="Null"><e path="Bool"/></t></pixelHinting>
		<noVScale><e path="Bool"/></noVScale>
		<noHScale><e path="Bool"/></noHScale>
		<noClose><t path="Null"><e path="Bool"/></t></noClose>
		<join><e path="format.swf.LineJoinStyle"/></join>
		<fill><e path="format.swf.LS2Fill"/></fill>
		<endCap><e path="format.swf.LineCapStyle"/></endCap>
	</a>
</f></lineStyle2>
		<lineTo public="1" set="method" line="184"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></lineTo>
		<moveTo public="1" set="method" line="205"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></moveTo>
		<curveTo public="1" set="method" line="232"><f a="cx:cy:ax:ay">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></curveTo>
		<endFill public="1" set="method" line="259"><f a=""><e path="Void"/></f></endFill>
		<endLine public="1" set="method" line="275"><f a=""><e path="Void"/></f></endLine>
		<clear public="1" set="method" line="291"><f a=""><e path="Void"/></f></clear>
		<drawRect public="1" set="method" line="295"><f a="x:y:width:height">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRect>
		<drawRoundRect public="1" set="method" line="303"><f a="x:y:w:h:r">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRoundRect>
		<drawRoundRectComplex public="1" set="method" line="307"><f a="x:y:w:h:rtl:rtr:rbl:rbr">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRoundRectComplex>
		<drawCircle public="1" set="method" line="319"><f a="x:y:r:?sections">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="Void"/>
</f></drawCircle>
		<drawEllipse public="1" set="method" line="344"><f a="x:y:w:h">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawEllipse>
		<getTag public="1" set="method" line="352"><f a="id:?useWinding:?useNonScalingStroke:?useScalingStroke">
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<e path="format.swf.SWFTag"/>
</f></getTag>
		<getSWF public="1" set="method" line="382"><f a="?id:?version:?compressed:?width:?height:?fps:?nframes">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></getSWF>
		<getShapeRecords public="1" set="method" line="404"><f a=""><c path="Array"><e path="format.swf.ShapeRecord"/></c></f></getShapeRecords>
		<initBounds set="method" line="408"><f a="x:y">
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></initBounds>
		<hexToRgba set="method" line="417"><f a="color:alpha">
	<c path="Int"/>
	<c path="Float"/>
	<a>
		<r><c path="Int"/></r>
		<g><c path="Int"/></g>
		<b><c path="Int"/></b>
		<a><c path="Int"/></a>
	</a>
</f></hexToRgba>
		<toFloat5 set="method" line="424"><f a="float">
	<c path="Float"/>
	<c path="Float"/>
</f></toFloat5>
		<new public="1" set="method" line="34"><f a="?forceShape3">
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc>
 * ...
 * @author Jan J. Flanders
 </haxe_doc>
	</class>
	<enum path="haxe.io.Error" params="" file="C:\Program Files\Motion-Twin\haxe/std/haxe/io/Error.hx">
		<Overflow><haxe_doc> An integer value is outside its allowed range </haxe_doc></Overflow>
		<OutsideBounds><haxe_doc> An operation on Bytes is outside of its valid range </haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc> Other errors </haxe_doc>
		</Custom>
		<Blocked><haxe_doc> The IO is set into nonblocking mode and some data cannot be read or written </haxe_doc></Blocked>
		<haxe_doc>
	The possible IO errors that can occur
</haxe_doc>
	</enum>
	<class path="haxe.io.BytesOutput" params="" file="C:\Program Files\Motion-Twin\haxe/std/haxe/io/BytesOutput.hx">
		<extends path="haxe.io.Output"/>
		<b><c path="haxe.io.BytesBuffer"/></b>
		<writeByte public="1" set="method" line="44" override="1"><f a="c">
	<c path="Int"/>
	<e path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="52" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
</f></writeBytes>
		<getBytes public="1" set="method" line="126"><f a=""><c path="haxe.io.Bytes"/></f></getBytes>
		<new public="1" set="method" line="35"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="format.flv.Header" params="" file="src/format/flv/Data.hx" module="format.flv.Data"><a>
	<hasVideo><e path="Bool"/></hasVideo>
	<hasMeta><e path="Bool"/></hasMeta>
	<hasAudio><e path="Bool"/></hasAudio>
</a></typedef>
	<enum path="format.flv.Data" params="" file="src/format/flv/Data.hx">
		<FLVVideo a="data:time">
			<c path="haxe.io.Bytes"/>
			<c path="Int"/>
		</FLVVideo>
		<FLVMeta a="data:time">
			<c path="haxe.io.Bytes"/>
			<c path="Int"/>
		</FLVMeta>
		<FLVAudio a="data:time">
			<c path="haxe.io.Bytes"/>
			<c path="Int"/>
		</FLVAudio>
	</enum>
	<typedef path="format.flv.HeaderData" params="" file="src/format/flv/Data.hx" module="format.flv.Data"><a>
	<type><c path="String"/></type>
	<hasVideo><e path="Bool"/></hasVideo>
	<hasMeta><e path="Bool"/></hasMeta>
	<hasAudio><e path="Bool"/></hasAudio>
</a></typedef>
	<typedef path="format.flv.VideoData" params="" file="src/format/flv/Data.hx" module="format.flv.Data"><a>
	<type><c path="String"/></type>
	<time><c path="Int"/></time>
	<frameType><c path="Int"/></frameType>
	<data><c path="haxe.io.Bytes"/></data>
	<codecId><c path="Int"/></codecId>
	<alphaOffset><c path="Int"/></alphaOffset>
	<adjustment><c path="Int"/></adjustment>
</a></typedef>
	<typedef path="format.flv.AudioData" params="" file="src/format/flv/Data.hx" module="format.flv.Data"><a>
	<type><c path="String"/></type>
	<time><c path="Int"/></time>
	<soundRate><c path="Int"/></soundRate>
	<soundFormat><c path="Int"/></soundFormat>
	<isStereo><e path="Bool"/></isStereo>
	<is16bit><e path="Bool"/></is16bit>
	<data><c path="haxe.io.Bytes"/></data>
</a></typedef>
	<typedef path="format.flv.MetaData" params="" file="src/format/flv/Data.hx" module="format.flv.Data"><a>
	<width><c path="Int"/></width>
	<height><c path="Int"/></height>
	<framerate><c path="Int"/></framerate>
</a></typedef>
	<typedef path="format.flv.SoundInfo" params="" file="src/format/flv/Data.hx" module="format.flv.Data"><a>
	<tags><c path="Array"><t path="format.flv.AudioData"/></c></tags>
	<soundRate><c path="Int"/></soundRate>
	<soundFormat><c path="Int"/></soundFormat>
	<isStereo><e path="Bool"/></isStereo>
	<is16bit><e path="Bool"/></is16bit>
</a></typedef>
	<typedef path="format.flv.VideoInfo" params="" file="src/format/flv/Data.hx" module="format.flv.Data"><a>
	<tags><c path="Array"><t path="format.flv.VideoData"/></c></tags>
	<frameType><c path="Int"/></frameType>
	<codecId><c path="Int"/></codecId>
</a></typedef>
	<typedef path="format.flv.MetaInfo" params="" file="src/format/flv/Data.hx" module="format.flv.Data"><t path="format.flv.MetaData"/></typedef>
	<class path="haxe.io.Bytes" params="" file="C:\Program Files\Motion-Twin\haxe/std/haxe/io/Bytes.hx">
		<alloc public="1" set="method" line="225" static="1"><f a="length">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></alloc>
		<ofString public="1" set="method" line="253" static="1"><f a="s">
	<c path="String"/>
	<c path="haxe.io.Bytes"/>
</f></ofString>
		<ofData public="1" set="method" line="292" static="1"><f a="b">
	<t path="haxe.io.BytesData"/>
	<c path="haxe.io.Bytes"/>
</f></ofData>
		<length public="1" set="null"><c path="Int"/></length>
		<b><t path="haxe.io.BytesData"/></b>
		<get public="1" get="inline" set="null" line="37"><f a="pos">
	<c path="Int"/>
	<c path="Int"/>
</f></get>
		<set public="1" get="inline" set="null" line="51"><f a="pos:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></set>
		<blit public="1" set="method" line="65"><f a="pos:src:srcpos:len">
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></blit>
		<sub public="1" set="method" line="93"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.io.Bytes"/>
</f></sub>
		<compare public="1" set="method" line="112"><f a="other">
	<c path="haxe.io.Bytes"/>
	<c path="Int"/>
</f></compare>
		<readString public="1" set="method" line="148"><f a="pos:len">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></readString>
		<toString public="1" set="method" line="192"><f a=""><c path="String"/></f></toString>
		<toHex public="1" set="method" line="207"><f a=""><c path="String"/></f></toHex>
		<getData public="1" get="inline" set="null" line="221"><f a=""><t path="haxe.io.BytesData"/></f></getData>
		<new set="method" line="32"><f a="length:b">
	<c path="Int"/>
	<t path="haxe.io.BytesData"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="haxe.Int32" params="" file="C:\Program Files\Motion-Twin\haxe/std/haxe/Int32.hx">
		<make public="1" get="inline" set="null" line="29" static="1"><f a="a:b">
	<c path="Int"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></make>
		<ofInt public="1" get="inline" set="null" line="33" static="1"><f a="x">
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></ofInt>
		<clamp get="inline" set="null" line="37" static="1"><f a="x">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></clamp>
		<toInt public="1" get="inline" set="null" line="45" static="1"><f a="x">
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></toInt>
		<toNativeInt public="1" get="inline" set="null" line="54" static="1"><f a="x">
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></toNativeInt>
		<add public="1" get="inline" set="null" line="58" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></add>
		<sub public="1" get="inline" set="null" line="62" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></sub>
		<mul public="1" get="inline" set="null" line="66" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></mul>
		<div public="1" get="inline" set="null" line="70" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></div>
		<mod public="1" get="inline" set="null" line="74" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></mod>
		<shl public="1" get="inline" set="null" line="78" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></shl>
		<shr public="1" get="inline" set="null" line="82" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></shr>
		<ushr public="1" get="inline" set="null" line="86" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="Int"/>
	<c path="haxe.Int32"/>
</f></ushr>
		<and public="1" get="inline" set="null" line="90" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></and>
		<or public="1" get="inline" set="null" line="94" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></or>
		<xor public="1" get="inline" set="null" line="98" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></xor>
		<neg public="1" get="inline" set="null" line="102" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></neg>
		<isNeg public="1" get="inline" set="null" line="106" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<e path="Bool"/>
</f></isNeg>
		<isZero public="1" get="inline" set="null" line="110" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<e path="Bool"/>
</f></isZero>
		<complement public="1" get="inline" set="null" line="114" static="1"><f a="a">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
</f></complement>
		<compare public="1" get="inline" set="null" line="118" static="1"><f a="a:b">
	<c path="haxe.Int32"/>
	<c path="haxe.Int32"/>
	<c path="Int"/>
</f></compare>
		<ucompare public="1" set="method" line="129" static="1">
			<f a="a:b">
				<c path="haxe.Int32"/>
				<c path="haxe.Int32"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Compare two Int32 in unsigned mode.
	</haxe_doc>
		</ucompare>
	</class>
	<class path="Date" params="" file="C:\Program Files\Motion-Twin\haxe/std/Date.hx" extern="1">
		<now public="1" set="method" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>
		Returns a Date representing the current local time.
	</haxe_doc>
		</now>
		<fromTime public="1" set="method" static="1">
			<f a="t">
				<c path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a timestamp [t] which is the number of
		milliseconds elapsed since 1st January 1970.
	</haxe_doc>
		</fromTime>
		<fromString public="1" set="method" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>
		Returns a Date from a formated string of one of the following formats :
		[YYYY-MM-DD hh:mm:ss] or [YYYY-MM-DD] or [hh:mm:ss]. The first two formats
		are expressed in local time, the third in UTC Epoch.
	</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><c path="Float"/></f>
			<haxe_doc>
		Returns the timestamp of the date. It's the number of milliseconds
		elapsed since 1st January 1970. It might only have a per-second precision
		depending on the platforms.
	</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the hours value of the date (0-23 range).
	</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the minutes value of the date (0-59 range).
	</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the seconds of the date (0-59 range).
	</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the full year of the date.
	</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the month of the date (0-11 range).
	</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the day of the date (1-31 range).
	</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc>
		Returns the week day of the date (0-6 range).
	</haxe_doc>
		</getDay>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>
		Returns a string representation for the Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See [DateTools.format] for
		other formating rules.
	</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>
		Creates a new date object.
	</haxe_doc>
		</new>
		<haxe_doc>
	The Date class is used for date manipulation. There is some extra functions
	available in the [DateTools] class.
</haxe_doc>
	</class>
	<class path="format.tools.BitsOutput" params="" file="src/format/tools/BitsOutput.hx">
		<o public="1"><c path="haxe.io.Output"/></o>
		<nbits><c path="Int"/></nbits>
		<bits><c path="Int"/></bits>
		<writeBits public="1" set="method" line="41"><f a="n:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></writeBits>
		<writeBit public="1" set="method" line="71"><f a="flag">
	<e path="Bool"/>
	<e path="Void"/>
</f></writeBit>
		<flush public="1" get="inline" set="null" line="81"><f a=""><e path="Void"/></f></flush>
		<new public="1" set="method" line="35"><f a="o">
	<c path="haxe.io.Output"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="StringTools" params="" file="C:\Program Files\Motion-Twin\haxe/std/StringTools.hx">
		<urlEncode public="1" set="method" line="38" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode an URL by using the standard format.
	</haxe_doc>
		</urlEncode>
		<urlDecode public="1" set="method" line="59" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Decode an URL using the standard format.
	</haxe_doc>
		</urlDecode>
		<htmlEscape public="1" set="method" line="80" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Escape HTML special characters of the string.
	</haxe_doc>
		</htmlEscape>
		<htmlUnescape public="1" set="method" line="87" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Unescape HTML special characters of the string.
	</haxe_doc>
		</htmlUnescape>
		<startsWith public="1" set="method" line="98" static="1">
			<f a="s:start">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] starts with the string [start].
	</haxe_doc>
		</startsWith>
		<endsWith public="1" set="method" line="105" static="1">
			<f a="s:end">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the string [s] ends with the string [end].
	</haxe_doc>
		</endsWith>
		<isSpace public="1" set="method" line="114" static="1">
			<f a="s:pos">
				<c path="String"/>
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>
		Tells if the character in the string [s] at position [pos] is a space.
	</haxe_doc>
		</isSpace>
		<ltrim public="1" set="method" line="122" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the left of the String [s].
	</haxe_doc>
		</ltrim>
		<rtrim public="1" set="method" line="141" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the right of the String [s].
	</haxe_doc>
		</rtrim>
		<trim public="1" set="method" line="161" static="1">
			<f a="s">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Removes spaces at the beginning and the end of the String [s].
	</haxe_doc>
		</trim>
		<rpad public="1" set="method" line="172" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its right until it reach [l] characters.
	</haxe_doc>
		</rpad>
		<lpad public="1" set="method" line="194" static="1">
			<f a="s:c:l">
				<c path="String"/>
				<c path="String"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Pad the string [s] by appending [c] at its left until it reach [l] characters.
	</haxe_doc>
		</lpad>
		<replace public="1" set="method" line="219" static="1">
			<f a="s:sub:by">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Replace all occurences of the string [sub] in the string [s] by the string [by].
	</haxe_doc>
		</replace>
		<hex public="1" set="method" line="230" static="1">
			<f a="n:?digits">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>
		Encode a number into a hexadecimal representation, with an optional number of zeros for left padding.
	</haxe_doc>
		</hex>
		<fastCodeAt public="1" get="inline" set="null" line="253" static="1">
			<f a="s:index">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>
		Provides a fast native string charCodeAt access. Since the EOF value might vary depending on the platforms, always test with StringTools.isEOF.
		Only guaranteed to work if index in [0,s.length] range. Might not work with strings containing \0 char.
	</haxe_doc>
		</fastCodeAt>
		<isEOF public="1" get="inline" set="null" line="270" static="1"><f a="c">
	<c path="Int"/>
	<e path="Bool"/>
</f></isEOF>
		<haxe_doc>
	The StringTools class contains some extra functionalities for [String]
	manipulation. It's stored in a different class in order to prevent
	the standard [String] of being bloated and thus increasing the size of
	each application using it.
</haxe_doc>
	</class>
</haxe>